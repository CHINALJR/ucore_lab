diff -r -u -P ../../origin/labcodes/lab5/.badarg.log lab5/.badarg.log
--- ../../origin/labcodes/lab5/.badarg.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.badarg.log	2020-05-28 11:30:34.413041032 +0800
@@ -0,0 +1,110 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badarg".
+fork ok.
+badarg pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.badsegment.log lab5/.badsegment.log
--- ../../origin/labcodes/lab5/.badsegment.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.badsegment.log	2020-05-28 11:30:18.297041032 +0800
@@ -0,0 +1,129 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badsegment".
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000028
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000028
+  eip  0x00800f9e
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
Binary files ../../origin/labcodes/lab5/bin/bootblock and lab5/bin/bootblock differ
Binary files ../../origin/labcodes/lab5/bin/kernel and lab5/bin/kernel differ
Binary files ../../origin/labcodes/lab5/bin/sign and lab5/bin/sign differ
Binary files ../../origin/labcodes/lab5/bin/swap.img and lab5/bin/swap.img differ
Binary files ../../origin/labcodes/lab5/bin/ucore.img and lab5/bin/ucore.img differ
diff -r -u -P ../../origin/labcodes/lab5/.divzero.log lab5/.divzero.log
--- ../../origin/labcodes/lab5/.divzero.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.divzero.log	2020-05-28 11:30:20.185041032 +0800
@@ -0,0 +1,130 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "divzero".
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000001
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x00000000 Divide error
+  err  0x00000000
+  eip  0x00800fa6
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.exit.log lab5/.exit.log
--- ../../origin/labcodes/lab5/.exit.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.exit.log	2020-05-28 11:30:36.157041032 +0800
@@ -0,0 +1,114 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "exit".
+I am the parent. Forking the child...
+I am parent, fork a child pid 3
+I am the parent, waiting now..
+I am the child.
+waitpid 3 ok.
+exit pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.faultreadkernel.log lab5/.faultreadkernel.log
--- ../../origin/labcodes/lab5/.faultreadkernel.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.faultreadkernel.log	2020-05-28 11:30:25.553041032 +0800
@@ -0,0 +1,134 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultreadkernel".
+not valid addr fac00000, and  can not find it in vma
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0xfac00000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000005
+  eip  0x00800f9f
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:210:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc038af18 eip:0xc0100aeb args:0xc010c184 0xc038af5c 0x000000d2 0x00000002 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc038af48 eip:0xc0100e4b args:0xc010c32e 0x000000d2 0xc010c5d0 0xfffffffd 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc038af78 eip:0xc01028ef args:0xc038afb4 0x00000000 0x00800020 0x0000001b 
+    kern/trap/trap.c:210: trap_dispatch+289
+ebp:0xc038afa8 eip:0xc0102a41 args:0xc038afb4 0x00000000 0x00000000 0xafffffa8 
+    kern/trap/trap.c:287: trap+74
+ebp:0xafffffa8 eip:0xc0102a96 args:0x00000000 0x00000000 0x00000000 0x00000000 
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8 eip:0x0080034d args:0x00000000 0x00000000 0x00000000 0x00000000 
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.faultread.log lab5/.faultread.log
--- ../../origin/labcodes/lab5/.faultread.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.faultread.log	2020-05-28 11:30:23.793041032 +0800
@@ -0,0 +1,135 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultread".
+not valid addr 0, and  can not find it in vma
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000004
+  eip  0x00800f9f
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:210:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc038af18 eip:0xc0100aeb args:0xc010c184 0xc038af5c 0x000000d2 0x00000002 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc038af48 eip:0xc0100e4b args:0xc010c32e 0x000000d2 0xc010c5d0 0xfffffffd 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc038af78 eip:0xc01028ef args:0xc038afb4 0x00000000 0x00800020 0x0000001b 
+    kern/trap/trap.c:210: trap_dispatch+289
+ebp:0xc038afa8 eip:0xc0102a41 args:0xc038afb4 0x00000000 0x00000000 0xafffffa8 
+    kern/trap/trap.c:287: trap+74
+ebp:0xafffffa8 eip:0xc0102a96 args:0x00000000 0x00000000 0x00000000 0x00000000 
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8 eip:0x0080034d args:0x00000000 0x00000000 0x00000000 0x00000000 
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.forktest.log lab5/.forktest.log
--- ../../origin/labcodes/lab5/.forktest.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.forktest.log	2020-05-28 11:30:56.513041032 +0800
@@ -0,0 +1,141 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktest".
+I am child 31
+I am child 30
+I am child 29
+I am child 28
+I am child 27
+I am child 26
+I am child 25
+I am child 24
+I am child 23
+I am child 22
+I am child 21
+I am child 20
+I am child 19
+I am child 18
+I am child 17
+I am child 16
+I am child 15
+I am child 14
+I am child 13
+I am child 12
+I am child 11
+I am child 10
+I am child 9
+I am child 8
+I am child 7
+I am child 6
+I am child 5
+I am child 4
+I am child 3
+I am child 2
+I am child 1
+I am child 0
+forktest pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.forktree.log lab5/.forktree.log
--- ../../origin/labcodes/lab5/.forktree.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.forktree.log	2020-05-28 11:30:58.329041032 +0800
@@ -0,0 +1,139 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktree".
+0002: I am ''
+0004: I am '1'
+0003: I am '0'
+0008: I am '01'
+0007: I am '00'
+0006: I am '11'
+0005: I am '10'
+0010: I am '101'
+000f: I am '100'
+000e: I am '111'
+000d: I am '110'
+000c: I am '001'
+000b: I am '000'
+000a: I am '011'
+0009: I am '010'
+0020: I am '0101'
+001f: I am '0100'
+001e: I am '0111'
+001d: I am '0110'
+001c: I am '0001'
+001b: I am '0000'
+001a: I am '0011'
+0019: I am '0010'
+0018: I am '1101'
+0017: I am '1100'
+0016: I am '1111'
+0015: I am '1110'
+0014: I am '1001'
+0013: I am '1000'
+0012: I am '1011'
+0011: I am '1010'
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.gdb.in lab5/.gdb.in
--- ../../origin/labcodes/lab5/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.gdb.in	2020-05-28 11:30:57.865041032 +0800
@@ -0,0 +1,4 @@
+target remote localhost:1234
+break *0xc0100256
+break *0x00100256
+continue
diff -r -u -P ../../origin/labcodes/lab5/.hello.log lab5/.hello.log
--- ../../origin/labcodes/lab5/.hello.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.hello.log	2020-05-28 11:30:27.269041032 +0800
@@ -0,0 +1,112 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "hello".
+Hello world!!.
+I am process 2.
+hello pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/kern/debug/kdebug.c lab5/kern/debug/kdebug.c
--- ../../origin/labcodes/lab5/kern/debug/kdebug.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/debug/kdebug.c	2020-05-28 10:09:50.576404310 +0800
@@ -347,5 +347,19 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+    uint32_t ebp = read_ebp(), eip = read_eip();
+
+    int i, j;
+    for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i ++) {
+        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+        uint32_t *args = (uint32_t *)ebp + 2;
+        for (j = 0; j < 4; j ++) {
+            cprintf("0x%08x ", args[j]);
+        }
+        cprintf("\n");
+        print_debuginfo(eip - 1);
+        eip = ((uint32_t *)ebp)[1];
+        ebp = ((uint32_t *)ebp)[0];
+    }
 }
 
diff -r -u -P ../../origin/labcodes/lab5/kern/debug/kdebug.c.orig lab5/kern/debug/kdebug.c.orig
--- ../../origin/labcodes/lab5/kern/debug/kdebug.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab5/kern/debug/kdebug.c.orig	2020-04-23 17:48:43.704431999 +0800
@@ -0,0 +1,351 @@
+#include <defs.h>
+#include <x86.h>
+#include <stab.h>
+#include <stdio.h>
+#include <string.h>
+#include <memlayout.h>
+#include <sync.h>
+#include <vmm.h>
+#include <proc.h>
+#include <kdebug.h>
+#include <kmonitor.h>
+#include <assert.h>
+
+#define STACKFRAME_DEPTH 20
+
+extern const struct stab __STAB_BEGIN__[];  // beginning of stabs table
+extern const struct stab __STAB_END__[];    // end of stabs table
+extern const char __STABSTR_BEGIN__[];      // beginning of string table
+extern const char __STABSTR_END__[];        // end of string table
+
+/* debug information about a particular instruction pointer */
+struct eipdebuginfo {
+    const char *eip_file;                   // source code filename for eip
+    int eip_line;                           // source code line number for eip
+    const char *eip_fn_name;                // name of function containing eip
+    int eip_fn_namelen;                     // length of function's name
+    uintptr_t eip_fn_addr;                  // start address of function
+    int eip_fn_narg;                        // number of function arguments
+};
+
+/* user STABS data structure  */
+struct userstabdata {
+    const struct stab *stabs;
+    const struct stab *stab_end;
+    const char *stabstr;
+    const char *stabstr_end;
+};
+
+/* *
+ * stab_binsearch - according to the input, the initial value of
+ * range [*@region_left, *@region_right], find a single stab entry
+ * that includes the address @addr and matches the type @type,
+ * and then save its boundary to the locations that pointed
+ * by @region_left and @region_right.
+ *
+ * Some stab types are arranged in increasing order by instruction address.
+ * For example, N_FUN stabs (stab entries with n_type == N_FUN), which
+ * mark functions, and N_SO stabs, which mark source files.
+ *
+ * Given an instruction address, this function finds the single stab entry
+ * of type @type that contains that address.
+ *
+ * The search takes place within the range [*@region_left, *@region_right].
+ * Thus, to search an entire set of N stabs, you might do:
+ *
+ *      left = 0;
+ *      right = N - 1;    (rightmost stab)
+ *      stab_binsearch(stabs, &left, &right, type, addr);
+ *
+ * The search modifies *region_left and *region_right to bracket the @addr.
+ * *@region_left points to the matching stab that contains @addr,
+ * and *@region_right points just before the next stab.
+ * If *@region_left > *region_right, then @addr is not contained in any
+ * matching stab.
+ *
+ * For example, given these N_SO stabs:
+ *      Index  Type   Address
+ *      0      SO     f0100000
+ *      13     SO     f0100040
+ *      117    SO     f0100176
+ *      118    SO     f0100178
+ *      555    SO     f0100652
+ *      556    SO     f0100654
+ *      657    SO     f0100849
+ * this code:
+ *      left = 0, right = 657;
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+            l = true_m + 1;
+            continue;
+        }
+
+        // actual binary search
+        any_matches = 1;
+        if (stabs[m].n_value < addr) {
+            *region_left = m;
+            l = true_m + 1;
+        } else if (stabs[m].n_value > addr) {
+            *region_right = m - 1;
+            r = m - 1;
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+
+/* *
+ * debuginfo_eip - Fill in the @info structure with information about
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+    info->eip_line = 0;
+    info->eip_fn_name = "<unknown>";
+    info->eip_fn_namelen = 9;
+    info->eip_fn_addr = addr;
+    info->eip_fn_narg = 0;
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+        stabs = __STAB_BEGIN__;
+        stab_end = __STAB_END__;
+        stabstr = __STABSTR_BEGIN__;
+        stabstr_end = __STABSTR_END__;
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+            return -1;
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+            return -1;
+        }
+
+        stabs = usd->stabs;
+        stab_end = usd->stab_end;
+        stabstr = usd->stabstr;
+        stabstr_end = usd->stabstr_end;
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+            return -1;
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+            return -1;
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+        return -1;
+    }
+
+    // Now we find the right stabs that define the function containing
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+    if (lfile == 0)
+        return -1;
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+
+    if (lfun <= rfun) {
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+        addr -= info->eip_fn_addr;
+        // Search within the function definition for the line number.
+        lline = lfun;
+        rline = rfun;
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+        lline = lfile;
+        rline = rfile;
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+    }
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+        info->eip_file = stabstr + stabs[lline].n_strx;
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+}
+
+/* *
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+    cprintf("  etext  0x%08x (phys)\n", etext);
+    cprintf("  edata  0x%08x (phys)\n", edata);
+    cprintf("  end    0x%08x (phys)\n", end);
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+}
+
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+
+static __noinline uint32_t
+read_eip(void) {
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+    return eip;
+}
+
+/* *
+ * print_stackframe - print a list of the saved eip values from the nested 'call'
+ * instructions that led to the current point of execution
+ *
+ * The x86 stack pointer, namely esp, points to the lowest location on the stack
+ * that is currently in use. Everything below that location in stack is free. Pushing
+ * a value onto the stack will invole decreasing the stack pointer and then writing
+ * the value to the place that stack pointer pointes to. And popping a value do the
+ * opposite.
+ *
+ * The ebp (base pointer) register, in contrast, is associated with the stack
+ * primarily by software convention. On entry to a C function, the function's
+ * prologue code normally saves the previous function's base pointer by pushing
+ * it onto the stack, and then copies the current esp value into ebp for the duration
+ * of the function. If all the functions in a program obey this convention,
+ * then at any given point during the program's execution, it is possible to trace
+ * back through the stack by following the chain of saved ebp pointers and determining
+ * exactly what nested sequence of function calls caused this particular point in the
+ * program to be reached. This capability can be particularly useful, for example,
+ * when a particular function causes an assert failure or panic because bad arguments
+ * were passed to it, but you aren't sure who passed the bad arguments. A stack
+ * backtrace lets you find the offending function.
+ *
+ * The inline function read_ebp() can tell us the value of current ebp. And the
+ * non-inline function read_eip() is useful, it can read the value of current eip,
+ * since while calling this function, read_eip() can read the caller's eip from
+ * stack easily.
+ *
+ * In print_debuginfo(), the function debuginfo_eip() can get enough information about
+ * calling-chain. Finally print_stackframe() will trace and print them for debugging.
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+     /* LAB1 YOUR CODE : STEP 1 */
+     /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
+      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
+      * (3) from 0 .. STACKFRAME_DEPTH
+      *    (3.1) printf value of ebp, eip
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]
+      *    (3.3) cprintf("\n");
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+}
+
diff -r -u -P ../../origin/labcodes/lab5/kern/mm/default_pmm.c lab5/kern/mm/default_pmm.c
--- ../../origin/labcodes/lab5/kern/mm/default_pmm.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/mm/default_pmm.c	2020-05-28 11:11:44.049041032 +0800
@@ -116,7 +116,7 @@
     base->property = n;
     SetPageProperty(base);
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(&free_list, &(base->page_link));
 }
 
 static struct Page *
@@ -127,6 +127,7 @@
     }
     struct Page *page = NULL;
     list_entry_t *le = &free_list;
+    // TODO: optimize (next-fit)
     while ((le = list_next(le)) != &free_list) {
         struct Page *p = le2page(le, page_link);
         if (p->property >= n) {
@@ -135,12 +136,13 @@
         }
     }
     if (page != NULL) {
-        list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
-    }
+            SetPageProperty(p);
+            list_add_after(&(page->page_link), &(p->page_link));
+        }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -162,6 +164,7 @@
     while (le != &free_list) {
         p = le2page(le, page_link);
         le = list_next(le);
+        // TODO: optimize
         if (base + base->property == p) {
             base->property += p->property;
             ClearPageProperty(p);
@@ -175,7 +178,16 @@
         }
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    le = list_next(&free_list);
+    while (le != &free_list) {
+        p = le2page(le, page_link);
+        if (base + base->property <= p) {
+            assert(base + base->property != p);
+            break;
+        }
+        le = list_next(le);
+    }
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
@@ -308,4 +320,3 @@
     .nr_free_pages = default_nr_free_pages,
     .check = default_check,
 };
-
diff -r -u -P ../../origin/labcodes/lab5/kern/mm/pmm.c lab5/kern/mm/pmm.c
--- ../../origin/labcodes/lab5/kern/mm/pmm.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/mm/pmm.c	2020-05-28 10:51:03.905041032 +0800
@@ -375,6 +375,18 @@
     }
     return NULL;          // (8) return page table entry
 #endif
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P)) {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -412,7 +424,7 @@
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
 #if 0
-    if (0) {                      //(1) check if this page table entry is present
+    if (0) {                      //(1) check if page directory is present
         struct Page *page = NULL; //(2) find corresponding page to pte
                                   //(3) decrease page reference
                                   //(4) and free this page when page reference reachs 0
@@ -420,6 +432,14 @@
                                   //(6) flush tlb
     }
 #endif
+    if (*ptep & PTE_P) {
+        struct Page *page = pte2page(*ptep);
+        if (page_ref_dec(page) == 0) {
+            free_page(page);
+        }
+        *ptep = 0;
+        tlb_invalidate(pgdir, la);
+    }
 }
 
 void
@@ -501,6 +521,10 @@
          * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
          * (4) build the map of phy addr of  nage with the linear addr start
          */
+        void * kva_src = page2kva(page);
+        void * kva_dst = page2kva(npage);
+        memcpy(kva_dst, kva_src, PGSIZE);
+        ret = page_insert(to, npage, start, perm);
         assert(ret == 0);
         }
         start += PGSIZE;
diff -r -u -P ../../origin/labcodes/lab5/kern/mm/swap_fifo.c lab5/kern/mm/swap_fifo.c
--- ../../origin/labcodes/lab5/kern/mm/swap_fifo.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/mm/swap_fifo.c	2020-05-28 10:09:50.580406495 +0800
@@ -51,6 +51,7 @@
     //record the page access situlation
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
     return 0;
 }
 /*
@@ -67,6 +68,12 @@
      /*LAB3 EXERCISE 2: YOUR CODE*/ 
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = head->prev;
+     assert(head!=le);
+     struct Page *p = le2page(le, pra_page_link);
+     list_del(le);
+     assert(p !=NULL);
+     *ptr_page = p;
      return 0;
 }
 
diff -r -u -P ../../origin/labcodes/lab5/kern/mm/vmm.c lab5/kern/mm/vmm.c
--- ../../origin/labcodes/lab5/kern/mm/vmm.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/mm/vmm.c	2020-05-28 11:09:14.589041032 +0800
@@ -493,6 +493,36 @@
         }
    }
 #endif
+    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    // (notice the 3th parameter '1')
+    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
+        cprintf("get_pte in do_pgfault failed\n");
+        goto failed;
+    }
+    
+    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
+            cprintf("pgdir_alloc_page in do_pgfault failed\n");
+            goto failed;
+        }
+    }
+    else { // if this pte is a swap entry, then load data from disk to a page with phy addr
+           // and call page_insert to map the phy addr with logical addr
+        if(swap_init_ok) {
+            struct Page *page=NULL;
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+                cprintf("swap_in in do_pgfault failed\n");
+                goto failed;
+            }    
+            page_insert(mm->pgdir, page, addr, perm);
+            swap_map_swappable(mm, addr, page, 1);
+            page->pra_vaddr = addr;
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
    ret = 0;
 failed:
     return ret;
diff -r -u -P ../../origin/labcodes/lab5/kern/process/proc.c lab5/kern/process/proc.c
--- ../../origin/labcodes/lab5/kern/process/proc.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/process/proc.c	2020-05-28 11:30:56.621041032 +0800
@@ -109,6 +109,20 @@
      *       uint32_t wait_state;                        // waiting state
      *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
 	 */
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN);
+        proc->wait_state = 0;
+        proc->cptr = proc->optr = proc->yptr = NULL;
     }
     return proc;
 }
@@ -403,7 +417,32 @@
 	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
 	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
-	
+    if ((proc = alloc_proc()) == NULL) {
+        goto fork_out;
+    }
+
+    proc->parent = current;
+
+    if (setup_kstack(proc) != 0) {
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0) {
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack, tf);
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+
+    wakeup_proc(proc);
+
+    ret = proc->pid;	
 fork_out:
     return ret;
 
@@ -602,6 +641,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = FL_IF;
     ret = 0;
 out:
     return ret;
diff -r -u -P ../../origin/labcodes/lab5/kern/trap/trap.c lab5/kern/trap/trap.c
--- ../../origin/labcodes/lab5/kern/trap/trap.c	2020-05-28 10:03:30.642532999 +0800
+++ lab5/kern/trap/trap.c	2020-05-28 11:15:45.585041032 +0800
@@ -56,6 +56,13 @@
      /* LAB5 YOUR CODE */ 
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+    extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+    }
+    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+    lidt(&idt_pd);
 }
 
 static const char *
@@ -223,7 +230,11 @@
         /* you should upate you lab1 code (just add ONE or TWO lines of code):
          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
          */
-  
+        ticks ++;
+        if (ticks % TICK_NUM == 0) {
+            // print_ticks();
+            current->need_resched = 1;
+        }
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
diff -r -u -P ../../origin/labcodes/lab5/obj/boot/bootasm.d lab5/obj/boot/bootasm.d
--- ../../origin/labcodes/lab5/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/boot/bootasm.d	2020-05-28 11:30:14.413041032 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files ../../origin/labcodes/lab5/obj/boot/bootasm.o and lab5/obj/boot/bootasm.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/boot/bootmain.d lab5/obj/boot/bootmain.d
--- ../../origin/labcodes/lab5/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/boot/bootmain.d	2020-05-28 11:30:14.405041032 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files ../../origin/labcodes/lab5/obj/boot/bootmain.o and lab5/obj/boot/bootmain.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/bootblock.asm lab5/obj/bootblock.asm
--- ../../origin/labcodes/lab5/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/bootblock.asm	2020-05-28 11:30:16.589041032 +0800
@@ -0,0 +1,433 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf 04 80 66 b8       	mov    $0xb8668004,%edi
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	ac                   	lods   %ds:(%esi),%al
+    7c5d:	7d 0f                	jge    7c6e <protcseg+0x1>
+    movl %cr0, %eax
+    7c5f:	20 c0                	and    %al,%al
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea 6d 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c6d
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 61 00 00 00       	call   7ceb <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readsect>:
+        /* do nothing */;
+}
+
+/* readsect - read a single sector at @secno into @dst */
+static void
+readsect(void *dst, uint32_t secno) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 d1                	mov    %edx,%ecx
+    7c8f:	89 e5                	mov    %esp,%ebp
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7c91:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c96:	57                   	push   %edi
+    7c97:	89 c7                	mov    %eax,%edi
+    7c99:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7c9a:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c9d:	3c 40                	cmp    $0x40,%al
+    7c9f:	75 f8                	jne    7c99 <readsect+0xd>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7ca1:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca6:	b0 01                	mov    $0x1,%al
+    7ca8:	ee                   	out    %al,(%dx)
+    7ca9:	0f b6 c1             	movzbl %cl,%eax
+    7cac:	b2 f3                	mov    $0xf3,%dl
+    7cae:	ee                   	out    %al,(%dx)
+    7caf:	0f b6 c5             	movzbl %ch,%eax
+    7cb2:	b2 f4                	mov    $0xf4,%dl
+    7cb4:	ee                   	out    %al,(%dx)
+    waitdisk();
+
+    outb(0x1F2, 1);                         // count = 1
+    outb(0x1F3, secno & 0xFF);
+    outb(0x1F4, (secno >> 8) & 0xFF);
+    outb(0x1F5, (secno >> 16) & 0xFF);
+    7cb5:	89 c8                	mov    %ecx,%eax
+    7cb7:	b2 f5                	mov    $0xf5,%dl
+    7cb9:	c1 e8 10             	shr    $0x10,%eax
+    7cbc:	0f b6 c0             	movzbl %al,%eax
+    7cbf:	ee                   	out    %al,(%dx)
+    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
+    7cc0:	c1 e9 18             	shr    $0x18,%ecx
+    7cc3:	b2 f6                	mov    $0xf6,%dl
+    7cc5:	88 c8                	mov    %cl,%al
+    7cc7:	83 e0 0f             	and    $0xf,%eax
+    7cca:	83 c8 e0             	or     $0xffffffe0,%eax
+    7ccd:	ee                   	out    %al,(%dx)
+    7cce:	b0 20                	mov    $0x20,%al
+    7cd0:	b2 f7                	mov    $0xf7,%dl
+    7cd2:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cd3:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cd4:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cd7:	3c 40                	cmp    $0x40,%al
+    7cd9:	75 f8                	jne    7cd3 <readsect+0x47>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7cdb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7ce0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7ce5:	fc                   	cld    
+    7ce6:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    // wait for disk to be ready
+    waitdisk();
+
+    // read a sector
+    insl(0x1F0, dst, SECTSIZE / 4);
+}
+    7ce8:	5f                   	pop    %edi
+    7ce9:	5d                   	pop    %ebp
+    7cea:	c3                   	ret    
+
+00007ceb <bootmain>:
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7ceb:	55                   	push   %ebp
+    7cec:	89 e5                	mov    %esp,%ebp
+    7cee:	57                   	push   %edi
+    7cef:	56                   	push   %esi
+    7cf0:	53                   	push   %ebx
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7cf1:	bb 01 00 00 00       	mov    $0x1,%ebx
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7cf6:	83 ec 1c             	sub    $0x1c,%esp
+    7cf9:	8d 43 7f             	lea    0x7f(%ebx),%eax
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+        readsect((void *)va, secno);
+    7cfc:	89 da                	mov    %ebx,%edx
+    7cfe:	c1 e0 09             	shl    $0x9,%eax
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d01:	43                   	inc    %ebx
+        readsect((void *)va, secno);
+    7d02:	e8 85 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d07:	83 fb 09             	cmp    $0x9,%ebx
+    7d0a:	75 ed                	jne    7cf9 <bootmain+0xe>
+bootmain(void) {
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d0c:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d13:	45 4c 46 
+    7d16:	75 6a                	jne    7d82 <bootmain+0x97>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d18:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d1d:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d23:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
+    7d2a:	c1 e0 05             	shl    $0x5,%eax
+    7d2d:	01 d8                	add    %ebx,%eax
+    7d2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for (; ph < eph; ph ++) {
+    7d32:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+    7d35:	73 3f                	jae    7d76 <bootmain+0x8b>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d37:	8b 73 08             	mov    0x8(%ebx),%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d3a:	8b 43 14             	mov    0x14(%ebx),%eax
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d3d:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    7d40:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d46:	01 f0                	add    %esi,%eax
+    7d48:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d4b:	89 c8                	mov    %ecx,%eax
+    7d4d:	25 ff 01 00 00       	and    $0x1ff,%eax
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d52:	c1 e9 09             	shr    $0x9,%ecx
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d55:	29 c6                	sub    %eax,%esi
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d57:	8d 79 01             	lea    0x1(%ecx),%edi
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d5a:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+    7d5d:	73 12                	jae    7d71 <bootmain+0x86>
+        readsect((void *)va, secno);
+    7d5f:	89 fa                	mov    %edi,%edx
+    7d61:	89 f0                	mov    %esi,%eax
+    7d63:	e8 24 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d68:	81 c6 00 02 00 00    	add    $0x200,%esi
+    7d6e:	47                   	inc    %edi
+    7d6f:	eb e9                	jmp    7d5a <bootmain+0x6f>
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d71:	83 c3 20             	add    $0x20,%ebx
+    7d74:	eb bc                	jmp    7d32 <bootmain+0x47>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d76:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d7b:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d80:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d82:	b8 00 8a ff ff       	mov    $0xffff8a00,%eax
+    7d87:	89 c2                	mov    %eax,%edx
+    7d89:	66 ef                	out    %ax,(%dx)
+    7d8b:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d90:	66 ef                	out    %ax,(%dx)
+    7d92:	eb fe                	jmp    7d92 <bootmain+0xa7>
Binary files ../../origin/labcodes/lab5/obj/bootblock.o and lab5/obj/bootblock.o differ
Binary files ../../origin/labcodes/lab5/obj/bootblock.out and lab5/obj/bootblock.out differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/debug/kdebug.d lab5/obj/kern/debug/kdebug.d
--- ../../origin/labcodes/lab5/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/debug/kdebug.d	2020-05-28 11:30:14.525041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h kern/process/proc.h kern/trap/trap.h kern/mm/vmm.h \
+ kern/debug/kdebug.h kern/debug/kmonitor.h
Binary files ../../origin/labcodes/lab5/obj/kern/debug/kdebug.o and lab5/obj/kern/debug/kdebug.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/debug/kmonitor.d lab5/obj/kern/debug/kmonitor.d
--- ../../origin/labcodes/lab5/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/debug/kmonitor.d	2020-05-28 11:30:14.529041032 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files ../../origin/labcodes/lab5/obj/kern/debug/kmonitor.o and lab5/obj/kern/debug/kmonitor.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/debug/panic.d lab5/obj/kern/debug/panic.d
--- ../../origin/labcodes/lab5/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/debug/panic.d	2020-05-28 11:30:14.513041032 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files ../../origin/labcodes/lab5/obj/kern/debug/panic.o and lab5/obj/kern/debug/panic.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/driver/clock.d lab5/obj/kern/driver/clock.d
--- ../../origin/labcodes/lab5/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/driver/clock.d	2020-05-28 11:30:14.509041032 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files ../../origin/labcodes/lab5/obj/kern/driver/clock.o and lab5/obj/kern/driver/clock.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/driver/console.d lab5/obj/kern/driver/console.d
--- ../../origin/labcodes/lab5/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/driver/console.d	2020-05-28 11:30:14.505041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h kern/process/proc.h
Binary files ../../origin/labcodes/lab5/obj/kern/driver/console.o and lab5/obj/kern/driver/console.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/driver/ide.d lab5/obj/kern/driver/ide.d
--- ../../origin/labcodes/lab5/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/driver/ide.d	2020-05-28 11:30:14.497041032 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files ../../origin/labcodes/lab5/obj/kern/driver/ide.o and lab5/obj/kern/driver/ide.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/driver/intr.d lab5/obj/kern/driver/intr.d
--- ../../origin/labcodes/lab5/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/driver/intr.d	2020-05-28 11:30:14.497041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files ../../origin/labcodes/lab5/obj/kern/driver/intr.o and lab5/obj/kern/driver/intr.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/driver/picirq.d lab5/obj/kern/driver/picirq.d
--- ../../origin/labcodes/lab5/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/driver/picirq.d	2020-05-28 11:30:14.497041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files ../../origin/labcodes/lab5/obj/kern/driver/picirq.o and lab5/obj/kern/driver/picirq.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/fs/swapfs.d lab5/obj/kern/fs/swapfs.d
--- ../../origin/labcodes/lab5/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/fs/swapfs.d	2020-05-28 11:30:14.437041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ kern/process/proc.h kern/trap/trap.h kern/fs/swapfs.h kern/fs/fs.h \
+ kern/driver/ide.h
Binary files ../../origin/labcodes/lab5/obj/kern/fs/swapfs.o and lab5/obj/kern/fs/swapfs.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/init/entry.d lab5/obj/kern/init/entry.d
--- ../../origin/labcodes/lab5/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/init/entry.d	2020-05-28 11:30:14.549041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files ../../origin/labcodes/lab5/obj/kern/init/entry.o and lab5/obj/kern/init/entry.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/init/init.d lab5/obj/kern/init/init.d
--- ../../origin/labcodes/lab5/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/init/init.d	2020-05-28 11:30:14.545041032 +0800
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ kern/process/proc.h kern/driver/ide.h kern/mm/swap.h \
+ kern/debug/kmonitor.h
Binary files ../../origin/labcodes/lab5/obj/kern/init/init.o and lab5/obj/kern/init/init.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/libs/readline.d lab5/obj/kern/libs/readline.d
--- ../../origin/labcodes/lab5/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/libs/readline.d	2020-05-28 11:30:14.533041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files ../../origin/labcodes/lab5/obj/kern/libs/readline.o and lab5/obj/kern/libs/readline.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/libs/stdio.d lab5/obj/kern/libs/stdio.d
--- ../../origin/labcodes/lab5/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/libs/stdio.d	2020-05-28 11:30:14.521041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files ../../origin/labcodes/lab5/obj/kern/libs/stdio.o and lab5/obj/kern/libs/stdio.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/default_pmm.d lab5/obj/kern/mm/default_pmm.d
--- ../../origin/labcodes/lab5/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/default_pmm.d	2020-05-28 11:30:14.477041032 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files ../../origin/labcodes/lab5/obj/kern/mm/default_pmm.o and lab5/obj/kern/mm/default_pmm.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/kmalloc.d lab5/obj/kern/mm/kmalloc.d
--- ../../origin/labcodes/lab5/obj/kern/mm/kmalloc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/kmalloc.d	2020-05-28 11:30:14.477041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/pmm.h libs/stdio.h \
+ libs/stdarg.h
Binary files ../../origin/labcodes/lab5/obj/kern/mm/kmalloc.o and lab5/obj/kern/mm/kmalloc.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/pmm.d lab5/obj/kern/mm/pmm.d
--- ../../origin/labcodes/lab5/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/pmm.d	2020-05-28 11:30:14.461041032 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h kern/process/proc.h \
+ kern/trap/trap.h libs/error.h kern/mm/swap.h kern/mm/vmm.h \
+ kern/mm/kmalloc.h
Binary files ../../origin/labcodes/lab5/obj/kern/mm/pmm.o and lab5/obj/kern/mm/pmm.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/swap.d lab5/obj/kern/mm/swap.d
--- ../../origin/labcodes/lab5/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/swap.d	2020-05-28 11:30:14.461041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h kern/process/proc.h \
+ kern/trap/trap.h kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h \
+ libs/stdarg.h libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/swap_fifo.d lab5/obj/kern/mm/swap_fifo.d
--- ../../origin/labcodes/lab5/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/swap_fifo.d	2020-05-28 11:30:14.453041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/swap_fifo.h
Binary files ../../origin/labcodes/lab5/obj/kern/mm/swap_fifo.o and lab5/obj/kern/mm/swap_fifo.o differ
Binary files ../../origin/labcodes/lab5/obj/kern/mm/swap.o and lab5/obj/kern/mm/swap.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/mm/vmm.d lab5/obj/kern/mm/vmm.d
--- ../../origin/labcodes/lab5/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/mm/vmm.d	2020-05-28 11:30:14.449041032 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h kern/process/proc.h \
+ kern/trap/trap.h libs/string.h libs/stdio.h libs/stdarg.h libs/error.h \
+ kern/mm/pmm.h kern/mm/swap.h kern/mm/kmalloc.h
Binary files ../../origin/labcodes/lab5/obj/kern/mm/vmm.o and lab5/obj/kern/mm/vmm.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/process/entry.d lab5/obj/kern/process/entry.d
--- ../../origin/labcodes/lab5/obj/kern/process/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/process/entry.d	2020-05-28 11:30:14.433041032 +0800
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
Binary files ../../origin/labcodes/lab5/obj/kern/process/entry.o and lab5/obj/kern/process/entry.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/process/proc.d lab5/obj/kern/process/proc.d
--- ../../origin/labcodes/lab5/obj/kern/process/proc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/process/proc.d	2020-05-28 11:30:56.657041032 +0800
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h kern/mm/kmalloc.h libs/string.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h libs/error.h \
+ libs/elf.h kern/mm/vmm.h libs/stdio.h libs/stdarg.h libs/stdlib.h \
+ libs/unistd.h
Binary files ../../origin/labcodes/lab5/obj/kern/process/proc.o and lab5/obj/kern/process/proc.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/process/switch.d lab5/obj/kern/process/switch.d
--- ../../origin/labcodes/lab5/obj/kern/process/switch.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/process/switch.d	2020-05-28 11:30:14.425041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
Binary files ../../origin/labcodes/lab5/obj/kern/process/switch.o and lab5/obj/kern/process/switch.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/schedule/sched.d lab5/obj/kern/schedule/sched.d
--- ../../origin/labcodes/lab5/obj/kern/schedule/sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/schedule/sched.d	2020-05-28 11:30:14.417041032 +0800
@@ -0,0 +1,5 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h kern/process/proc.h kern/trap/trap.h \
+ kern/mm/memlayout.h
Binary files ../../origin/labcodes/lab5/obj/kern/schedule/sched.o and lab5/obj/kern/schedule/sched.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/syscall/syscall.d lab5/obj/kern/syscall/syscall.d
--- ../../origin/labcodes/lab5/obj/kern/syscall/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/syscall/syscall.d	2020-05-28 11:30:14.413041032 +0800
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ kern/syscall/syscall.h libs/stdio.h libs/stdarg.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h
Binary files ../../origin/labcodes/lab5/obj/kern/syscall/syscall.o and lab5/obj/kern/syscall/syscall.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/trap/trap.d lab5/obj/kern/trap/trap.d
--- ../../origin/labcodes/lab5/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/trap/trap.d	2020-05-28 11:30:14.485041032 +0800
@@ -0,0 +1,7 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ kern/process/proc.h kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h \
+ libs/unistd.h kern/syscall/syscall.h libs/error.h
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/trap/trapentry.d lab5/obj/kern/trap/trapentry.d
--- ../../origin/labcodes/lab5/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/trap/trapentry.d	2020-05-28 11:30:14.477041032 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files ../../origin/labcodes/lab5/obj/kern/trap/trapentry.o and lab5/obj/kern/trap/trapentry.o differ
Binary files ../../origin/labcodes/lab5/obj/kern/trap/trap.o and lab5/obj/kern/trap/trap.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kern/trap/vectors.d lab5/obj/kern/trap/vectors.d
--- ../../origin/labcodes/lab5/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kern/trap/vectors.d	2020-05-28 11:30:14.477041032 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files ../../origin/labcodes/lab5/obj/kern/trap/vectors.o and lab5/obj/kern/trap/vectors.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/kernel.asm lab5/obj/kernel.asm
--- ../../origin/labcodes/lab5/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kernel.asm	2020-05-28 11:30:56.785041032 +0800
@@ -0,0 +1,23347 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+
+.text
+.globl kern_entry
+kern_entry:
+    # load pa of boot pgdir
+    movl $REALLOC(__boot_pgdir), %eax
+c0100000:	b8 00 c0 19 00       	mov    $0x19c000,%eax
+    movl %eax, %cr3
+c0100005:	0f 22 d8             	mov    %eax,%cr3
+
+    # enable paging
+    movl %cr0, %eax
+c0100008:	0f 20 c0             	mov    %cr0,%eax
+    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
+c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
+    andl $~(CR0_TS | CR0_EM), %eax
+c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
+    movl %eax, %cr0
+c0100013:	0f 22 c0             	mov    %eax,%cr0
+
+    # update eip
+    # now, eip = 0x1.....
+    leal next, %eax
+c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
+    # set eip = KERNBASE + 0x1.....
+    jmp *%eax
+c010001c:	ff e0                	jmp    *%eax
+
+c010001e <next>:
+next:
+
+    # unmap va 0 ~ 4M, it's temporary mapping
+    xorl %eax, %eax
+c010001e:	31 c0                	xor    %eax,%eax
+    movl %eax, __boot_pgdir
+c0100020:	a3 00 c0 19 c0       	mov    %eax,0xc019c000
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010002a:	bc 00 a0 12 c0       	mov    $0xc012a000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>
+
+c0100034 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100034:	eb fe                	jmp    c0100034 <spin>
+
+c0100036 <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c0100036:	55                   	push   %ebp
+c0100037:	89 e5                	mov    %esp,%ebp
+c0100039:	83 ec 28             	sub    $0x28,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c010003c:	ba 78 11 1a c0       	mov    $0xc01a1178,%edx
+c0100041:	b8 00 e0 19 c0       	mov    $0xc019e000,%eax
+c0100046:	29 c2                	sub    %eax,%edx
+c0100048:	89 d0                	mov    %edx,%eax
+c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100055:	00 
+c0100056:	c7 04 24 00 e0 19 c0 	movl   $0xc019e000,(%esp)
+c010005d:	e8 a8 bc 00 00       	call   c010bd0a <memset>
+
+    cons_init();                // init the console
+c0100062:	e8 91 16 00 00       	call   c01016f8 <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c0100067:	c7 45 f4 a0 be 10 c0 	movl   $0xc010bea0,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100075:	c7 04 24 bc be 10 c0 	movl   $0xc010bebc,(%esp)
+c010007c:	e8 de 02 00 00       	call   c010035f <cprintf>
+
+    print_kerninfo();
+c0100081:	e8 05 09 00 00       	call   c010098b <print_kerninfo>
+
+    grade_backtrace();
+c0100086:	e8 9d 00 00 00       	call   c0100128 <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010008b:	e8 ce 56 00 00       	call   c010575e <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c0100090:	e8 41 20 00 00       	call   c01020d6 <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100095:	e8 b9 21 00 00       	call   c0102253 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c010009a:	e8 60 86 00 00       	call   c01086ff <vmm_init>
+    proc_init();                // init process table
+c010009f:	e8 29 ac 00 00       	call   c010accd <proc_init>
+    
+    ide_init();                 // init ide devices
+c01000a4:	e8 80 17 00 00       	call   c0101829 <ide_init>
+    swap_init();                // init swap
+c01000a9:	e8 27 6d 00 00       	call   c0106dd5 <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000ae:	e8 fb 0d 00 00       	call   c0100eae <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000b3:	e8 8c 1f 00 00       	call   c0102044 <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000b8:	e8 cf ad 00 00       	call   c010ae8c <cpu_idle>
+
+c01000bd <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000bd:	55                   	push   %ebp
+c01000be:	89 e5                	mov    %esp,%ebp
+c01000c0:	83 ec 18             	sub    $0x18,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000c3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01000ca:	00 
+c01000cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01000d2:	00 
+c01000d3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01000da:	e8 f0 0c 00 00       	call   c0100dcf <mon_backtrace>
+}
+c01000df:	c9                   	leave  
+c01000e0:	c3                   	ret    
+
+c01000e1 <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000e1:	55                   	push   %ebp
+c01000e2:	89 e5                	mov    %esp,%ebp
+c01000e4:	53                   	push   %ebx
+c01000e5:	83 ec 14             	sub    $0x14,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000e8:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+c01000eb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+c01000ee:	8d 55 08             	lea    0x8(%ebp),%edx
+c01000f1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000f4:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01000f8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01000fc:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0100100:	89 04 24             	mov    %eax,(%esp)
+c0100103:	e8 b5 ff ff ff       	call   c01000bd <grade_backtrace2>
+}
+c0100108:	83 c4 14             	add    $0x14,%esp
+c010010b:	5b                   	pop    %ebx
+c010010c:	5d                   	pop    %ebp
+c010010d:	c3                   	ret    
+
+c010010e <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c010010e:	55                   	push   %ebp
+c010010f:	89 e5                	mov    %esp,%ebp
+c0100111:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace1(arg0, arg2);
+c0100114:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100117:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010011b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010011e:	89 04 24             	mov    %eax,(%esp)
+c0100121:	e8 bb ff ff ff       	call   c01000e1 <grade_backtrace1>
+}
+c0100126:	c9                   	leave  
+c0100127:	c3                   	ret    
+
+c0100128 <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c0100128:	55                   	push   %ebp
+c0100129:	89 e5                	mov    %esp,%ebp
+c010012b:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c010012e:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
+c0100133:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
+c010013a:	ff 
+c010013b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010013f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100146:	e8 c3 ff ff ff       	call   c010010e <grade_backtrace0>
+}
+c010014b:	c9                   	leave  
+c010014c:	c3                   	ret    
+
+c010014d <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c010014d:	55                   	push   %ebp
+c010014e:	89 e5                	mov    %esp,%ebp
+c0100150:	83 ec 28             	sub    $0x28,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c0100153:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c0100156:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100159:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c010015c:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c010015f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100163:	0f b7 c0             	movzwl %ax,%eax
+c0100166:	83 e0 03             	and    $0x3,%eax
+c0100169:	89 c2                	mov    %eax,%edx
+c010016b:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c0100170:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100174:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100178:	c7 04 24 c1 be 10 c0 	movl   $0xc010bec1,(%esp)
+c010017f:	e8 db 01 00 00       	call   c010035f <cprintf>
+    cprintf("%d:  cs = %x\n", round, reg1);
+c0100184:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100188:	0f b7 d0             	movzwl %ax,%edx
+c010018b:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c0100190:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100194:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100198:	c7 04 24 cf be 10 c0 	movl   $0xc010becf,(%esp)
+c010019f:	e8 bb 01 00 00       	call   c010035f <cprintf>
+    cprintf("%d:  ds = %x\n", round, reg2);
+c01001a4:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c01001a8:	0f b7 d0             	movzwl %ax,%edx
+c01001ab:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c01001b0:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001b4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001b8:	c7 04 24 dd be 10 c0 	movl   $0xc010bedd,(%esp)
+c01001bf:	e8 9b 01 00 00       	call   c010035f <cprintf>
+    cprintf("%d:  es = %x\n", round, reg3);
+c01001c4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001c8:	0f b7 d0             	movzwl %ax,%edx
+c01001cb:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c01001d0:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001d4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001d8:	c7 04 24 eb be 10 c0 	movl   $0xc010beeb,(%esp)
+c01001df:	e8 7b 01 00 00       	call   c010035f <cprintf>
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001e4:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001e8:	0f b7 d0             	movzwl %ax,%edx
+c01001eb:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c01001f0:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001f4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001f8:	c7 04 24 f9 be 10 c0 	movl   $0xc010bef9,(%esp)
+c01001ff:	e8 5b 01 00 00       	call   c010035f <cprintf>
+    round ++;
+c0100204:	a1 00 e0 19 c0       	mov    0xc019e000,%eax
+c0100209:	83 c0 01             	add    $0x1,%eax
+c010020c:	a3 00 e0 19 c0       	mov    %eax,0xc019e000
+}
+c0100211:	c9                   	leave  
+c0100212:	c3                   	ret    
+
+c0100213 <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c0100213:	55                   	push   %ebp
+c0100214:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+}
+c0100216:	5d                   	pop    %ebp
+c0100217:	c3                   	ret    
+
+c0100218 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c0100218:	55                   	push   %ebp
+c0100219:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+}
+c010021b:	5d                   	pop    %ebp
+c010021c:	c3                   	ret    
+
+c010021d <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c010021d:	55                   	push   %ebp
+c010021e:	89 e5                	mov    %esp,%ebp
+c0100220:	83 ec 18             	sub    $0x18,%esp
+    lab1_print_cur_status();
+c0100223:	e8 25 ff ff ff       	call   c010014d <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c0100228:	c7 04 24 08 bf 10 c0 	movl   $0xc010bf08,(%esp)
+c010022f:	e8 2b 01 00 00       	call   c010035f <cprintf>
+    lab1_switch_to_user();
+c0100234:	e8 da ff ff ff       	call   c0100213 <lab1_switch_to_user>
+    lab1_print_cur_status();
+c0100239:	e8 0f ff ff ff       	call   c010014d <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c010023e:	c7 04 24 28 bf 10 c0 	movl   $0xc010bf28,(%esp)
+c0100245:	e8 15 01 00 00       	call   c010035f <cprintf>
+    lab1_switch_to_kernel();
+c010024a:	e8 c9 ff ff ff       	call   c0100218 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c010024f:	e8 f9 fe ff ff       	call   c010014d <lab1_print_cur_status>
+}
+c0100254:	c9                   	leave  
+c0100255:	c3                   	ret    
+
+c0100256 <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c0100256:	55                   	push   %ebp
+c0100257:	89 e5                	mov    %esp,%ebp
+c0100259:	83 ec 28             	sub    $0x28,%esp
+    if (prompt != NULL) {
+c010025c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100260:	74 13                	je     c0100275 <readline+0x1f>
+        cprintf("%s", prompt);
+c0100262:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100265:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100269:	c7 04 24 47 bf 10 c0 	movl   $0xc010bf47,(%esp)
+c0100270:	e8 ea 00 00 00       	call   c010035f <cprintf>
+    }
+    int i = 0, c;
+c0100275:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c010027c:	e8 66 01 00 00       	call   c01003e7 <getchar>
+c0100281:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c0100284:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100288:	79 07                	jns    c0100291 <readline+0x3b>
+            return NULL;
+c010028a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010028f:	eb 79                	jmp    c010030a <readline+0xb4>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c0100291:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c0100295:	7e 28                	jle    c01002bf <readline+0x69>
+c0100297:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c010029e:	7f 1f                	jg     c01002bf <readline+0x69>
+            cputchar(c);
+c01002a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002a3:	89 04 24             	mov    %eax,(%esp)
+c01002a6:	e8 da 00 00 00       	call   c0100385 <cputchar>
+            buf[i ++] = c;
+c01002ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002ae:	8d 50 01             	lea    0x1(%eax),%edx
+c01002b1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01002b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01002b7:	88 90 20 e0 19 c0    	mov    %dl,-0x3fe61fe0(%eax)
+c01002bd:	eb 46                	jmp    c0100305 <readline+0xaf>
+        }
+        else if (c == '\b' && i > 0) {
+c01002bf:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01002c3:	75 17                	jne    c01002dc <readline+0x86>
+c01002c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01002c9:	7e 11                	jle    c01002dc <readline+0x86>
+            cputchar(c);
+c01002cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002ce:	89 04 24             	mov    %eax,(%esp)
+c01002d1:	e8 af 00 00 00       	call   c0100385 <cputchar>
+            i --;
+c01002d6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01002da:	eb 29                	jmp    c0100305 <readline+0xaf>
+        }
+        else if (c == '\n' || c == '\r') {
+c01002dc:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01002e0:	74 06                	je     c01002e8 <readline+0x92>
+c01002e2:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01002e6:	75 1d                	jne    c0100305 <readline+0xaf>
+            cputchar(c);
+c01002e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002eb:	89 04 24             	mov    %eax,(%esp)
+c01002ee:	e8 92 00 00 00       	call   c0100385 <cputchar>
+            buf[i] = '\0';
+c01002f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002f6:	05 20 e0 19 c0       	add    $0xc019e020,%eax
+c01002fb:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01002fe:	b8 20 e0 19 c0       	mov    $0xc019e020,%eax
+c0100303:	eb 05                	jmp    c010030a <readline+0xb4>
+        }
+    }
+c0100305:	e9 72 ff ff ff       	jmp    c010027c <readline+0x26>
+}
+c010030a:	c9                   	leave  
+c010030b:	c3                   	ret    
+
+c010030c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c010030c:	55                   	push   %ebp
+c010030d:	89 e5                	mov    %esp,%ebp
+c010030f:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c0100312:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100315:	89 04 24             	mov    %eax,(%esp)
+c0100318:	e8 07 14 00 00       	call   c0101724 <cons_putc>
+    (*cnt) ++;
+c010031d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100320:	8b 00                	mov    (%eax),%eax
+c0100322:	8d 50 01             	lea    0x1(%eax),%edx
+c0100325:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100328:	89 10                	mov    %edx,(%eax)
+}
+c010032a:	c9                   	leave  
+c010032b:	c3                   	ret    
+
+c010032c <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c010032c:	55                   	push   %ebp
+c010032d:	89 e5                	mov    %esp,%ebp
+c010032f:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c0100332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100339:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010033c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0100340:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100343:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100347:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c010034a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010034e:	c7 04 24 0c 03 10 c0 	movl   $0xc010030c,(%esp)
+c0100355:	e8 f1 b0 00 00       	call   c010b44b <vprintfmt>
+    return cnt;
+c010035a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010035d:	c9                   	leave  
+c010035e:	c3                   	ret    
+
+c010035f <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c010035f:	55                   	push   %ebp
+c0100360:	89 e5                	mov    %esp,%ebp
+c0100362:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c0100365:	8d 45 0c             	lea    0xc(%ebp),%eax
+c0100368:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c010036b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010036e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100372:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100375:	89 04 24             	mov    %eax,(%esp)
+c0100378:	e8 af ff ff ff       	call   c010032c <vcprintf>
+c010037d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c0100380:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100383:	c9                   	leave  
+c0100384:	c3                   	ret    
+
+c0100385 <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c0100385:	55                   	push   %ebp
+c0100386:	89 e5                	mov    %esp,%ebp
+c0100388:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c010038b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010038e:	89 04 24             	mov    %eax,(%esp)
+c0100391:	e8 8e 13 00 00       	call   c0101724 <cons_putc>
+}
+c0100396:	c9                   	leave  
+c0100397:	c3                   	ret    
+
+c0100398 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c0100398:	55                   	push   %ebp
+c0100399:	89 e5                	mov    %esp,%ebp
+c010039b:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c010039e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c01003a5:	eb 13                	jmp    c01003ba <cputs+0x22>
+        cputch(c, &cnt);
+c01003a7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01003ab:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01003ae:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01003b2:	89 04 24             	mov    %eax,(%esp)
+c01003b5:	e8 52 ff ff ff       	call   c010030c <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01003ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01003bd:	8d 50 01             	lea    0x1(%eax),%edx
+c01003c0:	89 55 08             	mov    %edx,0x8(%ebp)
+c01003c3:	0f b6 00             	movzbl (%eax),%eax
+c01003c6:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01003c9:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c01003cd:	75 d8                	jne    c01003a7 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c01003cf:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c01003d2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01003d6:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c01003dd:	e8 2a ff ff ff       	call   c010030c <cputch>
+    return cnt;
+c01003e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c01003e5:	c9                   	leave  
+c01003e6:	c3                   	ret    
+
+c01003e7 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c01003e7:	55                   	push   %ebp
+c01003e8:	89 e5                	mov    %esp,%ebp
+c01003ea:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c01003ed:	e8 6e 13 00 00       	call   c0101760 <cons_getc>
+c01003f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01003f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003f9:	74 f2                	je     c01003ed <getchar+0x6>
+        /* do nothing */;
+    return c;
+c01003fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01003fe:	c9                   	leave  
+c01003ff:	c3                   	ret    
+
+c0100400 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c0100400:	55                   	push   %ebp
+c0100401:	89 e5                	mov    %esp,%ebp
+c0100403:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c0100406:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100409:	8b 00                	mov    (%eax),%eax
+c010040b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010040e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100411:	8b 00                	mov    (%eax),%eax
+c0100413:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c0100416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c010041d:	e9 d2 00 00 00       	jmp    c01004f4 <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c0100422:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0100425:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100428:	01 d0                	add    %edx,%eax
+c010042a:	89 c2                	mov    %eax,%edx
+c010042c:	c1 ea 1f             	shr    $0x1f,%edx
+c010042f:	01 d0                	add    %edx,%eax
+c0100431:	d1 f8                	sar    %eax
+c0100433:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0100436:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100439:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c010043c:	eb 04                	jmp    c0100442 <stab_binsearch+0x42>
+            m --;
+c010043e:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c0100442:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100445:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100448:	7c 1f                	jl     c0100469 <stab_binsearch+0x69>
+c010044a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010044d:	89 d0                	mov    %edx,%eax
+c010044f:	01 c0                	add    %eax,%eax
+c0100451:	01 d0                	add    %edx,%eax
+c0100453:	c1 e0 02             	shl    $0x2,%eax
+c0100456:	89 c2                	mov    %eax,%edx
+c0100458:	8b 45 08             	mov    0x8(%ebp),%eax
+c010045b:	01 d0                	add    %edx,%eax
+c010045d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100461:	0f b6 c0             	movzbl %al,%eax
+c0100464:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100467:	75 d5                	jne    c010043e <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c0100469:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010046c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010046f:	7d 0b                	jge    c010047c <stab_binsearch+0x7c>
+            l = true_m + 1;
+c0100471:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100474:	83 c0 01             	add    $0x1,%eax
+c0100477:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c010047a:	eb 78                	jmp    c01004f4 <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c010047c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c0100483:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100486:	89 d0                	mov    %edx,%eax
+c0100488:	01 c0                	add    %eax,%eax
+c010048a:	01 d0                	add    %edx,%eax
+c010048c:	c1 e0 02             	shl    $0x2,%eax
+c010048f:	89 c2                	mov    %eax,%edx
+c0100491:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100494:	01 d0                	add    %edx,%eax
+c0100496:	8b 40 08             	mov    0x8(%eax),%eax
+c0100499:	3b 45 18             	cmp    0x18(%ebp),%eax
+c010049c:	73 13                	jae    c01004b1 <stab_binsearch+0xb1>
+            *region_left = m;
+c010049e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004a4:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c01004a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004a9:	83 c0 01             	add    $0x1,%eax
+c01004ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004af:	eb 43                	jmp    c01004f4 <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c01004b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004b4:	89 d0                	mov    %edx,%eax
+c01004b6:	01 c0                	add    %eax,%eax
+c01004b8:	01 d0                	add    %edx,%eax
+c01004ba:	c1 e0 02             	shl    $0x2,%eax
+c01004bd:	89 c2                	mov    %eax,%edx
+c01004bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01004c2:	01 d0                	add    %edx,%eax
+c01004c4:	8b 40 08             	mov    0x8(%eax),%eax
+c01004c7:	3b 45 18             	cmp    0x18(%ebp),%eax
+c01004ca:	76 16                	jbe    c01004e2 <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c01004cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004cf:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01004d2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004d5:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c01004d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004da:	83 e8 01             	sub    $0x1,%eax
+c01004dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004e0:	eb 12                	jmp    c01004f4 <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c01004e2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004e8:	89 10                	mov    %edx,(%eax)
+            l = m;
+c01004ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01004f0:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c01004f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01004f7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01004fa:	0f 8e 22 ff ff ff    	jle    c0100422 <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c0100500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100504:	75 0f                	jne    c0100515 <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c0100506:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100509:	8b 00                	mov    (%eax),%eax
+c010050b:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100511:	89 10                	mov    %edx,(%eax)
+c0100513:	eb 3f                	jmp    c0100554 <stab_binsearch+0x154>
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c0100515:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100518:	8b 00                	mov    (%eax),%eax
+c010051a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c010051d:	eb 04                	jmp    c0100523 <stab_binsearch+0x123>
+c010051f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c0100523:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100526:	8b 00                	mov    (%eax),%eax
+c0100528:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010052b:	7d 1f                	jge    c010054c <stab_binsearch+0x14c>
+c010052d:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100530:	89 d0                	mov    %edx,%eax
+c0100532:	01 c0                	add    %eax,%eax
+c0100534:	01 d0                	add    %edx,%eax
+c0100536:	c1 e0 02             	shl    $0x2,%eax
+c0100539:	89 c2                	mov    %eax,%edx
+c010053b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010053e:	01 d0                	add    %edx,%eax
+c0100540:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100544:	0f b6 c0             	movzbl %al,%eax
+c0100547:	3b 45 14             	cmp    0x14(%ebp),%eax
+c010054a:	75 d3                	jne    c010051f <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c010054c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010054f:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100552:	89 10                	mov    %edx,(%eax)
+    }
+}
+c0100554:	c9                   	leave  
+c0100555:	c3                   	ret    
+
+c0100556 <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c0100556:	55                   	push   %ebp
+c0100557:	89 e5                	mov    %esp,%ebp
+c0100559:	83 ec 58             	sub    $0x58,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c010055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010055f:	c7 00 4c bf 10 c0    	movl   $0xc010bf4c,(%eax)
+    info->eip_line = 0;
+c0100565:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100568:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100572:	c7 40 08 4c bf 10 c0 	movl   $0xc010bf4c,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c0100579:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010057c:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c0100583:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100586:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100589:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c010058c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010058f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c0100596:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c010059d:	76 21                	jbe    c01005c0 <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c010059f:	c7 45 f4 a0 e6 10 c0 	movl   $0xc010e6a0,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c01005a6:	c7 45 f0 f8 29 12 c0 	movl   $0xc01229f8,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c01005ad:	c7 45 ec f9 29 12 c0 	movl   $0xc01229f9,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c01005b4:	c7 45 e8 d6 76 12 c0 	movl   $0xc01276d6,-0x18(%ebp)
+c01005bb:	e9 ea 00 00 00       	jmp    c01006aa <debuginfo_eip+0x154>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c01005c0:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c01005c7:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c01005cc:	85 c0                	test   %eax,%eax
+c01005ce:	74 11                	je     c01005e1 <debuginfo_eip+0x8b>
+c01005d0:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c01005d5:	8b 40 18             	mov    0x18(%eax),%eax
+c01005d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01005db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01005df:	75 0a                	jne    c01005eb <debuginfo_eip+0x95>
+            return -1;
+c01005e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01005e6:	e9 9e 03 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c01005eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01005ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01005f5:	00 
+c01005f6:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01005fd:	00 
+c01005fe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100602:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100605:	89 04 24             	mov    %eax,(%esp)
+c0100608:	e8 1b 8a 00 00       	call   c0109028 <user_mem_check>
+c010060d:	85 c0                	test   %eax,%eax
+c010060f:	75 0a                	jne    c010061b <debuginfo_eip+0xc5>
+            return -1;
+c0100611:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100616:	e9 6e 03 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+        }
+
+        stabs = usd->stabs;
+c010061b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010061e:	8b 00                	mov    (%eax),%eax
+c0100620:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c0100623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100626:	8b 40 04             	mov    0x4(%eax),%eax
+c0100629:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c010062c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010062f:	8b 40 08             	mov    0x8(%eax),%eax
+c0100632:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c0100635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100638:	8b 40 0c             	mov    0xc(%eax),%eax
+c010063b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c010063e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100641:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100644:	29 c2                	sub    %eax,%edx
+c0100646:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100649:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100650:	00 
+c0100651:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100655:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100659:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010065c:	89 04 24             	mov    %eax,(%esp)
+c010065f:	e8 c4 89 00 00       	call   c0109028 <user_mem_check>
+c0100664:	85 c0                	test   %eax,%eax
+c0100666:	75 0a                	jne    c0100672 <debuginfo_eip+0x11c>
+            return -1;
+c0100668:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010066d:	e9 17 03 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c0100672:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0100675:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100678:	29 c2                	sub    %eax,%edx
+c010067a:	89 d0                	mov    %edx,%eax
+c010067c:	89 c2                	mov    %eax,%edx
+c010067e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100681:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100688:	00 
+c0100689:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010068d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100691:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100694:	89 04 24             	mov    %eax,(%esp)
+c0100697:	e8 8c 89 00 00       	call   c0109028 <user_mem_check>
+c010069c:	85 c0                	test   %eax,%eax
+c010069e:	75 0a                	jne    c01006aa <debuginfo_eip+0x154>
+            return -1;
+c01006a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006a5:	e9 df 02 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c01006aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01006b0:	76 0d                	jbe    c01006bf <debuginfo_eip+0x169>
+c01006b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006b5:	83 e8 01             	sub    $0x1,%eax
+c01006b8:	0f b6 00             	movzbl (%eax),%eax
+c01006bb:	84 c0                	test   %al,%al
+c01006bd:	74 0a                	je     c01006c9 <debuginfo_eip+0x173>
+        return -1;
+c01006bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006c4:	e9 c0 02 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c01006c9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01006d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01006d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006d6:	29 c2                	sub    %eax,%edx
+c01006d8:	89 d0                	mov    %edx,%eax
+c01006da:	c1 f8 02             	sar    $0x2,%eax
+c01006dd:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c01006e3:	83 e8 01             	sub    $0x1,%eax
+c01006e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c01006e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01006ec:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01006f0:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
+c01006f7:	00 
+c01006f8:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c01006fb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01006ff:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100702:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100706:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100709:	89 04 24             	mov    %eax,(%esp)
+c010070c:	e8 ef fc ff ff       	call   c0100400 <stab_binsearch>
+    if (lfile == 0)
+c0100711:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100714:	85 c0                	test   %eax,%eax
+c0100716:	75 0a                	jne    c0100722 <debuginfo_eip+0x1cc>
+        return -1;
+c0100718:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010071d:	e9 67 02 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c0100722:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100725:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0100728:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010072b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c010072e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100731:	89 44 24 10          	mov    %eax,0x10(%esp)
+c0100735:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
+c010073c:	00 
+c010073d:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0100740:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100744:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c0100747:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010074b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010074e:	89 04 24             	mov    %eax,(%esp)
+c0100751:	e8 aa fc ff ff       	call   c0100400 <stab_binsearch>
+
+    if (lfun <= rfun) {
+c0100756:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100759:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010075c:	39 c2                	cmp    %eax,%edx
+c010075e:	7f 7c                	jg     c01007dc <debuginfo_eip+0x286>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c0100760:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100763:	89 c2                	mov    %eax,%edx
+c0100765:	89 d0                	mov    %edx,%eax
+c0100767:	01 c0                	add    %eax,%eax
+c0100769:	01 d0                	add    %edx,%eax
+c010076b:	c1 e0 02             	shl    $0x2,%eax
+c010076e:	89 c2                	mov    %eax,%edx
+c0100770:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100773:	01 d0                	add    %edx,%eax
+c0100775:	8b 10                	mov    (%eax),%edx
+c0100777:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c010077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010077d:	29 c1                	sub    %eax,%ecx
+c010077f:	89 c8                	mov    %ecx,%eax
+c0100781:	39 c2                	cmp    %eax,%edx
+c0100783:	73 22                	jae    c01007a7 <debuginfo_eip+0x251>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c0100785:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100788:	89 c2                	mov    %eax,%edx
+c010078a:	89 d0                	mov    %edx,%eax
+c010078c:	01 c0                	add    %eax,%eax
+c010078e:	01 d0                	add    %edx,%eax
+c0100790:	c1 e0 02             	shl    $0x2,%eax
+c0100793:	89 c2                	mov    %eax,%edx
+c0100795:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100798:	01 d0                	add    %edx,%eax
+c010079a:	8b 10                	mov    (%eax),%edx
+c010079c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010079f:	01 c2                	add    %eax,%edx
+c01007a1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007a4:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c01007a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007aa:	89 c2                	mov    %eax,%edx
+c01007ac:	89 d0                	mov    %edx,%eax
+c01007ae:	01 c0                	add    %eax,%eax
+c01007b0:	01 d0                	add    %edx,%eax
+c01007b2:	c1 e0 02             	shl    $0x2,%eax
+c01007b5:	89 c2                	mov    %eax,%edx
+c01007b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007ba:	01 d0                	add    %edx,%eax
+c01007bc:	8b 50 08             	mov    0x8(%eax),%edx
+c01007bf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007c2:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c01007c5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007c8:	8b 40 10             	mov    0x10(%eax),%eax
+c01007cb:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c01007ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c01007d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007d7:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01007da:	eb 15                	jmp    c01007f1 <debuginfo_eip+0x29b>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c01007dc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007df:	8b 55 08             	mov    0x8(%ebp),%edx
+c01007e2:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c01007e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c01007eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007ee:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c01007f1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007f4:	8b 40 08             	mov    0x8(%eax),%eax
+c01007f7:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
+c01007fe:	00 
+c01007ff:	89 04 24             	mov    %eax,(%esp)
+c0100802:	e8 77 b3 00 00       	call   c010bb7e <strfind>
+c0100807:	89 c2                	mov    %eax,%edx
+c0100809:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010080c:	8b 40 08             	mov    0x8(%eax),%eax
+c010080f:	29 c2                	sub    %eax,%edx
+c0100811:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100814:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100817:	8b 45 08             	mov    0x8(%ebp),%eax
+c010081a:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010081e:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
+c0100825:	00 
+c0100826:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c0100829:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010082d:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c0100830:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100834:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100837:	89 04 24             	mov    %eax,(%esp)
+c010083a:	e8 c1 fb ff ff       	call   c0100400 <stab_binsearch>
+    if (lline <= rline) {
+c010083f:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0100845:	39 c2                	cmp    %eax,%edx
+c0100847:	7f 24                	jg     c010086d <debuginfo_eip+0x317>
+        info->eip_line = stabs[rline].n_desc;
+c0100849:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010084c:	89 c2                	mov    %eax,%edx
+c010084e:	89 d0                	mov    %edx,%eax
+c0100850:	01 c0                	add    %eax,%eax
+c0100852:	01 d0                	add    %edx,%eax
+c0100854:	c1 e0 02             	shl    $0x2,%eax
+c0100857:	89 c2                	mov    %eax,%edx
+c0100859:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010085c:	01 d0                	add    %edx,%eax
+c010085e:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c0100862:	0f b7 d0             	movzwl %ax,%edx
+c0100865:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100868:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c010086b:	eb 13                	jmp    c0100880 <debuginfo_eip+0x32a>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c010086d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100872:	e9 12 01 00 00       	jmp    c0100989 <debuginfo_eip+0x433>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c0100877:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010087a:	83 e8 01             	sub    $0x1,%eax
+c010087d:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100880:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100883:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100886:	39 c2                	cmp    %eax,%edx
+c0100888:	7c 56                	jl     c01008e0 <debuginfo_eip+0x38a>
+           && stabs[lline].n_type != N_SOL
+c010088a:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010088d:	89 c2                	mov    %eax,%edx
+c010088f:	89 d0                	mov    %edx,%eax
+c0100891:	01 c0                	add    %eax,%eax
+c0100893:	01 d0                	add    %edx,%eax
+c0100895:	c1 e0 02             	shl    $0x2,%eax
+c0100898:	89 c2                	mov    %eax,%edx
+c010089a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010089d:	01 d0                	add    %edx,%eax
+c010089f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01008a3:	3c 84                	cmp    $0x84,%al
+c01008a5:	74 39                	je     c01008e0 <debuginfo_eip+0x38a>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c01008a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008aa:	89 c2                	mov    %eax,%edx
+c01008ac:	89 d0                	mov    %edx,%eax
+c01008ae:	01 c0                	add    %eax,%eax
+c01008b0:	01 d0                	add    %edx,%eax
+c01008b2:	c1 e0 02             	shl    $0x2,%eax
+c01008b5:	89 c2                	mov    %eax,%edx
+c01008b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008ba:	01 d0                	add    %edx,%eax
+c01008bc:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01008c0:	3c 64                	cmp    $0x64,%al
+c01008c2:	75 b3                	jne    c0100877 <debuginfo_eip+0x321>
+c01008c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008c7:	89 c2                	mov    %eax,%edx
+c01008c9:	89 d0                	mov    %edx,%eax
+c01008cb:	01 c0                	add    %eax,%eax
+c01008cd:	01 d0                	add    %edx,%eax
+c01008cf:	c1 e0 02             	shl    $0x2,%eax
+c01008d2:	89 c2                	mov    %eax,%edx
+c01008d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008d7:	01 d0                	add    %edx,%eax
+c01008d9:	8b 40 08             	mov    0x8(%eax),%eax
+c01008dc:	85 c0                	test   %eax,%eax
+c01008de:	74 97                	je     c0100877 <debuginfo_eip+0x321>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c01008e0:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008e6:	39 c2                	cmp    %eax,%edx
+c01008e8:	7c 46                	jl     c0100930 <debuginfo_eip+0x3da>
+c01008ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008ed:	89 c2                	mov    %eax,%edx
+c01008ef:	89 d0                	mov    %edx,%eax
+c01008f1:	01 c0                	add    %eax,%eax
+c01008f3:	01 d0                	add    %edx,%eax
+c01008f5:	c1 e0 02             	shl    $0x2,%eax
+c01008f8:	89 c2                	mov    %eax,%edx
+c01008fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008fd:	01 d0                	add    %edx,%eax
+c01008ff:	8b 10                	mov    (%eax),%edx
+c0100901:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100904:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100907:	29 c1                	sub    %eax,%ecx
+c0100909:	89 c8                	mov    %ecx,%eax
+c010090b:	39 c2                	cmp    %eax,%edx
+c010090d:	73 21                	jae    c0100930 <debuginfo_eip+0x3da>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c010090f:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100912:	89 c2                	mov    %eax,%edx
+c0100914:	89 d0                	mov    %edx,%eax
+c0100916:	01 c0                	add    %eax,%eax
+c0100918:	01 d0                	add    %edx,%eax
+c010091a:	c1 e0 02             	shl    $0x2,%eax
+c010091d:	89 c2                	mov    %eax,%edx
+c010091f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100922:	01 d0                	add    %edx,%eax
+c0100924:	8b 10                	mov    (%eax),%edx
+c0100926:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100929:	01 c2                	add    %eax,%edx
+c010092b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010092e:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c0100930:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100933:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0100936:	39 c2                	cmp    %eax,%edx
+c0100938:	7d 4a                	jge    c0100984 <debuginfo_eip+0x42e>
+        for (lline = lfun + 1;
+c010093a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010093d:	83 c0 01             	add    $0x1,%eax
+c0100940:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0100943:	eb 18                	jmp    c010095d <debuginfo_eip+0x407>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c0100945:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100948:	8b 40 14             	mov    0x14(%eax),%eax
+c010094b:	8d 50 01             	lea    0x1(%eax),%edx
+c010094e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100951:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c0100954:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100957:	83 c0 01             	add    $0x1,%eax
+c010095a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c010095d:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100960:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c0100963:	39 c2                	cmp    %eax,%edx
+c0100965:	7d 1d                	jge    c0100984 <debuginfo_eip+0x42e>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100967:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010096a:	89 c2                	mov    %eax,%edx
+c010096c:	89 d0                	mov    %edx,%eax
+c010096e:	01 c0                	add    %eax,%eax
+c0100970:	01 d0                	add    %edx,%eax
+c0100972:	c1 e0 02             	shl    $0x2,%eax
+c0100975:	89 c2                	mov    %eax,%edx
+c0100977:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010097a:	01 d0                	add    %edx,%eax
+c010097c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100980:	3c a0                	cmp    $0xa0,%al
+c0100982:	74 c1                	je     c0100945 <debuginfo_eip+0x3ef>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c0100984:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100989:	c9                   	leave  
+c010098a:	c3                   	ret    
+
+c010098b <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c010098b:	55                   	push   %ebp
+c010098c:	89 e5                	mov    %esp,%ebp
+c010098e:	83 ec 18             	sub    $0x18,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c0100991:	c7 04 24 56 bf 10 c0 	movl   $0xc010bf56,(%esp)
+c0100998:	e8 c2 f9 ff ff       	call   c010035f <cprintf>
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c010099d:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
+c01009a4:	c0 
+c01009a5:	c7 04 24 6f bf 10 c0 	movl   $0xc010bf6f,(%esp)
+c01009ac:	e8 ae f9 ff ff       	call   c010035f <cprintf>
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c01009b1:	c7 44 24 04 93 be 10 	movl   $0xc010be93,0x4(%esp)
+c01009b8:	c0 
+c01009b9:	c7 04 24 87 bf 10 c0 	movl   $0xc010bf87,(%esp)
+c01009c0:	e8 9a f9 ff ff       	call   c010035f <cprintf>
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c01009c5:	c7 44 24 04 00 e0 19 	movl   $0xc019e000,0x4(%esp)
+c01009cc:	c0 
+c01009cd:	c7 04 24 9f bf 10 c0 	movl   $0xc010bf9f,(%esp)
+c01009d4:	e8 86 f9 ff ff       	call   c010035f <cprintf>
+    cprintf("  end    0x%08x (phys)\n", end);
+c01009d9:	c7 44 24 04 78 11 1a 	movl   $0xc01a1178,0x4(%esp)
+c01009e0:	c0 
+c01009e1:	c7 04 24 b7 bf 10 c0 	movl   $0xc010bfb7,(%esp)
+c01009e8:	e8 72 f9 ff ff       	call   c010035f <cprintf>
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c01009ed:	b8 78 11 1a c0       	mov    $0xc01a1178,%eax
+c01009f2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c01009f8:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
+c01009fd:	29 c2                	sub    %eax,%edx
+c01009ff:	89 d0                	mov    %edx,%eax
+c0100a01:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100a07:	85 c0                	test   %eax,%eax
+c0100a09:	0f 48 c2             	cmovs  %edx,%eax
+c0100a0c:	c1 f8 0a             	sar    $0xa,%eax
+c0100a0f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a13:	c7 04 24 d0 bf 10 c0 	movl   $0xc010bfd0,(%esp)
+c0100a1a:	e8 40 f9 ff ff       	call   c010035f <cprintf>
+}
+c0100a1f:	c9                   	leave  
+c0100a20:	c3                   	ret    
+
+c0100a21 <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100a21:	55                   	push   %ebp
+c0100a22:	89 e5                	mov    %esp,%ebp
+c0100a24:	81 ec 48 01 00 00    	sub    $0x148,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100a2a:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100a2d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a31:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a34:	89 04 24             	mov    %eax,(%esp)
+c0100a37:	e8 1a fb ff ff       	call   c0100556 <debuginfo_eip>
+c0100a3c:	85 c0                	test   %eax,%eax
+c0100a3e:	74 15                	je     c0100a55 <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100a40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a43:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a47:	c7 04 24 fa bf 10 c0 	movl   $0xc010bffa,(%esp)
+c0100a4e:	e8 0c f9 ff ff       	call   c010035f <cprintf>
+c0100a53:	eb 6d                	jmp    c0100ac2 <print_debuginfo+0xa1>
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100a5c:	eb 1c                	jmp    c0100a7a <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c0100a5e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a64:	01 d0                	add    %edx,%eax
+c0100a66:	0f b6 00             	movzbl (%eax),%eax
+c0100a69:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100a6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100a72:	01 ca                	add    %ecx,%edx
+c0100a74:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a76:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100a7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a7d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0100a80:	7f dc                	jg     c0100a5e <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c0100a82:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a8b:	01 d0                	add    %edx,%eax
+c0100a8d:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100a93:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100a96:	89 d1                	mov    %edx,%ecx
+c0100a98:	29 c1                	sub    %eax,%ecx
+c0100a9a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100a9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100aa0:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0100aa4:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100aaa:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0100aae:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100ab2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ab6:	c7 04 24 16 c0 10 c0 	movl   $0xc010c016,(%esp)
+c0100abd:	e8 9d f8 ff ff       	call   c010035f <cprintf>
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100ac2:	c9                   	leave  
+c0100ac3:	c3                   	ret    
+
+c0100ac4 <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100ac4:	55                   	push   %ebp
+c0100ac5:	89 e5                	mov    %esp,%ebp
+c0100ac7:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100aca:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100acd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100ad0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100ad3:	c9                   	leave  
+c0100ad4:	c3                   	ret    
+
+c0100ad5 <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100ad5:	55                   	push   %ebp
+c0100ad6:	89 e5                	mov    %esp,%ebp
+c0100ad8:	83 ec 38             	sub    $0x38,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100adb:	89 e8                	mov    %ebp,%eax
+c0100add:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return ebp;
+c0100ae0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+    uint32_t ebp = read_ebp(), eip = read_eip();
+c0100ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100ae6:	e8 d9 ff ff ff       	call   c0100ac4 <read_eip>
+c0100aeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int i, j;
+    for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i ++) {
+c0100aee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100af5:	e9 88 00 00 00       	jmp    c0100b82 <print_stackframe+0xad>
+        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+c0100afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100afd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b04:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b08:	c7 04 24 28 c0 10 c0 	movl   $0xc010c028,(%esp)
+c0100b0f:	e8 4b f8 ff ff       	call   c010035f <cprintf>
+        uint32_t *args = (uint32_t *)ebp + 2;
+c0100b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b17:	83 c0 08             	add    $0x8,%eax
+c0100b1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        for (j = 0; j < 4; j ++) {
+c0100b1d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0100b24:	eb 25                	jmp    c0100b4b <print_stackframe+0x76>
+            cprintf("0x%08x ", args[j]);
+c0100b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100b29:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100b30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100b33:	01 d0                	add    %edx,%eax
+c0100b35:	8b 00                	mov    (%eax),%eax
+c0100b37:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b3b:	c7 04 24 44 c0 10 c0 	movl   $0xc010c044,(%esp)
+c0100b42:	e8 18 f8 ff ff       	call   c010035f <cprintf>
+
+    int i, j;
+    for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i ++) {
+        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+        uint32_t *args = (uint32_t *)ebp + 2;
+        for (j = 0; j < 4; j ++) {
+c0100b47:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+c0100b4b:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
+c0100b4f:	7e d5                	jle    c0100b26 <print_stackframe+0x51>
+            cprintf("0x%08x ", args[j]);
+        }
+        cprintf("\n");
+c0100b51:	c7 04 24 4c c0 10 c0 	movl   $0xc010c04c,(%esp)
+c0100b58:	e8 02 f8 ff ff       	call   c010035f <cprintf>
+        print_debuginfo(eip - 1);
+c0100b5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100b60:	83 e8 01             	sub    $0x1,%eax
+c0100b63:	89 04 24             	mov    %eax,(%esp)
+c0100b66:	e8 b6 fe ff ff       	call   c0100a21 <print_debuginfo>
+        eip = ((uint32_t *)ebp)[1];
+c0100b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b6e:	83 c0 04             	add    $0x4,%eax
+c0100b71:	8b 00                	mov    (%eax),%eax
+c0100b73:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        ebp = ((uint32_t *)ebp)[0];
+c0100b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b79:	8b 00                	mov    (%eax),%eax
+c0100b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+    uint32_t ebp = read_ebp(), eip = read_eip();
+
+    int i, j;
+    for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i ++) {
+c0100b7e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0100b82:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100b86:	7f 0a                	jg     c0100b92 <print_stackframe+0xbd>
+c0100b88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100b8c:	0f 85 68 ff ff ff    	jne    c0100afa <print_stackframe+0x25>
+        cprintf("\n");
+        print_debuginfo(eip - 1);
+        eip = ((uint32_t *)ebp)[1];
+        ebp = ((uint32_t *)ebp)[0];
+    }
+}
+c0100b92:	c9                   	leave  
+c0100b93:	c3                   	ret    
+
+c0100b94 <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100b94:	55                   	push   %ebp
+c0100b95:	89 e5                	mov    %esp,%ebp
+c0100b97:	83 ec 28             	sub    $0x28,%esp
+    int argc = 0;
+c0100b9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100ba1:	eb 0c                	jmp    c0100baf <parse+0x1b>
+            *buf ++ = '\0';
+c0100ba3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100ba6:	8d 50 01             	lea    0x1(%eax),%edx
+c0100ba9:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100bac:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100baf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bb2:	0f b6 00             	movzbl (%eax),%eax
+c0100bb5:	84 c0                	test   %al,%al
+c0100bb7:	74 1d                	je     c0100bd6 <parse+0x42>
+c0100bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bbc:	0f b6 00             	movzbl (%eax),%eax
+c0100bbf:	0f be c0             	movsbl %al,%eax
+c0100bc2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100bc6:	c7 04 24 d0 c0 10 c0 	movl   $0xc010c0d0,(%esp)
+c0100bcd:	e8 79 af 00 00       	call   c010bb4b <strchr>
+c0100bd2:	85 c0                	test   %eax,%eax
+c0100bd4:	75 cd                	jne    c0100ba3 <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100bd6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bd9:	0f b6 00             	movzbl (%eax),%eax
+c0100bdc:	84 c0                	test   %al,%al
+c0100bde:	75 02                	jne    c0100be2 <parse+0x4e>
+            break;
+c0100be0:	eb 67                	jmp    c0100c49 <parse+0xb5>
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100be2:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100be6:	75 14                	jne    c0100bfc <parse+0x68>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100be8:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+c0100bef:	00 
+c0100bf0:	c7 04 24 d5 c0 10 c0 	movl   $0xc010c0d5,(%esp)
+c0100bf7:	e8 63 f7 ff ff       	call   c010035f <cprintf>
+        }
+        argv[argc ++] = buf;
+c0100bfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bff:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c02:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100c05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100c0f:	01 c2                	add    %eax,%edx
+c0100c11:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c14:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c16:	eb 04                	jmp    c0100c1c <parse+0x88>
+            buf ++;
+c0100c18:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c1c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c1f:	0f b6 00             	movzbl (%eax),%eax
+c0100c22:	84 c0                	test   %al,%al
+c0100c24:	74 1d                	je     c0100c43 <parse+0xaf>
+c0100c26:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c29:	0f b6 00             	movzbl (%eax),%eax
+c0100c2c:	0f be c0             	movsbl %al,%eax
+c0100c2f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c33:	c7 04 24 d0 c0 10 c0 	movl   $0xc010c0d0,(%esp)
+c0100c3a:	e8 0c af 00 00       	call   c010bb4b <strchr>
+c0100c3f:	85 c0                	test   %eax,%eax
+c0100c41:	74 d5                	je     c0100c18 <parse+0x84>
+            buf ++;
+        }
+    }
+c0100c43:	90                   	nop
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c44:	e9 66 ff ff ff       	jmp    c0100baf <parse+0x1b>
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100c4c:	c9                   	leave  
+c0100c4d:	c3                   	ret    
+
+c0100c4e <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100c4e:	55                   	push   %ebp
+c0100c4f:	89 e5                	mov    %esp,%ebp
+c0100c51:	83 ec 68             	sub    $0x68,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100c54:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100c57:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c5b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c5e:	89 04 24             	mov    %eax,(%esp)
+c0100c61:	e8 2e ff ff ff       	call   c0100b94 <parse>
+c0100c66:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100c69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100c6d:	75 0a                	jne    c0100c79 <runcmd+0x2b>
+        return 0;
+c0100c6f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100c74:	e9 85 00 00 00       	jmp    c0100cfe <runcmd+0xb0>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100c79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100c80:	eb 5c                	jmp    c0100cde <runcmd+0x90>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100c82:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100c85:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c88:	89 d0                	mov    %edx,%eax
+c0100c8a:	01 c0                	add    %eax,%eax
+c0100c8c:	01 d0                	add    %edx,%eax
+c0100c8e:	c1 e0 02             	shl    $0x2,%eax
+c0100c91:	05 00 a0 12 c0       	add    $0xc012a000,%eax
+c0100c96:	8b 00                	mov    (%eax),%eax
+c0100c98:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0100c9c:	89 04 24             	mov    %eax,(%esp)
+c0100c9f:	e8 08 ae 00 00       	call   c010baac <strcmp>
+c0100ca4:	85 c0                	test   %eax,%eax
+c0100ca6:	75 32                	jne    c0100cda <runcmd+0x8c>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100ca8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100cab:	89 d0                	mov    %edx,%eax
+c0100cad:	01 c0                	add    %eax,%eax
+c0100caf:	01 d0                	add    %edx,%eax
+c0100cb1:	c1 e0 02             	shl    $0x2,%eax
+c0100cb4:	05 00 a0 12 c0       	add    $0xc012a000,%eax
+c0100cb9:	8b 40 08             	mov    0x8(%eax),%eax
+c0100cbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100cbf:	8d 4a ff             	lea    -0x1(%edx),%ecx
+c0100cc2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0100cc5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100cc9:	8d 55 b0             	lea    -0x50(%ebp),%edx
+c0100ccc:	83 c2 04             	add    $0x4,%edx
+c0100ccf:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0100cd3:	89 0c 24             	mov    %ecx,(%esp)
+c0100cd6:	ff d0                	call   *%eax
+c0100cd8:	eb 24                	jmp    c0100cfe <runcmd+0xb0>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cda:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100ce1:	83 f8 02             	cmp    $0x2,%eax
+c0100ce4:	76 9c                	jbe    c0100c82 <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100ce6:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100ce9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ced:	c7 04 24 f3 c0 10 c0 	movl   $0xc010c0f3,(%esp)
+c0100cf4:	e8 66 f6 ff ff       	call   c010035f <cprintf>
+    return 0;
+c0100cf9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100cfe:	c9                   	leave  
+c0100cff:	c3                   	ret    
+
+c0100d00 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100d00:	55                   	push   %ebp
+c0100d01:	89 e5                	mov    %esp,%ebp
+c0100d03:	83 ec 28             	sub    $0x28,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100d06:	c7 04 24 0c c1 10 c0 	movl   $0xc010c10c,(%esp)
+c0100d0d:	e8 4d f6 ff ff       	call   c010035f <cprintf>
+    cprintf("Type 'help' for a list of commands.\n");
+c0100d12:	c7 04 24 34 c1 10 c0 	movl   $0xc010c134,(%esp)
+c0100d19:	e8 41 f6 ff ff       	call   c010035f <cprintf>
+
+    if (tf != NULL) {
+c0100d1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100d22:	74 0b                	je     c0100d2f <kmonitor+0x2f>
+        print_trapframe(tf);
+c0100d24:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d27:	89 04 24             	mov    %eax,(%esp)
+c0100d2a:	e8 d9 16 00 00       	call   c0102408 <print_trapframe>
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100d2f:	c7 04 24 59 c1 10 c0 	movl   $0xc010c159,(%esp)
+c0100d36:	e8 1b f5 ff ff       	call   c0100256 <readline>
+c0100d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100d3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100d42:	74 18                	je     c0100d5c <kmonitor+0x5c>
+            if (runcmd(buf, tf) < 0) {
+c0100d44:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d47:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d4e:	89 04 24             	mov    %eax,(%esp)
+c0100d51:	e8 f8 fe ff ff       	call   c0100c4e <runcmd>
+c0100d56:	85 c0                	test   %eax,%eax
+c0100d58:	79 02                	jns    c0100d5c <kmonitor+0x5c>
+                break;
+c0100d5a:	eb 02                	jmp    c0100d5e <kmonitor+0x5e>
+            }
+        }
+    }
+c0100d5c:	eb d1                	jmp    c0100d2f <kmonitor+0x2f>
+}
+c0100d5e:	c9                   	leave  
+c0100d5f:	c3                   	ret    
+
+c0100d60 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100d60:	55                   	push   %ebp
+c0100d61:	89 e5                	mov    %esp,%ebp
+c0100d63:	83 ec 28             	sub    $0x28,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100d6d:	eb 3f                	jmp    c0100dae <mon_help+0x4e>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100d6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d72:	89 d0                	mov    %edx,%eax
+c0100d74:	01 c0                	add    %eax,%eax
+c0100d76:	01 d0                	add    %edx,%eax
+c0100d78:	c1 e0 02             	shl    $0x2,%eax
+c0100d7b:	05 00 a0 12 c0       	add    $0xc012a000,%eax
+c0100d80:	8b 48 04             	mov    0x4(%eax),%ecx
+c0100d83:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d86:	89 d0                	mov    %edx,%eax
+c0100d88:	01 c0                	add    %eax,%eax
+c0100d8a:	01 d0                	add    %edx,%eax
+c0100d8c:	c1 e0 02             	shl    $0x2,%eax
+c0100d8f:	05 00 a0 12 c0       	add    $0xc012a000,%eax
+c0100d94:	8b 00                	mov    (%eax),%eax
+c0100d96:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0100d9a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d9e:	c7 04 24 5d c1 10 c0 	movl   $0xc010c15d,(%esp)
+c0100da5:	e8 b5 f5 ff ff       	call   c010035f <cprintf>
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100daa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100db1:	83 f8 02             	cmp    $0x2,%eax
+c0100db4:	76 b9                	jbe    c0100d6f <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100db6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dbb:	c9                   	leave  
+c0100dbc:	c3                   	ret    
+
+c0100dbd <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100dbd:	55                   	push   %ebp
+c0100dbe:	89 e5                	mov    %esp,%ebp
+c0100dc0:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100dc3:	e8 c3 fb ff ff       	call   c010098b <print_kerninfo>
+    return 0;
+c0100dc8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dcd:	c9                   	leave  
+c0100dce:	c3                   	ret    
+
+c0100dcf <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100dcf:	55                   	push   %ebp
+c0100dd0:	89 e5                	mov    %esp,%ebp
+c0100dd2:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100dd5:	e8 fb fc ff ff       	call   c0100ad5 <print_stackframe>
+    return 0;
+c0100dda:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100ddf:	c9                   	leave  
+c0100de0:	c3                   	ret    
+
+c0100de1 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c0100de1:	55                   	push   %ebp
+c0100de2:	89 e5                	mov    %esp,%ebp
+c0100de4:	83 ec 28             	sub    $0x28,%esp
+    if (is_panic) {
+c0100de7:	a1 20 e4 19 c0       	mov    0xc019e420,%eax
+c0100dec:	85 c0                	test   %eax,%eax
+c0100dee:	74 02                	je     c0100df2 <__panic+0x11>
+        goto panic_dead;
+c0100df0:	eb 59                	jmp    c0100e4b <__panic+0x6a>
+    }
+    is_panic = 1;
+c0100df2:	c7 05 20 e4 19 c0 01 	movl   $0x1,0xc019e420
+c0100df9:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c0100dfc:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100dff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100e02:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100e05:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100e09:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e0c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e10:	c7 04 24 66 c1 10 c0 	movl   $0xc010c166,(%esp)
+c0100e17:	e8 43 f5 ff ff       	call   c010035f <cprintf>
+    vcprintf(fmt, ap);
+c0100e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e1f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e23:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e26:	89 04 24             	mov    %eax,(%esp)
+c0100e29:	e8 fe f4 ff ff       	call   c010032c <vcprintf>
+    cprintf("\n");
+c0100e2e:	c7 04 24 82 c1 10 c0 	movl   $0xc010c182,(%esp)
+c0100e35:	e8 25 f5 ff ff       	call   c010035f <cprintf>
+    
+    cprintf("stack trackback:\n");
+c0100e3a:	c7 04 24 84 c1 10 c0 	movl   $0xc010c184,(%esp)
+c0100e41:	e8 19 f5 ff ff       	call   c010035f <cprintf>
+    print_stackframe();
+c0100e46:	e8 8a fc ff ff       	call   c0100ad5 <print_stackframe>
+    
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c0100e4b:	e8 fa 11 00 00       	call   c010204a <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100e50:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100e57:	e8 a4 fe ff ff       	call   c0100d00 <kmonitor>
+    }
+c0100e5c:	eb f2                	jmp    c0100e50 <__panic+0x6f>
+
+c0100e5e <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100e5e:	55                   	push   %ebp
+c0100e5f:	89 e5                	mov    %esp,%ebp
+c0100e61:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100e64:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c0100e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100e6d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100e71:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e74:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e78:	c7 04 24 96 c1 10 c0 	movl   $0xc010c196,(%esp)
+c0100e7f:	e8 db f4 ff ff       	call   c010035f <cprintf>
+    vcprintf(fmt, ap);
+c0100e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e87:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e8b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e8e:	89 04 24             	mov    %eax,(%esp)
+c0100e91:	e8 96 f4 ff ff       	call   c010032c <vcprintf>
+    cprintf("\n");
+c0100e96:	c7 04 24 82 c1 10 c0 	movl   $0xc010c182,(%esp)
+c0100e9d:	e8 bd f4 ff ff       	call   c010035f <cprintf>
+    va_end(ap);
+}
+c0100ea2:	c9                   	leave  
+c0100ea3:	c3                   	ret    
+
+c0100ea4 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c0100ea4:	55                   	push   %ebp
+c0100ea5:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c0100ea7:	a1 20 e4 19 c0       	mov    0xc019e420,%eax
+}
+c0100eac:	5d                   	pop    %ebp
+c0100ead:	c3                   	ret    
+
+c0100eae <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c0100eae:	55                   	push   %ebp
+c0100eaf:	89 e5                	mov    %esp,%ebp
+c0100eb1:	83 ec 28             	sub    $0x28,%esp
+c0100eb4:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c0100eba:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100ebe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0100ec2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0100ec6:	ee                   	out    %al,(%dx)
+c0100ec7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c0100ecd:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
+c0100ed1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100ed5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0100ed9:	ee                   	out    %al,(%dx)
+c0100eda:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
+c0100ee0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
+c0100ee4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0100ee8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0100eec:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c0100eed:	c7 05 74 10 1a c0 00 	movl   $0x0,0xc01a1074
+c0100ef4:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c0100ef7:	c7 04 24 b4 c1 10 c0 	movl   $0xc010c1b4,(%esp)
+c0100efe:	e8 5c f4 ff ff       	call   c010035f <cprintf>
+    pic_enable(IRQ_TIMER);
+c0100f03:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100f0a:	e8 99 11 00 00       	call   c01020a8 <pic_enable>
+}
+c0100f0f:	c9                   	leave  
+c0100f10:	c3                   	ret    
+
+c0100f11 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0100f11:	55                   	push   %ebp
+c0100f12:	89 e5                	mov    %esp,%ebp
+c0100f14:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0100f17:	9c                   	pushf  
+c0100f18:	58                   	pop    %eax
+c0100f19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0100f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0100f1f:	25 00 02 00 00       	and    $0x200,%eax
+c0100f24:	85 c0                	test   %eax,%eax
+c0100f26:	74 0c                	je     c0100f34 <__intr_save+0x23>
+        intr_disable();
+c0100f28:	e8 1d 11 00 00       	call   c010204a <intr_disable>
+        return 1;
+c0100f2d:	b8 01 00 00 00       	mov    $0x1,%eax
+c0100f32:	eb 05                	jmp    c0100f39 <__intr_save+0x28>
+    }
+    return 0;
+c0100f34:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100f39:	c9                   	leave  
+c0100f3a:	c3                   	ret    
+
+c0100f3b <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0100f3b:	55                   	push   %ebp
+c0100f3c:	89 e5                	mov    %esp,%ebp
+c0100f3e:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0100f41:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100f45:	74 05                	je     c0100f4c <__intr_restore+0x11>
+        intr_enable();
+c0100f47:	e8 f8 10 00 00       	call   c0102044 <intr_enable>
+    }
+}
+c0100f4c:	c9                   	leave  
+c0100f4d:	c3                   	ret    
+
+c0100f4e <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0100f4e:	55                   	push   %ebp
+c0100f4f:	89 e5                	mov    %esp,%ebp
+c0100f51:	83 ec 10             	sub    $0x10,%esp
+c0100f54:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100f5a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0100f5e:	89 c2                	mov    %eax,%edx
+c0100f60:	ec                   	in     (%dx),%al
+c0100f61:	88 45 fd             	mov    %al,-0x3(%ebp)
+c0100f64:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0100f6a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100f6e:	89 c2                	mov    %eax,%edx
+c0100f70:	ec                   	in     (%dx),%al
+c0100f71:	88 45 f9             	mov    %al,-0x7(%ebp)
+c0100f74:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
+c0100f7a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f7e:	89 c2                	mov    %eax,%edx
+c0100f80:	ec                   	in     (%dx),%al
+c0100f81:	88 45 f5             	mov    %al,-0xb(%ebp)
+c0100f84:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
+c0100f8a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0100f8e:	89 c2                	mov    %eax,%edx
+c0100f90:	ec                   	in     (%dx),%al
+c0100f91:	88 45 f1             	mov    %al,-0xf(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c0100f94:	c9                   	leave  
+c0100f95:	c3                   	ret    
+
+c0100f96 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c0100f96:	55                   	push   %ebp
+c0100f97:	89 e5                	mov    %esp,%ebp
+c0100f99:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0100f9c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c0100fa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fa6:	0f b7 00             	movzwl (%eax),%eax
+c0100fa9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c0100fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fb0:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c0100fb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fb8:	0f b7 00             	movzwl (%eax),%eax
+c0100fbb:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c0100fbf:	74 12                	je     c0100fd3 <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c0100fc1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c0100fc8:	66 c7 05 46 e4 19 c0 	movw   $0x3b4,0xc019e446
+c0100fcf:	b4 03 
+c0100fd1:	eb 13                	jmp    c0100fe6 <cga_init+0x50>
+    } else {
+        *cp = was;
+c0100fd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fd6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0100fda:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c0100fdd:	66 c7 05 46 e4 19 c0 	movw   $0x3d4,0xc019e446
+c0100fe4:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c0100fe6:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c0100fed:	0f b7 c0             	movzwl %ax,%eax
+c0100ff0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0100ff4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100ff8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100ffc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101000:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c0101001:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c0101008:	83 c0 01             	add    $0x1,%eax
+c010100b:	0f b7 c0             	movzwl %ax,%eax
+c010100e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101012:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0101016:	89 c2                	mov    %eax,%edx
+c0101018:	ec                   	in     (%dx),%al
+c0101019:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c010101c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101020:	0f b6 c0             	movzbl %al,%eax
+c0101023:	c1 e0 08             	shl    $0x8,%eax
+c0101026:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0101029:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c0101030:	0f b7 c0             	movzwl %ax,%eax
+c0101033:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101037:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010103b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c010103f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101043:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101044:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c010104b:	83 c0 01             	add    $0x1,%eax
+c010104e:	0f b7 c0             	movzwl %ax,%eax
+c0101051:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101055:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c0101059:	89 c2                	mov    %eax,%edx
+c010105b:	ec                   	in     (%dx),%al
+c010105c:	88 45 e5             	mov    %al,-0x1b(%ebp)
+    return data;
+c010105f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101063:	0f b6 c0             	movzbl %al,%eax
+c0101066:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101069:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010106c:	a3 40 e4 19 c0       	mov    %eax,0xc019e440
+    crt_pos = pos;
+c0101071:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101074:	66 a3 44 e4 19 c0    	mov    %ax,0xc019e444
+}
+c010107a:	c9                   	leave  
+c010107b:	c3                   	ret    
+
+c010107c <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c010107c:	55                   	push   %ebp
+c010107d:	89 e5                	mov    %esp,%ebp
+c010107f:	83 ec 48             	sub    $0x48,%esp
+c0101082:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101088:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010108c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0101090:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101094:	ee                   	out    %al,(%dx)
+c0101095:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
+c010109b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
+c010109f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01010a3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01010a7:	ee                   	out    %al,(%dx)
+c01010a8:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
+c01010ae:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
+c01010b2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c01010b6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01010ba:	ee                   	out    %al,(%dx)
+c01010bb:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c01010c1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
+c01010c5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c01010c9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c01010cd:	ee                   	out    %al,(%dx)
+c01010ce:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
+c01010d4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
+c01010d8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01010dc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01010e0:	ee                   	out    %al,(%dx)
+c01010e1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
+c01010e7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+c01010eb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c01010ef:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01010f3:	ee                   	out    %al,(%dx)
+c01010f4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
+c01010fa:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
+c01010fe:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101102:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101106:	ee                   	out    %al,(%dx)
+c0101107:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010110d:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
+c0101111:	89 c2                	mov    %eax,%edx
+c0101113:	ec                   	in     (%dx),%al
+c0101114:	88 45 d9             	mov    %al,-0x27(%ebp)
+    return data;
+c0101117:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c010111b:	3c ff                	cmp    $0xff,%al
+c010111d:	0f 95 c0             	setne  %al
+c0101120:	0f b6 c0             	movzbl %al,%eax
+c0101123:	a3 48 e4 19 c0       	mov    %eax,0xc019e448
+c0101128:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010112e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
+c0101132:	89 c2                	mov    %eax,%edx
+c0101134:	ec                   	in     (%dx),%al
+c0101135:	88 45 d5             	mov    %al,-0x2b(%ebp)
+c0101138:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
+c010113e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
+c0101142:	89 c2                	mov    %eax,%edx
+c0101144:	ec                   	in     (%dx),%al
+c0101145:	88 45 d1             	mov    %al,-0x2f(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101148:	a1 48 e4 19 c0       	mov    0xc019e448,%eax
+c010114d:	85 c0                	test   %eax,%eax
+c010114f:	74 0c                	je     c010115d <serial_init+0xe1>
+        pic_enable(IRQ_COM1);
+c0101151:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0101158:	e8 4b 0f 00 00       	call   c01020a8 <pic_enable>
+    }
+}
+c010115d:	c9                   	leave  
+c010115e:	c3                   	ret    
+
+c010115f <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010115f:	55                   	push   %ebp
+c0101160:	89 e5                	mov    %esp,%ebp
+c0101162:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101165:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010116c:	eb 09                	jmp    c0101177 <lpt_putc_sub+0x18>
+        delay();
+c010116e:	e8 db fd ff ff       	call   c0100f4e <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101173:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101177:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
+c010117d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101181:	89 c2                	mov    %eax,%edx
+c0101183:	ec                   	in     (%dx),%al
+c0101184:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101187:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c010118b:	84 c0                	test   %al,%al
+c010118d:	78 09                	js     c0101198 <lpt_putc_sub+0x39>
+c010118f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101196:	7e d6                	jle    c010116e <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101198:	8b 45 08             	mov    0x8(%ebp),%eax
+c010119b:	0f b6 c0             	movzbl %al,%eax
+c010119e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
+c01011a4:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01011a7:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c01011ab:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01011af:	ee                   	out    %al,(%dx)
+c01011b0:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
+c01011b6:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c01011ba:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01011be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01011c2:	ee                   	out    %al,(%dx)
+c01011c3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
+c01011c9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
+c01011cd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c01011d1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01011d5:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01011d6:	c9                   	leave  
+c01011d7:	c3                   	ret    
+
+c01011d8 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01011d8:	55                   	push   %ebp
+c01011d9:	89 e5                	mov    %esp,%ebp
+c01011db:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c01011de:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01011e2:	74 0d                	je     c01011f1 <lpt_putc+0x19>
+        lpt_putc_sub(c);
+c01011e4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011e7:	89 04 24             	mov    %eax,(%esp)
+c01011ea:	e8 70 ff ff ff       	call   c010115f <lpt_putc_sub>
+c01011ef:	eb 24                	jmp    c0101215 <lpt_putc+0x3d>
+    }
+    else {
+        lpt_putc_sub('\b');
+c01011f1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c01011f8:	e8 62 ff ff ff       	call   c010115f <lpt_putc_sub>
+        lpt_putc_sub(' ');
+c01011fd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0101204:	e8 56 ff ff ff       	call   c010115f <lpt_putc_sub>
+        lpt_putc_sub('\b');
+c0101209:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101210:	e8 4a ff ff ff       	call   c010115f <lpt_putc_sub>
+    }
+}
+c0101215:	c9                   	leave  
+c0101216:	c3                   	ret    
+
+c0101217 <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c0101217:	55                   	push   %ebp
+c0101218:	89 e5                	mov    %esp,%ebp
+c010121a:	53                   	push   %ebx
+c010121b:	83 ec 34             	sub    $0x34,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c010121e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101221:	b0 00                	mov    $0x0,%al
+c0101223:	85 c0                	test   %eax,%eax
+c0101225:	75 07                	jne    c010122e <cga_putc+0x17>
+        c |= 0x0700;
+c0101227:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c010122e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101231:	0f b6 c0             	movzbl %al,%eax
+c0101234:	83 f8 0a             	cmp    $0xa,%eax
+c0101237:	74 4c                	je     c0101285 <cga_putc+0x6e>
+c0101239:	83 f8 0d             	cmp    $0xd,%eax
+c010123c:	74 57                	je     c0101295 <cga_putc+0x7e>
+c010123e:	83 f8 08             	cmp    $0x8,%eax
+c0101241:	0f 85 88 00 00 00    	jne    c01012cf <cga_putc+0xb8>
+    case '\b':
+        if (crt_pos > 0) {
+c0101247:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c010124e:	66 85 c0             	test   %ax,%ax
+c0101251:	74 30                	je     c0101283 <cga_putc+0x6c>
+            crt_pos --;
+c0101253:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c010125a:	83 e8 01             	sub    $0x1,%eax
+c010125d:	66 a3 44 e4 19 c0    	mov    %ax,0xc019e444
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101263:	a1 40 e4 19 c0       	mov    0xc019e440,%eax
+c0101268:	0f b7 15 44 e4 19 c0 	movzwl 0xc019e444,%edx
+c010126f:	0f b7 d2             	movzwl %dx,%edx
+c0101272:	01 d2                	add    %edx,%edx
+c0101274:	01 c2                	add    %eax,%edx
+c0101276:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101279:	b0 00                	mov    $0x0,%al
+c010127b:	83 c8 20             	or     $0x20,%eax
+c010127e:	66 89 02             	mov    %ax,(%edx)
+        }
+        break;
+c0101281:	eb 72                	jmp    c01012f5 <cga_putc+0xde>
+c0101283:	eb 70                	jmp    c01012f5 <cga_putc+0xde>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101285:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c010128c:	83 c0 50             	add    $0x50,%eax
+c010128f:	66 a3 44 e4 19 c0    	mov    %ax,0xc019e444
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101295:	0f b7 1d 44 e4 19 c0 	movzwl 0xc019e444,%ebx
+c010129c:	0f b7 0d 44 e4 19 c0 	movzwl 0xc019e444,%ecx
+c01012a3:	0f b7 c1             	movzwl %cx,%eax
+c01012a6:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c01012ac:	c1 e8 10             	shr    $0x10,%eax
+c01012af:	89 c2                	mov    %eax,%edx
+c01012b1:	66 c1 ea 06          	shr    $0x6,%dx
+c01012b5:	89 d0                	mov    %edx,%eax
+c01012b7:	c1 e0 02             	shl    $0x2,%eax
+c01012ba:	01 d0                	add    %edx,%eax
+c01012bc:	c1 e0 04             	shl    $0x4,%eax
+c01012bf:	29 c1                	sub    %eax,%ecx
+c01012c1:	89 ca                	mov    %ecx,%edx
+c01012c3:	89 d8                	mov    %ebx,%eax
+c01012c5:	29 d0                	sub    %edx,%eax
+c01012c7:	66 a3 44 e4 19 c0    	mov    %ax,0xc019e444
+        break;
+c01012cd:	eb 26                	jmp    c01012f5 <cga_putc+0xde>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c01012cf:	8b 0d 40 e4 19 c0    	mov    0xc019e440,%ecx
+c01012d5:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c01012dc:	8d 50 01             	lea    0x1(%eax),%edx
+c01012df:	66 89 15 44 e4 19 c0 	mov    %dx,0xc019e444
+c01012e6:	0f b7 c0             	movzwl %ax,%eax
+c01012e9:	01 c0                	add    %eax,%eax
+c01012eb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c01012ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01012f1:	66 89 02             	mov    %ax,(%edx)
+        break;
+c01012f4:	90                   	nop
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c01012f5:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c01012fc:	66 3d cf 07          	cmp    $0x7cf,%ax
+c0101300:	76 5b                	jbe    c010135d <cga_putc+0x146>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c0101302:	a1 40 e4 19 c0       	mov    0xc019e440,%eax
+c0101307:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c010130d:	a1 40 e4 19 c0       	mov    0xc019e440,%eax
+c0101312:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
+c0101319:	00 
+c010131a:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010131e:	89 04 24             	mov    %eax,(%esp)
+c0101321:	e8 23 aa 00 00       	call   c010bd49 <memmove>
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101326:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c010132d:	eb 15                	jmp    c0101344 <cga_putc+0x12d>
+            crt_buf[i] = 0x0700 | ' ';
+c010132f:	a1 40 e4 19 c0       	mov    0xc019e440,%eax
+c0101334:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101337:	01 d2                	add    %edx,%edx
+c0101339:	01 d0                	add    %edx,%eax
+c010133b:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101340:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101344:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c010134b:	7e e2                	jle    c010132f <cga_putc+0x118>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c010134d:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c0101354:	83 e8 50             	sub    $0x50,%eax
+c0101357:	66 a3 44 e4 19 c0    	mov    %ax,0xc019e444
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c010135d:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c0101364:	0f b7 c0             	movzwl %ax,%eax
+c0101367:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c010136b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+c010136f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101373:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101377:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101378:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c010137f:	66 c1 e8 08          	shr    $0x8,%ax
+c0101383:	0f b6 c0             	movzbl %al,%eax
+c0101386:	0f b7 15 46 e4 19 c0 	movzwl 0xc019e446,%edx
+c010138d:	83 c2 01             	add    $0x1,%edx
+c0101390:	0f b7 d2             	movzwl %dx,%edx
+c0101393:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
+c0101397:	88 45 ed             	mov    %al,-0x13(%ebp)
+c010139a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010139e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01013a2:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c01013a3:	0f b7 05 46 e4 19 c0 	movzwl 0xc019e446,%eax
+c01013aa:	0f b7 c0             	movzwl %ax,%eax
+c01013ad:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c01013b1:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+c01013b5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c01013b9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c01013bd:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c01013be:	0f b7 05 44 e4 19 c0 	movzwl 0xc019e444,%eax
+c01013c5:	0f b6 c0             	movzbl %al,%eax
+c01013c8:	0f b7 15 46 e4 19 c0 	movzwl 0xc019e446,%edx
+c01013cf:	83 c2 01             	add    $0x1,%edx
+c01013d2:	0f b7 d2             	movzwl %dx,%edx
+c01013d5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c01013d9:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c01013dc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01013e0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01013e4:	ee                   	out    %al,(%dx)
+}
+c01013e5:	83 c4 34             	add    $0x34,%esp
+c01013e8:	5b                   	pop    %ebx
+c01013e9:	5d                   	pop    %ebp
+c01013ea:	c3                   	ret    
+
+c01013eb <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c01013eb:	55                   	push   %ebp
+c01013ec:	89 e5                	mov    %esp,%ebp
+c01013ee:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01013f8:	eb 09                	jmp    c0101403 <serial_putc_sub+0x18>
+        delay();
+c01013fa:	e8 4f fb ff ff       	call   c0100f4e <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013ff:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101403:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101409:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c010140d:	89 c2                	mov    %eax,%edx
+c010140f:	ec                   	in     (%dx),%al
+c0101410:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101413:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0101417:	0f b6 c0             	movzbl %al,%eax
+c010141a:	83 e0 20             	and    $0x20,%eax
+c010141d:	85 c0                	test   %eax,%eax
+c010141f:	75 09                	jne    c010142a <serial_putc_sub+0x3f>
+c0101421:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101428:	7e d0                	jle    c01013fa <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c010142a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010142d:	0f b6 c0             	movzbl %al,%eax
+c0101430:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+c0101436:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101439:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010143d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101441:	ee                   	out    %al,(%dx)
+}
+c0101442:	c9                   	leave  
+c0101443:	c3                   	ret    
+
+c0101444 <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101444:	55                   	push   %ebp
+c0101445:	89 e5                	mov    %esp,%ebp
+c0101447:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c010144a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c010144e:	74 0d                	je     c010145d <serial_putc+0x19>
+        serial_putc_sub(c);
+c0101450:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101453:	89 04 24             	mov    %eax,(%esp)
+c0101456:	e8 90 ff ff ff       	call   c01013eb <serial_putc_sub>
+c010145b:	eb 24                	jmp    c0101481 <serial_putc+0x3d>
+    }
+    else {
+        serial_putc_sub('\b');
+c010145d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101464:	e8 82 ff ff ff       	call   c01013eb <serial_putc_sub>
+        serial_putc_sub(' ');
+c0101469:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0101470:	e8 76 ff ff ff       	call   c01013eb <serial_putc_sub>
+        serial_putc_sub('\b');
+c0101475:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c010147c:	e8 6a ff ff ff       	call   c01013eb <serial_putc_sub>
+    }
+}
+c0101481:	c9                   	leave  
+c0101482:	c3                   	ret    
+
+c0101483 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101483:	55                   	push   %ebp
+c0101484:	89 e5                	mov    %esp,%ebp
+c0101486:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101489:	eb 33                	jmp    c01014be <cons_intr+0x3b>
+        if (c != 0) {
+c010148b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010148f:	74 2d                	je     c01014be <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101491:	a1 64 e6 19 c0       	mov    0xc019e664,%eax
+c0101496:	8d 50 01             	lea    0x1(%eax),%edx
+c0101499:	89 15 64 e6 19 c0    	mov    %edx,0xc019e664
+c010149f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01014a2:	88 90 60 e4 19 c0    	mov    %dl,-0x3fe61ba0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c01014a8:	a1 64 e6 19 c0       	mov    0xc019e664,%eax
+c01014ad:	3d 00 02 00 00       	cmp    $0x200,%eax
+c01014b2:	75 0a                	jne    c01014be <cons_intr+0x3b>
+                cons.wpos = 0;
+c01014b4:	c7 05 64 e6 19 c0 00 	movl   $0x0,0xc019e664
+c01014bb:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c01014be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01014c1:	ff d0                	call   *%eax
+c01014c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01014c6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c01014ca:	75 bf                	jne    c010148b <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c01014cc:	c9                   	leave  
+c01014cd:	c3                   	ret    
+
+c01014ce <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c01014ce:	55                   	push   %ebp
+c01014cf:	89 e5                	mov    %esp,%ebp
+c01014d1:	83 ec 10             	sub    $0x10,%esp
+c01014d4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014da:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01014de:	89 c2                	mov    %eax,%edx
+c01014e0:	ec                   	in     (%dx),%al
+c01014e1:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01014e4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c01014e8:	0f b6 c0             	movzbl %al,%eax
+c01014eb:	83 e0 01             	and    $0x1,%eax
+c01014ee:	85 c0                	test   %eax,%eax
+c01014f0:	75 07                	jne    c01014f9 <serial_proc_data+0x2b>
+        return -1;
+c01014f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01014f7:	eb 2a                	jmp    c0101523 <serial_proc_data+0x55>
+c01014f9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014ff:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101503:	89 c2                	mov    %eax,%edx
+c0101505:	ec                   	in     (%dx),%al
+c0101506:	88 45 f5             	mov    %al,-0xb(%ebp)
+    return data;
+c0101509:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c010150d:	0f b6 c0             	movzbl %al,%eax
+c0101510:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c0101513:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c0101517:	75 07                	jne    c0101520 <serial_proc_data+0x52>
+        c = '\b';
+c0101519:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c0101520:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0101523:	c9                   	leave  
+c0101524:	c3                   	ret    
+
+c0101525 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c0101525:	55                   	push   %ebp
+c0101526:	89 e5                	mov    %esp,%ebp
+c0101528:	83 ec 18             	sub    $0x18,%esp
+    if (serial_exists) {
+c010152b:	a1 48 e4 19 c0       	mov    0xc019e448,%eax
+c0101530:	85 c0                	test   %eax,%eax
+c0101532:	74 0c                	je     c0101540 <serial_intr+0x1b>
+        cons_intr(serial_proc_data);
+c0101534:	c7 04 24 ce 14 10 c0 	movl   $0xc01014ce,(%esp)
+c010153b:	e8 43 ff ff ff       	call   c0101483 <cons_intr>
+    }
+}
+c0101540:	c9                   	leave  
+c0101541:	c3                   	ret    
+
+c0101542 <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101542:	55                   	push   %ebp
+c0101543:	89 e5                	mov    %esp,%ebp
+c0101545:	83 ec 38             	sub    $0x38,%esp
+c0101548:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010154e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101552:	89 c2                	mov    %eax,%edx
+c0101554:	ec                   	in     (%dx),%al
+c0101555:	88 45 ef             	mov    %al,-0x11(%ebp)
+    return data;
+c0101558:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c010155c:	0f b6 c0             	movzbl %al,%eax
+c010155f:	83 e0 01             	and    $0x1,%eax
+c0101562:	85 c0                	test   %eax,%eax
+c0101564:	75 0a                	jne    c0101570 <kbd_proc_data+0x2e>
+        return -1;
+c0101566:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010156b:	e9 59 01 00 00       	jmp    c01016c9 <kbd_proc_data+0x187>
+c0101570:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101576:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c010157a:	89 c2                	mov    %eax,%edx
+c010157c:	ec                   	in     (%dx),%al
+c010157d:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101580:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101584:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101587:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c010158b:	75 17                	jne    c01015a4 <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c010158d:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101592:	83 c8 40             	or     $0x40,%eax
+c0101595:	a3 68 e6 19 c0       	mov    %eax,0xc019e668
+        return 0;
+c010159a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010159f:	e9 25 01 00 00       	jmp    c01016c9 <kbd_proc_data+0x187>
+    } else if (data & 0x80) {
+c01015a4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015a8:	84 c0                	test   %al,%al
+c01015aa:	79 47                	jns    c01015f3 <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c01015ac:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c01015b1:	83 e0 40             	and    $0x40,%eax
+c01015b4:	85 c0                	test   %eax,%eax
+c01015b6:	75 09                	jne    c01015c1 <kbd_proc_data+0x7f>
+c01015b8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015bc:	83 e0 7f             	and    $0x7f,%eax
+c01015bf:	eb 04                	jmp    c01015c5 <kbd_proc_data+0x83>
+c01015c1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015c5:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c01015c8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015cc:	0f b6 80 40 a0 12 c0 	movzbl -0x3fed5fc0(%eax),%eax
+c01015d3:	83 c8 40             	or     $0x40,%eax
+c01015d6:	0f b6 c0             	movzbl %al,%eax
+c01015d9:	f7 d0                	not    %eax
+c01015db:	89 c2                	mov    %eax,%edx
+c01015dd:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c01015e2:	21 d0                	and    %edx,%eax
+c01015e4:	a3 68 e6 19 c0       	mov    %eax,0xc019e668
+        return 0;
+c01015e9:	b8 00 00 00 00       	mov    $0x0,%eax
+c01015ee:	e9 d6 00 00 00       	jmp    c01016c9 <kbd_proc_data+0x187>
+    } else if (shift & E0ESC) {
+c01015f3:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c01015f8:	83 e0 40             	and    $0x40,%eax
+c01015fb:	85 c0                	test   %eax,%eax
+c01015fd:	74 11                	je     c0101610 <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c01015ff:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c0101603:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101608:	83 e0 bf             	and    $0xffffffbf,%eax
+c010160b:	a3 68 e6 19 c0       	mov    %eax,0xc019e668
+    }
+
+    shift |= shiftcode[data];
+c0101610:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101614:	0f b6 80 40 a0 12 c0 	movzbl -0x3fed5fc0(%eax),%eax
+c010161b:	0f b6 d0             	movzbl %al,%edx
+c010161e:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101623:	09 d0                	or     %edx,%eax
+c0101625:	a3 68 e6 19 c0       	mov    %eax,0xc019e668
+    shift ^= togglecode[data];
+c010162a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010162e:	0f b6 80 40 a1 12 c0 	movzbl -0x3fed5ec0(%eax),%eax
+c0101635:	0f b6 d0             	movzbl %al,%edx
+c0101638:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c010163d:	31 d0                	xor    %edx,%eax
+c010163f:	a3 68 e6 19 c0       	mov    %eax,0xc019e668
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101644:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101649:	83 e0 03             	and    $0x3,%eax
+c010164c:	8b 14 85 40 a5 12 c0 	mov    -0x3fed5ac0(,%eax,4),%edx
+c0101653:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101657:	01 d0                	add    %edx,%eax
+c0101659:	0f b6 00             	movzbl (%eax),%eax
+c010165c:	0f b6 c0             	movzbl %al,%eax
+c010165f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101662:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101667:	83 e0 08             	and    $0x8,%eax
+c010166a:	85 c0                	test   %eax,%eax
+c010166c:	74 22                	je     c0101690 <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c010166e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101672:	7e 0c                	jle    c0101680 <kbd_proc_data+0x13e>
+c0101674:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101678:	7f 06                	jg     c0101680 <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c010167a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c010167e:	eb 10                	jmp    c0101690 <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c0101680:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101684:	7e 0a                	jle    c0101690 <kbd_proc_data+0x14e>
+c0101686:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c010168a:	7f 04                	jg     c0101690 <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c010168c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c0101690:	a1 68 e6 19 c0       	mov    0xc019e668,%eax
+c0101695:	f7 d0                	not    %eax
+c0101697:	83 e0 06             	and    $0x6,%eax
+c010169a:	85 c0                	test   %eax,%eax
+c010169c:	75 28                	jne    c01016c6 <kbd_proc_data+0x184>
+c010169e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c01016a5:	75 1f                	jne    c01016c6 <kbd_proc_data+0x184>
+        cprintf("Rebooting!\n");
+c01016a7:	c7 04 24 cf c1 10 c0 	movl   $0xc010c1cf,(%esp)
+c01016ae:	e8 ac ec ff ff       	call   c010035f <cprintf>
+c01016b3:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
+c01016b9:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01016bd:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+c01016c1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c01016c5:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c01016c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01016c9:	c9                   	leave  
+c01016ca:	c3                   	ret    
+
+c01016cb <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c01016cb:	55                   	push   %ebp
+c01016cc:	89 e5                	mov    %esp,%ebp
+c01016ce:	83 ec 18             	sub    $0x18,%esp
+    cons_intr(kbd_proc_data);
+c01016d1:	c7 04 24 42 15 10 c0 	movl   $0xc0101542,(%esp)
+c01016d8:	e8 a6 fd ff ff       	call   c0101483 <cons_intr>
+}
+c01016dd:	c9                   	leave  
+c01016de:	c3                   	ret    
+
+c01016df <kbd_init>:
+
+static void
+kbd_init(void) {
+c01016df:	55                   	push   %ebp
+c01016e0:	89 e5                	mov    %esp,%ebp
+c01016e2:	83 ec 18             	sub    $0x18,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c01016e5:	e8 e1 ff ff ff       	call   c01016cb <kbd_intr>
+    pic_enable(IRQ_KBD);
+c01016ea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01016f1:	e8 b2 09 00 00       	call   c01020a8 <pic_enable>
+}
+c01016f6:	c9                   	leave  
+c01016f7:	c3                   	ret    
+
+c01016f8 <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c01016f8:	55                   	push   %ebp
+c01016f9:	89 e5                	mov    %esp,%ebp
+c01016fb:	83 ec 18             	sub    $0x18,%esp
+    cga_init();
+c01016fe:	e8 93 f8 ff ff       	call   c0100f96 <cga_init>
+    serial_init();
+c0101703:	e8 74 f9 ff ff       	call   c010107c <serial_init>
+    kbd_init();
+c0101708:	e8 d2 ff ff ff       	call   c01016df <kbd_init>
+    if (!serial_exists) {
+c010170d:	a1 48 e4 19 c0       	mov    0xc019e448,%eax
+c0101712:	85 c0                	test   %eax,%eax
+c0101714:	75 0c                	jne    c0101722 <cons_init+0x2a>
+        cprintf("serial port does not exist!!\n");
+c0101716:	c7 04 24 db c1 10 c0 	movl   $0xc010c1db,(%esp)
+c010171d:	e8 3d ec ff ff       	call   c010035f <cprintf>
+    }
+}
+c0101722:	c9                   	leave  
+c0101723:	c3                   	ret    
+
+c0101724 <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c0101724:	55                   	push   %ebp
+c0101725:	89 e5                	mov    %esp,%ebp
+c0101727:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010172a:	e8 e2 f7 ff ff       	call   c0100f11 <__intr_save>
+c010172f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101732:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101735:	89 04 24             	mov    %eax,(%esp)
+c0101738:	e8 9b fa ff ff       	call   c01011d8 <lpt_putc>
+        cga_putc(c);
+c010173d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101740:	89 04 24             	mov    %eax,(%esp)
+c0101743:	e8 cf fa ff ff       	call   c0101217 <cga_putc>
+        serial_putc(c);
+c0101748:	8b 45 08             	mov    0x8(%ebp),%eax
+c010174b:	89 04 24             	mov    %eax,(%esp)
+c010174e:	e8 f1 fc ff ff       	call   c0101444 <serial_putc>
+    }
+    local_intr_restore(intr_flag);
+c0101753:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101756:	89 04 24             	mov    %eax,(%esp)
+c0101759:	e8 dd f7 ff ff       	call   c0100f3b <__intr_restore>
+}
+c010175e:	c9                   	leave  
+c010175f:	c3                   	ret    
+
+c0101760 <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c0101760:	55                   	push   %ebp
+c0101761:	89 e5                	mov    %esp,%ebp
+c0101763:	83 ec 28             	sub    $0x28,%esp
+    int c = 0;
+c0101766:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010176d:	e8 9f f7 ff ff       	call   c0100f11 <__intr_save>
+c0101772:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101775:	e8 ab fd ff ff       	call   c0101525 <serial_intr>
+        kbd_intr();
+c010177a:	e8 4c ff ff ff       	call   c01016cb <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c010177f:	8b 15 60 e6 19 c0    	mov    0xc019e660,%edx
+c0101785:	a1 64 e6 19 c0       	mov    0xc019e664,%eax
+c010178a:	39 c2                	cmp    %eax,%edx
+c010178c:	74 31                	je     c01017bf <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c010178e:	a1 60 e6 19 c0       	mov    0xc019e660,%eax
+c0101793:	8d 50 01             	lea    0x1(%eax),%edx
+c0101796:	89 15 60 e6 19 c0    	mov    %edx,0xc019e660
+c010179c:	0f b6 80 60 e4 19 c0 	movzbl -0x3fe61ba0(%eax),%eax
+c01017a3:	0f b6 c0             	movzbl %al,%eax
+c01017a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c01017a9:	a1 60 e6 19 c0       	mov    0xc019e660,%eax
+c01017ae:	3d 00 02 00 00       	cmp    $0x200,%eax
+c01017b3:	75 0a                	jne    c01017bf <cons_getc+0x5f>
+                cons.rpos = 0;
+c01017b5:	c7 05 60 e6 19 c0 00 	movl   $0x0,0xc019e660
+c01017bc:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c01017bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01017c2:	89 04 24             	mov    %eax,(%esp)
+c01017c5:	e8 71 f7 ff ff       	call   c0100f3b <__intr_restore>
+    return c;
+c01017ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01017cd:	c9                   	leave  
+c01017ce:	c3                   	ret    
+
+c01017cf <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c01017cf:	55                   	push   %ebp
+c01017d0:	89 e5                	mov    %esp,%ebp
+c01017d2:	83 ec 14             	sub    $0x14,%esp
+c01017d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01017d8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c01017dc:	90                   	nop
+c01017dd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c01017e1:	83 c0 07             	add    $0x7,%eax
+c01017e4:	0f b7 c0             	movzwl %ax,%eax
+c01017e7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01017eb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01017ef:	89 c2                	mov    %eax,%edx
+c01017f1:	ec                   	in     (%dx),%al
+c01017f2:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01017f5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01017f9:	0f b6 c0             	movzbl %al,%eax
+c01017fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01017ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101802:	25 80 00 00 00       	and    $0x80,%eax
+c0101807:	85 c0                	test   %eax,%eax
+c0101809:	75 d2                	jne    c01017dd <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c010180b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010180f:	74 11                	je     c0101822 <ide_wait_ready+0x53>
+c0101811:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101814:	83 e0 21             	and    $0x21,%eax
+c0101817:	85 c0                	test   %eax,%eax
+c0101819:	74 07                	je     c0101822 <ide_wait_ready+0x53>
+        return -1;
+c010181b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101820:	eb 05                	jmp    c0101827 <ide_wait_ready+0x58>
+    }
+    return 0;
+c0101822:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101827:	c9                   	leave  
+c0101828:	c3                   	ret    
+
+c0101829 <ide_init>:
+
+void
+ide_init(void) {
+c0101829:	55                   	push   %ebp
+c010182a:	89 e5                	mov    %esp,%ebp
+c010182c:	57                   	push   %edi
+c010182d:	53                   	push   %ebx
+c010182e:	81 ec 50 02 00 00    	sub    $0x250,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101834:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c010183a:	e9 d6 02 00 00       	jmp    c0101b15 <ide_init+0x2ec>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c010183f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101843:	c1 e0 03             	shl    $0x3,%eax
+c0101846:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010184d:	29 c2                	sub    %eax,%edx
+c010184f:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101855:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0101858:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010185c:	66 d1 e8             	shr    %ax
+c010185f:	0f b7 c0             	movzwl %ax,%eax
+c0101862:	0f b7 04 85 fc c1 10 	movzwl -0x3fef3e04(,%eax,4),%eax
+c0101869:	c0 
+c010186a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c010186e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101872:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101879:	00 
+c010187a:	89 04 24             	mov    %eax,(%esp)
+c010187d:	e8 4d ff ff ff       	call   c01017cf <ide_wait_ready>
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0101882:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101886:	83 e0 01             	and    $0x1,%eax
+c0101889:	c1 e0 04             	shl    $0x4,%eax
+c010188c:	83 c8 e0             	or     $0xffffffe0,%eax
+c010188f:	0f b6 c0             	movzbl %al,%eax
+c0101892:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101896:	83 c2 06             	add    $0x6,%edx
+c0101899:	0f b7 d2             	movzwl %dx,%edx
+c010189c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
+c01018a0:	88 45 d1             	mov    %al,-0x2f(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01018a3:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c01018a7:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c01018ab:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c01018ac:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01018b7:	00 
+c01018b8:	89 04 24             	mov    %eax,(%esp)
+c01018bb:	e8 0f ff ff ff       	call   c01017cf <ide_wait_ready>
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c01018c0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018c4:	83 c0 07             	add    $0x7,%eax
+c01018c7:	0f b7 c0             	movzwl %ax,%eax
+c01018ca:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
+c01018ce:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
+c01018d2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01018d6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01018da:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c01018db:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01018e6:	00 
+c01018e7:	89 04 24             	mov    %eax,(%esp)
+c01018ea:	e8 e0 fe ff ff       	call   c01017cf <ide_wait_ready>
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c01018ef:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018f3:	83 c0 07             	add    $0x7,%eax
+c01018f6:	0f b7 c0             	movzwl %ax,%eax
+c01018f9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01018fd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c0101901:	89 c2                	mov    %eax,%edx
+c0101903:	ec                   	in     (%dx),%al
+c0101904:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c0101907:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c010190b:	84 c0                	test   %al,%al
+c010190d:	0f 84 f7 01 00 00    	je     c0101b0a <ide_init+0x2e1>
+c0101913:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101917:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010191e:	00 
+c010191f:	89 04 24             	mov    %eax,(%esp)
+c0101922:	e8 a8 fe ff ff       	call   c01017cf <ide_wait_ready>
+c0101927:	85 c0                	test   %eax,%eax
+c0101929:	0f 85 db 01 00 00    	jne    c0101b0a <ide_init+0x2e1>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c010192f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101933:	c1 e0 03             	shl    $0x3,%eax
+c0101936:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010193d:	29 c2                	sub    %eax,%edx
+c010193f:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101945:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0101948:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010194c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010194f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101955:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0101958:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c010195f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0101962:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0101965:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0101968:	89 cb                	mov    %ecx,%ebx
+c010196a:	89 df                	mov    %ebx,%edi
+c010196c:	89 c1                	mov    %eax,%ecx
+c010196e:	fc                   	cld    
+c010196f:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101971:	89 c8                	mov    %ecx,%eax
+c0101973:	89 fb                	mov    %edi,%ebx
+c0101975:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0101978:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c010197b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101981:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0101984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101987:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c010198d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c0101990:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0101993:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101998:	85 c0                	test   %eax,%eax
+c010199a:	74 0e                	je     c01019aa <ide_init+0x181>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010199c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010199f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c01019a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01019a8:	eb 09                	jmp    c01019b3 <ide_init+0x18a>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c01019aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01019ad:	8b 40 78             	mov    0x78(%eax),%eax
+c01019b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c01019b3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019b7:	c1 e0 03             	shl    $0x3,%eax
+c01019ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01019c1:	29 c2                	sub    %eax,%edx
+c01019c3:	81 c2 80 e6 19 c0    	add    $0xc019e680,%edx
+c01019c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01019cc:	89 42 04             	mov    %eax,0x4(%edx)
+        ide_devices[ideno].size = sectors;
+c01019cf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019d3:	c1 e0 03             	shl    $0x3,%eax
+c01019d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01019dd:	29 c2                	sub    %eax,%edx
+c01019df:	81 c2 80 e6 19 c0    	add    $0xc019e680,%edx
+c01019e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01019e8:	89 42 08             	mov    %eax,0x8(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c01019eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01019ee:	83 c0 62             	add    $0x62,%eax
+c01019f1:	0f b7 00             	movzwl (%eax),%eax
+c01019f4:	0f b7 c0             	movzwl %ax,%eax
+c01019f7:	25 00 02 00 00       	and    $0x200,%eax
+c01019fc:	85 c0                	test   %eax,%eax
+c01019fe:	75 24                	jne    c0101a24 <ide_init+0x1fb>
+c0101a00:	c7 44 24 0c 04 c2 10 	movl   $0xc010c204,0xc(%esp)
+c0101a07:	c0 
+c0101a08:	c7 44 24 08 47 c2 10 	movl   $0xc010c247,0x8(%esp)
+c0101a0f:	c0 
+c0101a10:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c0101a17:	00 
+c0101a18:	c7 04 24 5c c2 10 c0 	movl   $0xc010c25c,(%esp)
+c0101a1f:	e8 bd f3 ff ff       	call   c0100de1 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c0101a24:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101a28:	c1 e0 03             	shl    $0x3,%eax
+c0101a2b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101a32:	29 c2                	sub    %eax,%edx
+c0101a34:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101a3a:	83 c0 0c             	add    $0xc,%eax
+c0101a3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0101a40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101a43:	83 c0 36             	add    $0x36,%eax
+c0101a46:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        unsigned int i, length = 40;
+c0101a49:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
+        for (i = 0; i < length; i += 2) {
+c0101a50:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0101a57:	eb 34                	jmp    c0101a8d <ide_init+0x264>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c0101a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a5c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a5f:	01 c2                	add    %eax,%edx
+c0101a61:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a64:	8d 48 01             	lea    0x1(%eax),%ecx
+c0101a67:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101a6a:	01 c8                	add    %ecx,%eax
+c0101a6c:	0f b6 00             	movzbl (%eax),%eax
+c0101a6f:	88 02                	mov    %al,(%edx)
+c0101a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a74:	8d 50 01             	lea    0x1(%eax),%edx
+c0101a77:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0101a7a:	01 c2                	add    %eax,%edx
+c0101a7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a7f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+c0101a82:	01 c8                	add    %ecx,%eax
+c0101a84:	0f b6 00             	movzbl (%eax),%eax
+c0101a87:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c0101a89:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c0101a8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a90:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0101a93:	72 c4                	jb     c0101a59 <ide_init+0x230>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c0101a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a9b:	01 d0                	add    %edx,%eax
+c0101a9d:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c0101aa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101aa3:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101aa6:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0101aa9:	85 c0                	test   %eax,%eax
+c0101aab:	74 0f                	je     c0101abc <ide_init+0x293>
+c0101aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101ab0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101ab3:	01 d0                	add    %edx,%eax
+c0101ab5:	0f b6 00             	movzbl (%eax),%eax
+c0101ab8:	3c 20                	cmp    $0x20,%al
+c0101aba:	74 d9                	je     c0101a95 <ide_init+0x26c>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c0101abc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101ac0:	c1 e0 03             	shl    $0x3,%eax
+c0101ac3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101aca:	29 c2                	sub    %eax,%edx
+c0101acc:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101ad2:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101ad5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101ad9:	c1 e0 03             	shl    $0x3,%eax
+c0101adc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101ae3:	29 c2                	sub    %eax,%edx
+c0101ae5:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101aeb:	8b 50 08             	mov    0x8(%eax),%edx
+c0101aee:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101af2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0101af6:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0101afa:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0101afe:	c7 04 24 6e c2 10 c0 	movl   $0xc010c26e,(%esp)
+c0101b05:	e8 55 e8 ff ff       	call   c010035f <cprintf>
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101b0a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101b0e:	83 c0 01             	add    $0x1,%eax
+c0101b11:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c0101b15:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c0101b1a:	0f 86 1f fd ff ff    	jbe    c010183f <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c0101b20:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
+c0101b27:	e8 7c 05 00 00       	call   c01020a8 <pic_enable>
+    pic_enable(IRQ_IDE2);
+c0101b2c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
+c0101b33:	e8 70 05 00 00       	call   c01020a8 <pic_enable>
+}
+c0101b38:	81 c4 50 02 00 00    	add    $0x250,%esp
+c0101b3e:	5b                   	pop    %ebx
+c0101b3f:	5f                   	pop    %edi
+c0101b40:	5d                   	pop    %ebp
+c0101b41:	c3                   	ret    
+
+c0101b42 <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c0101b42:	55                   	push   %ebp
+c0101b43:	89 e5                	mov    %esp,%ebp
+c0101b45:	83 ec 04             	sub    $0x4,%esp
+c0101b48:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b4b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c0101b4f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c0101b54:	77 24                	ja     c0101b7a <ide_device_valid+0x38>
+c0101b56:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b5a:	c1 e0 03             	shl    $0x3,%eax
+c0101b5d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101b64:	29 c2                	sub    %eax,%edx
+c0101b66:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101b6c:	0f b6 00             	movzbl (%eax),%eax
+c0101b6f:	84 c0                	test   %al,%al
+c0101b71:	74 07                	je     c0101b7a <ide_device_valid+0x38>
+c0101b73:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101b78:	eb 05                	jmp    c0101b7f <ide_device_valid+0x3d>
+c0101b7a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101b7f:	c9                   	leave  
+c0101b80:	c3                   	ret    
+
+c0101b81 <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c0101b81:	55                   	push   %ebp
+c0101b82:	89 e5                	mov    %esp,%ebp
+c0101b84:	83 ec 08             	sub    $0x8,%esp
+c0101b87:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b8a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c0101b8e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b92:	89 04 24             	mov    %eax,(%esp)
+c0101b95:	e8 a8 ff ff ff       	call   c0101b42 <ide_device_valid>
+c0101b9a:	85 c0                	test   %eax,%eax
+c0101b9c:	74 1b                	je     c0101bb9 <ide_device_size+0x38>
+        return ide_devices[ideno].size;
+c0101b9e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101ba2:	c1 e0 03             	shl    $0x3,%eax
+c0101ba5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101bac:	29 c2                	sub    %eax,%edx
+c0101bae:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101bb4:	8b 40 08             	mov    0x8(%eax),%eax
+c0101bb7:	eb 05                	jmp    c0101bbe <ide_device_size+0x3d>
+    }
+    return 0;
+c0101bb9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101bbe:	c9                   	leave  
+c0101bbf:	c3                   	ret    
+
+c0101bc0 <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c0101bc0:	55                   	push   %ebp
+c0101bc1:	89 e5                	mov    %esp,%ebp
+c0101bc3:	57                   	push   %edi
+c0101bc4:	53                   	push   %ebx
+c0101bc5:	83 ec 50             	sub    $0x50,%esp
+c0101bc8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101bcb:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101bcf:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101bd6:	77 24                	ja     c0101bfc <ide_read_secs+0x3c>
+c0101bd8:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101bdd:	77 1d                	ja     c0101bfc <ide_read_secs+0x3c>
+c0101bdf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101be3:	c1 e0 03             	shl    $0x3,%eax
+c0101be6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101bed:	29 c2                	sub    %eax,%edx
+c0101bef:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101bf5:	0f b6 00             	movzbl (%eax),%eax
+c0101bf8:	84 c0                	test   %al,%al
+c0101bfa:	75 24                	jne    c0101c20 <ide_read_secs+0x60>
+c0101bfc:	c7 44 24 0c 8c c2 10 	movl   $0xc010c28c,0xc(%esp)
+c0101c03:	c0 
+c0101c04:	c7 44 24 08 47 c2 10 	movl   $0xc010c247,0x8(%esp)
+c0101c0b:	c0 
+c0101c0c:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c0101c13:	00 
+c0101c14:	c7 04 24 5c c2 10 c0 	movl   $0xc010c25c,(%esp)
+c0101c1b:	e8 c1 f1 ff ff       	call   c0100de1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101c20:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101c27:	77 0f                	ja     c0101c38 <ide_read_secs+0x78>
+c0101c29:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101c2c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101c2f:	01 d0                	add    %edx,%eax
+c0101c31:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101c36:	76 24                	jbe    c0101c5c <ide_read_secs+0x9c>
+c0101c38:	c7 44 24 0c b4 c2 10 	movl   $0xc010c2b4,0xc(%esp)
+c0101c3f:	c0 
+c0101c40:	c7 44 24 08 47 c2 10 	movl   $0xc010c247,0x8(%esp)
+c0101c47:	c0 
+c0101c48:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c0101c4f:	00 
+c0101c50:	c7 04 24 5c c2 10 c0 	movl   $0xc010c25c,(%esp)
+c0101c57:	e8 85 f1 ff ff       	call   c0100de1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101c5c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c60:	66 d1 e8             	shr    %ax
+c0101c63:	0f b7 c0             	movzwl %ax,%eax
+c0101c66:	0f b7 04 85 fc c1 10 	movzwl -0x3fef3e04(,%eax,4),%eax
+c0101c6d:	c0 
+c0101c6e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101c72:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c76:	66 d1 e8             	shr    %ax
+c0101c79:	0f b7 c0             	movzwl %ax,%eax
+c0101c7c:	0f b7 04 85 fe c1 10 	movzwl -0x3fef3e02(,%eax,4),%eax
+c0101c83:	c0 
+c0101c84:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101c88:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101c8c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101c93:	00 
+c0101c94:	89 04 24             	mov    %eax,(%esp)
+c0101c97:	e8 33 fb ff ff       	call   c01017cf <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101c9c:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101ca0:	83 c0 02             	add    $0x2,%eax
+c0101ca3:	0f b7 c0             	movzwl %ax,%eax
+c0101ca6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101caa:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101cae:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101cb2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101cb6:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101cb7:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101cba:	0f b6 c0             	movzbl %al,%eax
+c0101cbd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cc1:	83 c2 02             	add    $0x2,%edx
+c0101cc4:	0f b7 d2             	movzwl %dx,%edx
+c0101cc7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101ccb:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101cce:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101cd2:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101cd6:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101cd7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cda:	0f b6 c0             	movzbl %al,%eax
+c0101cdd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ce1:	83 c2 03             	add    $0x3,%edx
+c0101ce4:	0f b7 d2             	movzwl %dx,%edx
+c0101ce7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101ceb:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101cee:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101cf2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101cf6:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101cf7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cfa:	c1 e8 08             	shr    $0x8,%eax
+c0101cfd:	0f b6 c0             	movzbl %al,%eax
+c0101d00:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101d04:	83 c2 04             	add    $0x4,%edx
+c0101d07:	0f b7 d2             	movzwl %dx,%edx
+c0101d0a:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101d0e:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101d11:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101d15:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101d19:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101d1d:	c1 e8 10             	shr    $0x10,%eax
+c0101d20:	0f b6 c0             	movzbl %al,%eax
+c0101d23:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101d27:	83 c2 05             	add    $0x5,%edx
+c0101d2a:	0f b7 d2             	movzwl %dx,%edx
+c0101d2d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101d31:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101d34:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101d38:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101d3c:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101d3d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101d41:	83 e0 01             	and    $0x1,%eax
+c0101d44:	c1 e0 04             	shl    $0x4,%eax
+c0101d47:	89 c2                	mov    %eax,%edx
+c0101d49:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101d4c:	c1 e8 18             	shr    $0x18,%eax
+c0101d4f:	83 e0 0f             	and    $0xf,%eax
+c0101d52:	09 d0                	or     %edx,%eax
+c0101d54:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101d57:	0f b6 c0             	movzbl %al,%eax
+c0101d5a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101d5e:	83 c2 06             	add    $0x6,%edx
+c0101d61:	0f b7 d2             	movzwl %dx,%edx
+c0101d64:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101d68:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101d6b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101d6f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101d73:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c0101d74:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d78:	83 c0 07             	add    $0x7,%eax
+c0101d7b:	0f b7 c0             	movzwl %ax,%eax
+c0101d7e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101d82:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
+c0101d86:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101d8a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101d8e:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101d8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101d96:	eb 5a                	jmp    c0101df2 <ide_read_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101d98:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d9c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101da3:	00 
+c0101da4:	89 04 24             	mov    %eax,(%esp)
+c0101da7:	e8 23 fa ff ff       	call   c01017cf <ide_wait_ready>
+c0101dac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101daf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101db3:	74 02                	je     c0101db7 <ide_read_secs+0x1f7>
+            goto out;
+c0101db5:	eb 41                	jmp    c0101df8 <ide_read_secs+0x238>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c0101db7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101dbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101dbe:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101dc1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101dc4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0101dcb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0101dce:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101dd1:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101dd4:	89 cb                	mov    %ecx,%ebx
+c0101dd6:	89 df                	mov    %ebx,%edi
+c0101dd8:	89 c1                	mov    %eax,%ecx
+c0101dda:	fc                   	cld    
+c0101ddb:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101ddd:	89 c8                	mov    %ecx,%eax
+c0101ddf:	89 fb                	mov    %edi,%ebx
+c0101de1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101de4:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101de7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101deb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101df2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101df6:	75 a0                	jne    c0101d98 <ide_read_secs+0x1d8>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101df8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101dfb:	83 c4 50             	add    $0x50,%esp
+c0101dfe:	5b                   	pop    %ebx
+c0101dff:	5f                   	pop    %edi
+c0101e00:	5d                   	pop    %ebp
+c0101e01:	c3                   	ret    
+
+c0101e02 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c0101e02:	55                   	push   %ebp
+c0101e03:	89 e5                	mov    %esp,%ebp
+c0101e05:	56                   	push   %esi
+c0101e06:	53                   	push   %ebx
+c0101e07:	83 ec 50             	sub    $0x50,%esp
+c0101e0a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101e0d:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101e11:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101e18:	77 24                	ja     c0101e3e <ide_write_secs+0x3c>
+c0101e1a:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101e1f:	77 1d                	ja     c0101e3e <ide_write_secs+0x3c>
+c0101e21:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101e25:	c1 e0 03             	shl    $0x3,%eax
+c0101e28:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101e2f:	29 c2                	sub    %eax,%edx
+c0101e31:	8d 82 80 e6 19 c0    	lea    -0x3fe61980(%edx),%eax
+c0101e37:	0f b6 00             	movzbl (%eax),%eax
+c0101e3a:	84 c0                	test   %al,%al
+c0101e3c:	75 24                	jne    c0101e62 <ide_write_secs+0x60>
+c0101e3e:	c7 44 24 0c 8c c2 10 	movl   $0xc010c28c,0xc(%esp)
+c0101e45:	c0 
+c0101e46:	c7 44 24 08 47 c2 10 	movl   $0xc010c247,0x8(%esp)
+c0101e4d:	c0 
+c0101e4e:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0101e55:	00 
+c0101e56:	c7 04 24 5c c2 10 c0 	movl   $0xc010c25c,(%esp)
+c0101e5d:	e8 7f ef ff ff       	call   c0100de1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101e62:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101e69:	77 0f                	ja     c0101e7a <ide_write_secs+0x78>
+c0101e6b:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101e6e:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101e71:	01 d0                	add    %edx,%eax
+c0101e73:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101e78:	76 24                	jbe    c0101e9e <ide_write_secs+0x9c>
+c0101e7a:	c7 44 24 0c b4 c2 10 	movl   $0xc010c2b4,0xc(%esp)
+c0101e81:	c0 
+c0101e82:	c7 44 24 08 47 c2 10 	movl   $0xc010c247,0x8(%esp)
+c0101e89:	c0 
+c0101e8a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0101e91:	00 
+c0101e92:	c7 04 24 5c c2 10 c0 	movl   $0xc010c25c,(%esp)
+c0101e99:	e8 43 ef ff ff       	call   c0100de1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101e9e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101ea2:	66 d1 e8             	shr    %ax
+c0101ea5:	0f b7 c0             	movzwl %ax,%eax
+c0101ea8:	0f b7 04 85 fc c1 10 	movzwl -0x3fef3e04(,%eax,4),%eax
+c0101eaf:	c0 
+c0101eb0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101eb4:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101eb8:	66 d1 e8             	shr    %ax
+c0101ebb:	0f b7 c0             	movzwl %ax,%eax
+c0101ebe:	0f b7 04 85 fe c1 10 	movzwl -0x3fef3e02(,%eax,4),%eax
+c0101ec5:	c0 
+c0101ec6:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101eca:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101ece:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101ed5:	00 
+c0101ed6:	89 04 24             	mov    %eax,(%esp)
+c0101ed9:	e8 f1 f8 ff ff       	call   c01017cf <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101ede:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101ee2:	83 c0 02             	add    $0x2,%eax
+c0101ee5:	0f b7 c0             	movzwl %ax,%eax
+c0101ee8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101eec:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101ef0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101ef4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ef8:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101ef9:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101efc:	0f b6 c0             	movzbl %al,%eax
+c0101eff:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f03:	83 c2 02             	add    $0x2,%edx
+c0101f06:	0f b7 d2             	movzwl %dx,%edx
+c0101f09:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101f0d:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101f10:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101f14:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101f18:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101f19:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f1c:	0f b6 c0             	movzbl %al,%eax
+c0101f1f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f23:	83 c2 03             	add    $0x3,%edx
+c0101f26:	0f b7 d2             	movzwl %dx,%edx
+c0101f29:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101f2d:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101f30:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101f34:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101f38:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101f39:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f3c:	c1 e8 08             	shr    $0x8,%eax
+c0101f3f:	0f b6 c0             	movzbl %al,%eax
+c0101f42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f46:	83 c2 04             	add    $0x4,%edx
+c0101f49:	0f b7 d2             	movzwl %dx,%edx
+c0101f4c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101f50:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101f53:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101f57:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101f5b:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f5f:	c1 e8 10             	shr    $0x10,%eax
+c0101f62:	0f b6 c0             	movzbl %al,%eax
+c0101f65:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f69:	83 c2 05             	add    $0x5,%edx
+c0101f6c:	0f b7 d2             	movzwl %dx,%edx
+c0101f6f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101f73:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101f76:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101f7a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101f7e:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101f7f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101f83:	83 e0 01             	and    $0x1,%eax
+c0101f86:	c1 e0 04             	shl    $0x4,%eax
+c0101f89:	89 c2                	mov    %eax,%edx
+c0101f8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f8e:	c1 e8 18             	shr    $0x18,%eax
+c0101f91:	83 e0 0f             	and    $0xf,%eax
+c0101f94:	09 d0                	or     %edx,%eax
+c0101f96:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101f99:	0f b6 c0             	movzbl %al,%eax
+c0101f9c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101fa0:	83 c2 06             	add    $0x6,%edx
+c0101fa3:	0f b7 d2             	movzwl %dx,%edx
+c0101fa6:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101faa:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101fad:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101fb1:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101fb5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c0101fb6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fba:	83 c0 07             	add    $0x7,%eax
+c0101fbd:	0f b7 c0             	movzwl %ax,%eax
+c0101fc0:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101fc4:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
+c0101fc8:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101fcc:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101fd0:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101fd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101fd8:	eb 5a                	jmp    c0102034 <ide_write_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101fda:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fde:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101fe5:	00 
+c0101fe6:	89 04 24             	mov    %eax,(%esp)
+c0101fe9:	e8 e1 f7 ff ff       	call   c01017cf <ide_wait_ready>
+c0101fee:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101ff1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101ff5:	74 02                	je     c0101ff9 <ide_write_secs+0x1f7>
+            goto out;
+c0101ff7:	eb 41                	jmp    c010203a <ide_write_secs+0x238>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101ff9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101ffd:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0102000:	8b 45 10             	mov    0x10(%ebp),%eax
+c0102003:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0102006:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c010200d:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0102010:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0102013:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0102016:	89 cb                	mov    %ecx,%ebx
+c0102018:	89 de                	mov    %ebx,%esi
+c010201a:	89 c1                	mov    %eax,%ecx
+c010201c:	fc                   	cld    
+c010201d:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c010201f:	89 c8                	mov    %ecx,%eax
+c0102021:	89 f3                	mov    %esi,%ebx
+c0102023:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0102026:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0102029:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c010202d:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0102034:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0102038:	75 a0                	jne    c0101fda <ide_write_secs+0x1d8>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c010203a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010203d:	83 c4 50             	add    $0x50,%esp
+c0102040:	5b                   	pop    %ebx
+c0102041:	5e                   	pop    %esi
+c0102042:	5d                   	pop    %ebp
+c0102043:	c3                   	ret    
+
+c0102044 <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c0102044:	55                   	push   %ebp
+c0102045:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c0102047:	fb                   	sti    
+    sti();
+}
+c0102048:	5d                   	pop    %ebp
+c0102049:	c3                   	ret    
+
+c010204a <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c010204a:	55                   	push   %ebp
+c010204b:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c010204d:	fa                   	cli    
+    cli();
+}
+c010204e:	5d                   	pop    %ebp
+c010204f:	c3                   	ret    
+
+c0102050 <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c0102050:	55                   	push   %ebp
+c0102051:	89 e5                	mov    %esp,%ebp
+c0102053:	83 ec 14             	sub    $0x14,%esp
+c0102056:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102059:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c010205d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102061:	66 a3 50 a5 12 c0    	mov    %ax,0xc012a550
+    if (did_init) {
+c0102067:	a1 60 e7 19 c0       	mov    0xc019e760,%eax
+c010206c:	85 c0                	test   %eax,%eax
+c010206e:	74 36                	je     c01020a6 <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c0102070:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102074:	0f b6 c0             	movzbl %al,%eax
+c0102077:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c010207d:	88 45 fd             	mov    %al,-0x3(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0102080:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c0102084:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0102088:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0102089:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c010208d:	66 c1 e8 08          	shr    $0x8,%ax
+c0102091:	0f b6 c0             	movzbl %al,%eax
+c0102094:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c010209a:	88 45 f9             	mov    %al,-0x7(%ebp)
+c010209d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01020a1:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01020a5:	ee                   	out    %al,(%dx)
+    }
+}
+c01020a6:	c9                   	leave  
+c01020a7:	c3                   	ret    
+
+c01020a8 <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c01020a8:	55                   	push   %ebp
+c01020a9:	89 e5                	mov    %esp,%ebp
+c01020ab:	83 ec 04             	sub    $0x4,%esp
+    pic_setmask(irq_mask & ~(1 << irq));
+c01020ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01020b1:	ba 01 00 00 00       	mov    $0x1,%edx
+c01020b6:	89 c1                	mov    %eax,%ecx
+c01020b8:	d3 e2                	shl    %cl,%edx
+c01020ba:	89 d0                	mov    %edx,%eax
+c01020bc:	f7 d0                	not    %eax
+c01020be:	89 c2                	mov    %eax,%edx
+c01020c0:	0f b7 05 50 a5 12 c0 	movzwl 0xc012a550,%eax
+c01020c7:	21 d0                	and    %edx,%eax
+c01020c9:	0f b7 c0             	movzwl %ax,%eax
+c01020cc:	89 04 24             	mov    %eax,(%esp)
+c01020cf:	e8 7c ff ff ff       	call   c0102050 <pic_setmask>
+}
+c01020d4:	c9                   	leave  
+c01020d5:	c3                   	ret    
+
+c01020d6 <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c01020d6:	55                   	push   %ebp
+c01020d7:	89 e5                	mov    %esp,%ebp
+c01020d9:	83 ec 44             	sub    $0x44,%esp
+    did_init = 1;
+c01020dc:	c7 05 60 e7 19 c0 01 	movl   $0x1,0xc019e760
+c01020e3:	00 00 00 
+c01020e6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c01020ec:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
+c01020f0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c01020f4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c01020f8:	ee                   	out    %al,(%dx)
+c01020f9:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c01020ff:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
+c0102103:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0102107:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c010210b:	ee                   	out    %al,(%dx)
+c010210c:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
+c0102112:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
+c0102116:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010211a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010211e:	ee                   	out    %al,(%dx)
+c010211f:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
+c0102125:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
+c0102129:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010212d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0102131:	ee                   	out    %al,(%dx)
+c0102132:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
+c0102138:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
+c010213c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0102140:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102144:	ee                   	out    %al,(%dx)
+c0102145:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
+c010214b:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+c010214f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0102153:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0102157:	ee                   	out    %al,(%dx)
+c0102158:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c010215e:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
+c0102162:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0102166:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c010216a:	ee                   	out    %al,(%dx)
+c010216b:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
+c0102171:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
+c0102175:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0102179:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c010217d:	ee                   	out    %al,(%dx)
+c010217e:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
+c0102184:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
+c0102188:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010218c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0102190:	ee                   	out    %al,(%dx)
+c0102191:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
+c0102197:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
+c010219b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c010219f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c01021a3:	ee                   	out    %al,(%dx)
+c01021a4:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
+c01021aa:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
+c01021ae:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c01021b2:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c01021b6:	ee                   	out    %al,(%dx)
+c01021b7:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
+c01021bd:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
+c01021c1:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c01021c5:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c01021c9:	ee                   	out    %al,(%dx)
+c01021ca:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
+c01021d0:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
+c01021d4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01021d8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01021dc:	ee                   	out    %al,(%dx)
+c01021dd:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
+c01021e3:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
+c01021e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01021eb:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
+c01021ef:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c01021f0:	0f b7 05 50 a5 12 c0 	movzwl 0xc012a550,%eax
+c01021f7:	66 83 f8 ff          	cmp    $0xffff,%ax
+c01021fb:	74 12                	je     c010220f <pic_init+0x139>
+        pic_setmask(irq_mask);
+c01021fd:	0f b7 05 50 a5 12 c0 	movzwl 0xc012a550,%eax
+c0102204:	0f b7 c0             	movzwl %ax,%eax
+c0102207:	89 04 24             	mov    %eax,(%esp)
+c010220a:	e8 41 fe ff ff       	call   c0102050 <pic_setmask>
+    }
+}
+c010220f:	c9                   	leave  
+c0102210:	c3                   	ret    
+
+c0102211 <print_ticks>:
+#include <sched.h>
+#include <sync.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c0102211:	55                   	push   %ebp
+c0102212:	89 e5                	mov    %esp,%ebp
+c0102214:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c0102217:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c010221e:	00 
+c010221f:	c7 04 24 00 c3 10 c0 	movl   $0xc010c300,(%esp)
+c0102226:	e8 34 e1 ff ff       	call   c010035f <cprintf>
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c010222b:	c7 04 24 0a c3 10 c0 	movl   $0xc010c30a,(%esp)
+c0102232:	e8 28 e1 ff ff       	call   c010035f <cprintf>
+    panic("EOT: kernel seems ok.");
+c0102237:	c7 44 24 08 18 c3 10 	movl   $0xc010c318,0x8(%esp)
+c010223e:	c0 
+c010223f:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c0102246:	00 
+c0102247:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c010224e:	e8 8e eb ff ff       	call   c0100de1 <__panic>
+
+c0102253 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c0102253:	55                   	push   %ebp
+c0102254:	89 e5                	mov    %esp,%ebp
+c0102256:	83 ec 10             	sub    $0x10,%esp
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+    extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
+c0102259:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0102260:	e9 c3 00 00 00       	jmp    c0102328 <idt_init+0xd5>
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+c0102265:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102268:	8b 04 85 e0 a5 12 c0 	mov    -0x3fed5a20(,%eax,4),%eax
+c010226f:	89 c2                	mov    %eax,%edx
+c0102271:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102274:	66 89 14 c5 80 e7 19 	mov    %dx,-0x3fe61880(,%eax,8)
+c010227b:	c0 
+c010227c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010227f:	66 c7 04 c5 82 e7 19 	movw   $0x8,-0x3fe6187e(,%eax,8)
+c0102286:	c0 08 00 
+c0102289:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010228c:	0f b6 14 c5 84 e7 19 	movzbl -0x3fe6187c(,%eax,8),%edx
+c0102293:	c0 
+c0102294:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102297:	88 14 c5 84 e7 19 c0 	mov    %dl,-0x3fe6187c(,%eax,8)
+c010229e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022a1:	0f b6 14 c5 84 e7 19 	movzbl -0x3fe6187c(,%eax,8),%edx
+c01022a8:	c0 
+c01022a9:	83 e2 1f             	and    $0x1f,%edx
+c01022ac:	88 14 c5 84 e7 19 c0 	mov    %dl,-0x3fe6187c(,%eax,8)
+c01022b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022b6:	0f b6 14 c5 85 e7 19 	movzbl -0x3fe6187b(,%eax,8),%edx
+c01022bd:	c0 
+c01022be:	83 e2 f0             	and    $0xfffffff0,%edx
+c01022c1:	83 ca 0e             	or     $0xe,%edx
+c01022c4:	88 14 c5 85 e7 19 c0 	mov    %dl,-0x3fe6187b(,%eax,8)
+c01022cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ce:	0f b6 14 c5 85 e7 19 	movzbl -0x3fe6187b(,%eax,8),%edx
+c01022d5:	c0 
+c01022d6:	83 e2 ef             	and    $0xffffffef,%edx
+c01022d9:	88 14 c5 85 e7 19 c0 	mov    %dl,-0x3fe6187b(,%eax,8)
+c01022e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022e3:	0f b6 14 c5 85 e7 19 	movzbl -0x3fe6187b(,%eax,8),%edx
+c01022ea:	c0 
+c01022eb:	83 e2 9f             	and    $0xffffff9f,%edx
+c01022ee:	88 14 c5 85 e7 19 c0 	mov    %dl,-0x3fe6187b(,%eax,8)
+c01022f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022f8:	0f b6 14 c5 85 e7 19 	movzbl -0x3fe6187b(,%eax,8),%edx
+c01022ff:	c0 
+c0102300:	83 ca 80             	or     $0xffffff80,%edx
+c0102303:	88 14 c5 85 e7 19 c0 	mov    %dl,-0x3fe6187b(,%eax,8)
+c010230a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010230d:	8b 04 85 e0 a5 12 c0 	mov    -0x3fed5a20(,%eax,4),%eax
+c0102314:	c1 e8 10             	shr    $0x10,%eax
+c0102317:	89 c2                	mov    %eax,%edx
+c0102319:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010231c:	66 89 14 c5 86 e7 19 	mov    %dx,-0x3fe6187a(,%eax,8)
+c0102323:	c0 
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+    extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
+c0102324:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0102328:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010232b:	3d ff 00 00 00       	cmp    $0xff,%eax
+c0102330:	0f 86 2f ff ff ff    	jbe    c0102265 <idt_init+0x12>
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+    }
+    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+c0102336:	a1 e0 a7 12 c0       	mov    0xc012a7e0,%eax
+c010233b:	66 a3 80 eb 19 c0    	mov    %ax,0xc019eb80
+c0102341:	66 c7 05 82 eb 19 c0 	movw   $0x8,0xc019eb82
+c0102348:	08 00 
+c010234a:	0f b6 05 84 eb 19 c0 	movzbl 0xc019eb84,%eax
+c0102351:	83 e0 e0             	and    $0xffffffe0,%eax
+c0102354:	a2 84 eb 19 c0       	mov    %al,0xc019eb84
+c0102359:	0f b6 05 84 eb 19 c0 	movzbl 0xc019eb84,%eax
+c0102360:	83 e0 1f             	and    $0x1f,%eax
+c0102363:	a2 84 eb 19 c0       	mov    %al,0xc019eb84
+c0102368:	0f b6 05 85 eb 19 c0 	movzbl 0xc019eb85,%eax
+c010236f:	83 c8 0f             	or     $0xf,%eax
+c0102372:	a2 85 eb 19 c0       	mov    %al,0xc019eb85
+c0102377:	0f b6 05 85 eb 19 c0 	movzbl 0xc019eb85,%eax
+c010237e:	83 e0 ef             	and    $0xffffffef,%eax
+c0102381:	a2 85 eb 19 c0       	mov    %al,0xc019eb85
+c0102386:	0f b6 05 85 eb 19 c0 	movzbl 0xc019eb85,%eax
+c010238d:	83 c8 60             	or     $0x60,%eax
+c0102390:	a2 85 eb 19 c0       	mov    %al,0xc019eb85
+c0102395:	0f b6 05 85 eb 19 c0 	movzbl 0xc019eb85,%eax
+c010239c:	83 c8 80             	or     $0xffffff80,%eax
+c010239f:	a2 85 eb 19 c0       	mov    %al,0xc019eb85
+c01023a4:	a1 e0 a7 12 c0       	mov    0xc012a7e0,%eax
+c01023a9:	c1 e8 10             	shr    $0x10,%eax
+c01023ac:	66 a3 86 eb 19 c0    	mov    %ax,0xc019eb86
+c01023b2:	c7 45 f8 60 a5 12 c0 	movl   $0xc012a560,-0x8(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c01023b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01023bc:	0f 01 18             	lidtl  (%eax)
+    lidt(&idt_pd);
+}
+c01023bf:	c9                   	leave  
+c01023c0:	c3                   	ret    
+
+c01023c1 <trapname>:
+
+static const char *
+trapname(int trapno) {
+c01023c1:	55                   	push   %ebp
+c01023c2:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c01023c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023c7:	83 f8 13             	cmp    $0x13,%eax
+c01023ca:	77 0c                	ja     c01023d8 <trapname+0x17>
+        return excnames[trapno];
+c01023cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023cf:	8b 04 85 a0 c7 10 c0 	mov    -0x3fef3860(,%eax,4),%eax
+c01023d6:	eb 18                	jmp    c01023f0 <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c01023d8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c01023dc:	7e 0d                	jle    c01023eb <trapname+0x2a>
+c01023de:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c01023e2:	7f 07                	jg     c01023eb <trapname+0x2a>
+        return "Hardware Interrupt";
+c01023e4:	b8 3f c3 10 c0       	mov    $0xc010c33f,%eax
+c01023e9:	eb 05                	jmp    c01023f0 <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c01023eb:	b8 52 c3 10 c0       	mov    $0xc010c352,%eax
+}
+c01023f0:	5d                   	pop    %ebp
+c01023f1:	c3                   	ret    
+
+c01023f2 <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c01023f2:	55                   	push   %ebp
+c01023f3:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c01023f5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023f8:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01023fc:	66 83 f8 08          	cmp    $0x8,%ax
+c0102400:	0f 94 c0             	sete   %al
+c0102403:	0f b6 c0             	movzbl %al,%eax
+}
+c0102406:	5d                   	pop    %ebp
+c0102407:	c3                   	ret    
+
+c0102408 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c0102408:	55                   	push   %ebp
+c0102409:	89 e5                	mov    %esp,%ebp
+c010240b:	83 ec 28             	sub    $0x28,%esp
+    cprintf("trapframe at %p\n", tf);
+c010240e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102411:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102415:	c7 04 24 93 c3 10 c0 	movl   $0xc010c393,(%esp)
+c010241c:	e8 3e df ff ff       	call   c010035f <cprintf>
+    print_regs(&tf->tf_regs);
+c0102421:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102424:	89 04 24             	mov    %eax,(%esp)
+c0102427:	e8 a1 01 00 00       	call   c01025cd <print_regs>
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c010242c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010242f:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c0102433:	0f b7 c0             	movzwl %ax,%eax
+c0102436:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010243a:	c7 04 24 a4 c3 10 c0 	movl   $0xc010c3a4,(%esp)
+c0102441:	e8 19 df ff ff       	call   c010035f <cprintf>
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102449:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c010244d:	0f b7 c0             	movzwl %ax,%eax
+c0102450:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102454:	c7 04 24 b7 c3 10 c0 	movl   $0xc010c3b7,(%esp)
+c010245b:	e8 ff de ff ff       	call   c010035f <cprintf>
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c0102460:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102463:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c0102467:	0f b7 c0             	movzwl %ax,%eax
+c010246a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010246e:	c7 04 24 ca c3 10 c0 	movl   $0xc010c3ca,(%esp)
+c0102475:	e8 e5 de ff ff       	call   c010035f <cprintf>
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c010247a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010247d:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c0102481:	0f b7 c0             	movzwl %ax,%eax
+c0102484:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102488:	c7 04 24 dd c3 10 c0 	movl   $0xc010c3dd,(%esp)
+c010248f:	e8 cb de ff ff       	call   c010035f <cprintf>
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c0102494:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102497:	8b 40 30             	mov    0x30(%eax),%eax
+c010249a:	89 04 24             	mov    %eax,(%esp)
+c010249d:	e8 1f ff ff ff       	call   c01023c1 <trapname>
+c01024a2:	8b 55 08             	mov    0x8(%ebp),%edx
+c01024a5:	8b 52 30             	mov    0x30(%edx),%edx
+c01024a8:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01024ac:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01024b0:	c7 04 24 f0 c3 10 c0 	movl   $0xc010c3f0,(%esp)
+c01024b7:	e8 a3 de ff ff       	call   c010035f <cprintf>
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c01024bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024bf:	8b 40 34             	mov    0x34(%eax),%eax
+c01024c2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024c6:	c7 04 24 02 c4 10 c0 	movl   $0xc010c402,(%esp)
+c01024cd:	e8 8d de ff ff       	call   c010035f <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c01024d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024d5:	8b 40 38             	mov    0x38(%eax),%eax
+c01024d8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024dc:	c7 04 24 11 c4 10 c0 	movl   $0xc010c411,(%esp)
+c01024e3:	e8 77 de ff ff       	call   c010035f <cprintf>
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c01024e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024eb:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01024ef:	0f b7 c0             	movzwl %ax,%eax
+c01024f2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024f6:	c7 04 24 20 c4 10 c0 	movl   $0xc010c420,(%esp)
+c01024fd:	e8 5d de ff ff       	call   c010035f <cprintf>
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c0102502:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102505:	8b 40 40             	mov    0x40(%eax),%eax
+c0102508:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010250c:	c7 04 24 33 c4 10 c0 	movl   $0xc010c433,(%esp)
+c0102513:	e8 47 de ff ff       	call   c010035f <cprintf>
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c0102518:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010251f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c0102526:	eb 3e                	jmp    c0102566 <print_trapframe+0x15e>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c0102528:	8b 45 08             	mov    0x8(%ebp),%eax
+c010252b:	8b 50 40             	mov    0x40(%eax),%edx
+c010252e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0102531:	21 d0                	and    %edx,%eax
+c0102533:	85 c0                	test   %eax,%eax
+c0102535:	74 28                	je     c010255f <print_trapframe+0x157>
+c0102537:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010253a:	8b 04 85 80 a5 12 c0 	mov    -0x3fed5a80(,%eax,4),%eax
+c0102541:	85 c0                	test   %eax,%eax
+c0102543:	74 1a                	je     c010255f <print_trapframe+0x157>
+            cprintf("%s,", IA32flags[i]);
+c0102545:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102548:	8b 04 85 80 a5 12 c0 	mov    -0x3fed5a80(,%eax,4),%eax
+c010254f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102553:	c7 04 24 42 c4 10 c0 	movl   $0xc010c442,(%esp)
+c010255a:	e8 00 de ff ff       	call   c010035f <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c010255f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0102563:	d1 65 f0             	shll   -0x10(%ebp)
+c0102566:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102569:	83 f8 17             	cmp    $0x17,%eax
+c010256c:	76 ba                	jbe    c0102528 <print_trapframe+0x120>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c010256e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102571:	8b 40 40             	mov    0x40(%eax),%eax
+c0102574:	25 00 30 00 00       	and    $0x3000,%eax
+c0102579:	c1 e8 0c             	shr    $0xc,%eax
+c010257c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102580:	c7 04 24 46 c4 10 c0 	movl   $0xc010c446,(%esp)
+c0102587:	e8 d3 dd ff ff       	call   c010035f <cprintf>
+
+    if (!trap_in_kernel(tf)) {
+c010258c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010258f:	89 04 24             	mov    %eax,(%esp)
+c0102592:	e8 5b fe ff ff       	call   c01023f2 <trap_in_kernel>
+c0102597:	85 c0                	test   %eax,%eax
+c0102599:	75 30                	jne    c01025cb <print_trapframe+0x1c3>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c010259b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010259e:	8b 40 44             	mov    0x44(%eax),%eax
+c01025a1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025a5:	c7 04 24 4f c4 10 c0 	movl   $0xc010c44f,(%esp)
+c01025ac:	e8 ae dd ff ff       	call   c010035f <cprintf>
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c01025b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025b4:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c01025b8:	0f b7 c0             	movzwl %ax,%eax
+c01025bb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025bf:	c7 04 24 5e c4 10 c0 	movl   $0xc010c45e,(%esp)
+c01025c6:	e8 94 dd ff ff       	call   c010035f <cprintf>
+    }
+}
+c01025cb:	c9                   	leave  
+c01025cc:	c3                   	ret    
+
+c01025cd <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c01025cd:	55                   	push   %ebp
+c01025ce:	89 e5                	mov    %esp,%ebp
+c01025d0:	83 ec 18             	sub    $0x18,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c01025d3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025d6:	8b 00                	mov    (%eax),%eax
+c01025d8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025dc:	c7 04 24 71 c4 10 c0 	movl   $0xc010c471,(%esp)
+c01025e3:	e8 77 dd ff ff       	call   c010035f <cprintf>
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c01025e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025eb:	8b 40 04             	mov    0x4(%eax),%eax
+c01025ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025f2:	c7 04 24 80 c4 10 c0 	movl   $0xc010c480,(%esp)
+c01025f9:	e8 61 dd ff ff       	call   c010035f <cprintf>
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c01025fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102601:	8b 40 08             	mov    0x8(%eax),%eax
+c0102604:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102608:	c7 04 24 8f c4 10 c0 	movl   $0xc010c48f,(%esp)
+c010260f:	e8 4b dd ff ff       	call   c010035f <cprintf>
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c0102614:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102617:	8b 40 0c             	mov    0xc(%eax),%eax
+c010261a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010261e:	c7 04 24 9e c4 10 c0 	movl   $0xc010c49e,(%esp)
+c0102625:	e8 35 dd ff ff       	call   c010035f <cprintf>
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c010262a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010262d:	8b 40 10             	mov    0x10(%eax),%eax
+c0102630:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102634:	c7 04 24 ad c4 10 c0 	movl   $0xc010c4ad,(%esp)
+c010263b:	e8 1f dd ff ff       	call   c010035f <cprintf>
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c0102640:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102643:	8b 40 14             	mov    0x14(%eax),%eax
+c0102646:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010264a:	c7 04 24 bc c4 10 c0 	movl   $0xc010c4bc,(%esp)
+c0102651:	e8 09 dd ff ff       	call   c010035f <cprintf>
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c0102656:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102659:	8b 40 18             	mov    0x18(%eax),%eax
+c010265c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102660:	c7 04 24 cb c4 10 c0 	movl   $0xc010c4cb,(%esp)
+c0102667:	e8 f3 dc ff ff       	call   c010035f <cprintf>
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c010266c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010266f:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0102672:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102676:	c7 04 24 da c4 10 c0 	movl   $0xc010c4da,(%esp)
+c010267d:	e8 dd dc ff ff       	call   c010035f <cprintf>
+}
+c0102682:	c9                   	leave  
+c0102683:	c3                   	ret    
+
+c0102684 <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c0102684:	55                   	push   %ebp
+c0102685:	89 e5                	mov    %esp,%ebp
+c0102687:	53                   	push   %ebx
+c0102688:	83 ec 34             	sub    $0x34,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c010268b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010268e:	8b 40 34             	mov    0x34(%eax),%eax
+c0102691:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102694:	85 c0                	test   %eax,%eax
+c0102696:	74 07                	je     c010269f <print_pgfault+0x1b>
+c0102698:	b9 e9 c4 10 c0       	mov    $0xc010c4e9,%ecx
+c010269d:	eb 05                	jmp    c01026a4 <print_pgfault+0x20>
+c010269f:	b9 fa c4 10 c0       	mov    $0xc010c4fa,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c01026a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026a7:	8b 40 34             	mov    0x34(%eax),%eax
+c01026aa:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026ad:	85 c0                	test   %eax,%eax
+c01026af:	74 07                	je     c01026b8 <print_pgfault+0x34>
+c01026b1:	ba 57 00 00 00       	mov    $0x57,%edx
+c01026b6:	eb 05                	jmp    c01026bd <print_pgfault+0x39>
+c01026b8:	ba 52 00 00 00       	mov    $0x52,%edx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c01026bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c0:	8b 40 34             	mov    0x34(%eax),%eax
+c01026c3:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026c6:	85 c0                	test   %eax,%eax
+c01026c8:	74 07                	je     c01026d1 <print_pgfault+0x4d>
+c01026ca:	b8 55 00 00 00       	mov    $0x55,%eax
+c01026cf:	eb 05                	jmp    c01026d6 <print_pgfault+0x52>
+c01026d1:	b8 4b 00 00 00       	mov    $0x4b,%eax
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01026d6:	0f 20 d3             	mov    %cr2,%ebx
+c01026d9:	89 5d f4             	mov    %ebx,-0xc(%ebp)
+    return cr2;
+c01026dc:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+c01026df:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c01026e3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c01026e7:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01026eb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c01026ef:	c7 04 24 08 c5 10 c0 	movl   $0xc010c508,(%esp)
+c01026f6:	e8 64 dc ff ff       	call   c010035f <cprintf>
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c01026fb:	83 c4 34             	add    $0x34,%esp
+c01026fe:	5b                   	pop    %ebx
+c01026ff:	5d                   	pop    %ebp
+c0102700:	c3                   	ret    
+
+c0102701 <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c0102701:	55                   	push   %ebp
+c0102702:	89 e5                	mov    %esp,%ebp
+c0102704:	83 ec 28             	sub    $0x28,%esp
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+c0102707:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c010270c:	85 c0                	test   %eax,%eax
+c010270e:	74 0b                	je     c010271b <pgfault_handler+0x1a>
+            print_pgfault(tf);
+c0102710:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102713:	89 04 24             	mov    %eax,(%esp)
+c0102716:	e8 69 ff ff ff       	call   c0102684 <print_pgfault>
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+c010271b:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c0102720:	85 c0                	test   %eax,%eax
+c0102722:	74 3d                	je     c0102761 <pgfault_handler+0x60>
+        assert(current == idleproc);
+c0102724:	8b 15 48 f0 19 c0    	mov    0xc019f048,%edx
+c010272a:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010272f:	39 c2                	cmp    %eax,%edx
+c0102731:	74 24                	je     c0102757 <pgfault_handler+0x56>
+c0102733:	c7 44 24 0c 2b c5 10 	movl   $0xc010c52b,0xc(%esp)
+c010273a:	c0 
+c010273b:	c7 44 24 08 3f c5 10 	movl   $0xc010c53f,0x8(%esp)
+c0102742:	c0 
+c0102743:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
+c010274a:	00 
+c010274b:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c0102752:	e8 8a e6 ff ff       	call   c0100de1 <__panic>
+        mm = check_mm_struct;
+c0102757:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c010275c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010275f:	eb 46                	jmp    c01027a7 <pgfault_handler+0xa6>
+    }
+    else {
+        if (current == NULL) {
+c0102761:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102766:	85 c0                	test   %eax,%eax
+c0102768:	75 32                	jne    c010279c <pgfault_handler+0x9b>
+            print_trapframe(tf);
+c010276a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010276d:	89 04 24             	mov    %eax,(%esp)
+c0102770:	e8 93 fc ff ff       	call   c0102408 <print_trapframe>
+            print_pgfault(tf);
+c0102775:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102778:	89 04 24             	mov    %eax,(%esp)
+c010277b:	e8 04 ff ff ff       	call   c0102684 <print_pgfault>
+            panic("unhandled page fault.\n");
+c0102780:	c7 44 24 08 54 c5 10 	movl   $0xc010c554,0x8(%esp)
+c0102787:	c0 
+c0102788:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
+c010278f:	00 
+c0102790:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c0102797:	e8 45 e6 ff ff       	call   c0100de1 <__panic>
+        }
+        mm = current->mm;
+c010279c:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c01027a1:	8b 40 18             	mov    0x18(%eax),%eax
+c01027a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01027a7:	0f 20 d0             	mov    %cr2,%eax
+c01027aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c01027ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c01027b0:	89 c2                	mov    %eax,%edx
+c01027b2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027b5:	8b 40 34             	mov    0x34(%eax),%eax
+c01027b8:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01027bc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01027c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01027c3:	89 04 24             	mov    %eax,(%esp)
+c01027c6:	e8 45 66 00 00       	call   c0108e10 <do_pgfault>
+}
+c01027cb:	c9                   	leave  
+c01027cc:	c3                   	ret    
+
+c01027cd <trap_dispatch>:
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c01027cd:	55                   	push   %ebp
+c01027ce:	89 e5                	mov    %esp,%ebp
+c01027d0:	83 ec 28             	sub    $0x28,%esp
+    char c;
+
+    int ret=0;
+c01027d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    switch (tf->tf_trapno) {
+c01027da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027dd:	8b 40 30             	mov    0x30(%eax),%eax
+c01027e0:	83 f8 2f             	cmp    $0x2f,%eax
+c01027e3:	77 38                	ja     c010281d <trap_dispatch+0x50>
+c01027e5:	83 f8 2e             	cmp    $0x2e,%eax
+c01027e8:	0f 83 05 02 00 00    	jae    c01029f3 <trap_dispatch+0x226>
+c01027ee:	83 f8 20             	cmp    $0x20,%eax
+c01027f1:	0f 84 07 01 00 00    	je     c01028fe <trap_dispatch+0x131>
+c01027f7:	83 f8 20             	cmp    $0x20,%eax
+c01027fa:	77 0a                	ja     c0102806 <trap_dispatch+0x39>
+c01027fc:	83 f8 0e             	cmp    $0xe,%eax
+c01027ff:	74 3e                	je     c010283f <trap_dispatch+0x72>
+c0102801:	e9 a5 01 00 00       	jmp    c01029ab <trap_dispatch+0x1de>
+c0102806:	83 f8 21             	cmp    $0x21,%eax
+c0102809:	0f 84 5a 01 00 00    	je     c0102969 <trap_dispatch+0x19c>
+c010280f:	83 f8 24             	cmp    $0x24,%eax
+c0102812:	0f 84 28 01 00 00    	je     c0102940 <trap_dispatch+0x173>
+c0102818:	e9 8e 01 00 00       	jmp    c01029ab <trap_dispatch+0x1de>
+c010281d:	83 f8 78             	cmp    $0x78,%eax
+c0102820:	0f 82 85 01 00 00    	jb     c01029ab <trap_dispatch+0x1de>
+c0102826:	83 f8 79             	cmp    $0x79,%eax
+c0102829:	0f 86 60 01 00 00    	jbe    c010298f <trap_dispatch+0x1c2>
+c010282f:	3d 80 00 00 00       	cmp    $0x80,%eax
+c0102834:	0f 84 ba 00 00 00    	je     c01028f4 <trap_dispatch+0x127>
+c010283a:	e9 6c 01 00 00       	jmp    c01029ab <trap_dispatch+0x1de>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c010283f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102842:	89 04 24             	mov    %eax,(%esp)
+c0102845:	e8 b7 fe ff ff       	call   c0102701 <pgfault_handler>
+c010284a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010284d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0102851:	0f 84 98 00 00 00    	je     c01028ef <trap_dispatch+0x122>
+            print_trapframe(tf);
+c0102857:	8b 45 08             	mov    0x8(%ebp),%eax
+c010285a:	89 04 24             	mov    %eax,(%esp)
+c010285d:	e8 a6 fb ff ff       	call   c0102408 <print_trapframe>
+            if (current == NULL) {
+c0102862:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102867:	85 c0                	test   %eax,%eax
+c0102869:	75 23                	jne    c010288e <trap_dispatch+0xc1>
+                panic("handle pgfault failed. ret=%d\n", ret);
+c010286b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010286e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0102872:	c7 44 24 08 6c c5 10 	movl   $0xc010c56c,0x8(%esp)
+c0102879:	c0 
+c010287a:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c0102881:	00 
+c0102882:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c0102889:	e8 53 e5 ff ff       	call   c0100de1 <__panic>
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+c010288e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102891:	89 04 24             	mov    %eax,(%esp)
+c0102894:	e8 59 fb ff ff       	call   c01023f2 <trap_in_kernel>
+c0102899:	85 c0                	test   %eax,%eax
+c010289b:	74 23                	je     c01028c0 <trap_dispatch+0xf3>
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c010289d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01028a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01028a4:	c7 44 24 08 8c c5 10 	movl   $0xc010c58c,0x8(%esp)
+c01028ab:	c0 
+c01028ac:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
+c01028b3:	00 
+c01028b4:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c01028bb:	e8 21 e5 ff ff       	call   c0100de1 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c01028c0:	c7 04 24 ba c5 10 c0 	movl   $0xc010c5ba,(%esp)
+c01028c7:	e8 93 da ff ff       	call   c010035f <cprintf>
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+c01028cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01028cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01028d3:	c7 44 24 08 d0 c5 10 	movl   $0xc010c5d0,0x8(%esp)
+c01028da:	c0 
+c01028db:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
+c01028e2:	00 
+c01028e3:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c01028ea:	e8 f2 e4 ff ff       	call   c0100de1 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+c01028ef:	e9 00 01 00 00       	jmp    c01029f4 <trap_dispatch+0x227>
+    case T_SYSCALL:
+        syscall();
+c01028f4:	e8 9e 88 00 00       	call   c010b197 <syscall>
+        break;
+c01028f9:	e9 f6 00 00 00       	jmp    c01029f4 <trap_dispatch+0x227>
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        ticks ++;
+c01028fe:	a1 74 10 1a c0       	mov    0xc01a1074,%eax
+c0102903:	83 c0 01             	add    $0x1,%eax
+c0102906:	a3 74 10 1a c0       	mov    %eax,0xc01a1074
+        if (ticks % TICK_NUM == 0) {
+c010290b:	8b 0d 74 10 1a c0    	mov    0xc01a1074,%ecx
+c0102911:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
+c0102916:	89 c8                	mov    %ecx,%eax
+c0102918:	f7 e2                	mul    %edx
+c010291a:	89 d0                	mov    %edx,%eax
+c010291c:	c1 e8 05             	shr    $0x5,%eax
+c010291f:	6b c0 64             	imul   $0x64,%eax,%eax
+c0102922:	29 c1                	sub    %eax,%ecx
+c0102924:	89 c8                	mov    %ecx,%eax
+c0102926:	85 c0                	test   %eax,%eax
+c0102928:	75 11                	jne    c010293b <trap_dispatch+0x16e>
+            // print_ticks();
+            current->need_resched = 1;
+c010292a:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010292f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+        }
+        break;
+c0102936:	e9 b9 00 00 00       	jmp    c01029f4 <trap_dispatch+0x227>
+c010293b:	e9 b4 00 00 00       	jmp    c01029f4 <trap_dispatch+0x227>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c0102940:	e8 1b ee ff ff       	call   c0101760 <cons_getc>
+c0102945:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c0102948:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c010294c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c0102950:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0102954:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102958:	c7 04 24 f9 c5 10 c0 	movl   $0xc010c5f9,(%esp)
+c010295f:	e8 fb d9 ff ff       	call   c010035f <cprintf>
+        break;
+c0102964:	e9 8b 00 00 00       	jmp    c01029f4 <trap_dispatch+0x227>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c0102969:	e8 f2 ed ff ff       	call   c0101760 <cons_getc>
+c010296e:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c0102971:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c0102975:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c0102979:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010297d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102981:	c7 04 24 0b c6 10 c0 	movl   $0xc010c60b,(%esp)
+c0102988:	e8 d2 d9 ff ff       	call   c010035f <cprintf>
+        break;
+c010298d:	eb 65                	jmp    c01029f4 <trap_dispatch+0x227>
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+c010298f:	c7 44 24 08 1a c6 10 	movl   $0xc010c61a,0x8(%esp)
+c0102996:	c0 
+c0102997:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
+c010299e:	00 
+c010299f:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c01029a6:	e8 36 e4 ff ff       	call   c0100de1 <__panic>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c01029ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029ae:	89 04 24             	mov    %eax,(%esp)
+c01029b1:	e8 52 fa ff ff       	call   c0102408 <print_trapframe>
+        if (current != NULL) {
+c01029b6:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c01029bb:	85 c0                	test   %eax,%eax
+c01029bd:	74 18                	je     c01029d7 <trap_dispatch+0x20a>
+            cprintf("unhandled trap.\n");
+c01029bf:	c7 04 24 2a c6 10 c0 	movl   $0xc010c62a,(%esp)
+c01029c6:	e8 94 d9 ff ff       	call   c010035f <cprintf>
+            do_exit(-E_KILLED);
+c01029cb:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c01029d2:	e8 63 75 00 00       	call   c0109f3a <do_exit>
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c01029d7:	c7 44 24 08 3b c6 10 	movl   $0xc010c63b,0x8(%esp)
+c01029de:	c0 
+c01029df:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
+c01029e6:	00 
+c01029e7:	c7 04 24 2e c3 10 c0 	movl   $0xc010c32e,(%esp)
+c01029ee:	e8 ee e3 ff ff       	call   c0100de1 <__panic>
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c01029f3:	90                   	nop
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+c01029f4:	c9                   	leave  
+c01029f5:	c3                   	ret    
+
+c01029f6 <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c01029f6:	55                   	push   %ebp
+c01029f7:	89 e5                	mov    %esp,%ebp
+c01029f9:	83 ec 28             	sub    $0x28,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+c01029fc:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a01:	85 c0                	test   %eax,%eax
+c0102a03:	75 0d                	jne    c0102a12 <trap+0x1c>
+        trap_dispatch(tf);
+c0102a05:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a08:	89 04 24             	mov    %eax,(%esp)
+c0102a0b:	e8 bd fd ff ff       	call   c01027cd <trap_dispatch>
+c0102a10:	eb 6c                	jmp    c0102a7e <trap+0x88>
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+c0102a12:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a17:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102a1d:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a22:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102a25:	89 50 3c             	mov    %edx,0x3c(%eax)
+    
+        bool in_kernel = trap_in_kernel(tf);
+c0102a28:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a2b:	89 04 24             	mov    %eax,(%esp)
+c0102a2e:	e8 bf f9 ff ff       	call   c01023f2 <trap_in_kernel>
+c0102a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    
+        trap_dispatch(tf);
+c0102a36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a39:	89 04 24             	mov    %eax,(%esp)
+c0102a3c:	e8 8c fd ff ff       	call   c01027cd <trap_dispatch>
+    
+        current->tf = otf;
+c0102a41:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a46:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102a49:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel) {
+c0102a4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102a50:	75 2c                	jne    c0102a7e <trap+0x88>
+            if (current->flags & PF_EXITING) {
+c0102a52:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a57:	8b 40 44             	mov    0x44(%eax),%eax
+c0102a5a:	83 e0 01             	and    $0x1,%eax
+c0102a5d:	85 c0                	test   %eax,%eax
+c0102a5f:	74 0c                	je     c0102a6d <trap+0x77>
+                do_exit(-E_KILLED);
+c0102a61:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102a68:	e8 cd 74 00 00       	call   c0109f3a <do_exit>
+            }
+            if (current->need_resched) {
+c0102a6d:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0102a72:	8b 40 10             	mov    0x10(%eax),%eax
+c0102a75:	85 c0                	test   %eax,%eax
+c0102a77:	74 05                	je     c0102a7e <trap+0x88>
+                schedule();
+c0102a79:	e8 21 85 00 00       	call   c010af9f <schedule>
+            }
+        }
+    }
+}
+c0102a7e:	c9                   	leave  
+c0102a7f:	c3                   	ret    
+
+c0102a80 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0102a80:	1e                   	push   %ds
+    pushl %es
+c0102a81:	06                   	push   %es
+    pushl %fs
+c0102a82:	0f a0                	push   %fs
+    pushl %gs
+c0102a84:	0f a8                	push   %gs
+    pushal
+c0102a86:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c0102a87:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c0102a8c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0102a8e:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0102a90:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c0102a91:	e8 60 ff ff ff       	call   c01029f6 <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c0102a96:	5c                   	pop    %esp
+
+c0102a97 <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c0102a97:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c0102a98:	0f a9                	pop    %gs
+    popl %fs
+c0102a9a:	0f a1                	pop    %fs
+    popl %es
+c0102a9c:	07                   	pop    %es
+    popl %ds
+c0102a9d:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0102a9e:	83 c4 08             	add    $0x8,%esp
+    iret
+c0102aa1:	cf                   	iret   
+
+c0102aa2 <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c0102aa2:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c0102aa6:	e9 ec ff ff ff       	jmp    c0102a97 <__trapret>
+
+c0102aab <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102aab:	6a 00                	push   $0x0
+  pushl $0
+c0102aad:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102aaf:	e9 cc ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ab4 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102ab4:	6a 00                	push   $0x0
+  pushl $1
+c0102ab6:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102ab8:	e9 c3 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102abd <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102abd:	6a 00                	push   $0x0
+  pushl $2
+c0102abf:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102ac1:	e9 ba ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ac6 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102ac6:	6a 00                	push   $0x0
+  pushl $3
+c0102ac8:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102aca:	e9 b1 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102acf <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102acf:	6a 00                	push   $0x0
+  pushl $4
+c0102ad1:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102ad3:	e9 a8 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ad8 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102ad8:	6a 00                	push   $0x0
+  pushl $5
+c0102ada:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102adc:	e9 9f ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ae1 <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102ae1:	6a 00                	push   $0x0
+  pushl $6
+c0102ae3:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102ae5:	e9 96 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102aea <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102aea:	6a 00                	push   $0x0
+  pushl $7
+c0102aec:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102aee:	e9 8d ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102af3 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102af3:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102af5:	e9 86 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102afa <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+c0102afa:	6a 00                	push   $0x0
+  pushl $9
+c0102afc:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102afe:	e9 7d ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b03 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102b03:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102b05:	e9 76 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b0a <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102b0a:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102b0c:	e9 6f ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b11 <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102b11:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102b13:	e9 68 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b18 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102b18:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102b1a:	e9 61 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b1f <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102b1f:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102b21:	e9 5a ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b26 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102b26:	6a 00                	push   $0x0
+  pushl $15
+c0102b28:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102b2a:	e9 51 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b2f <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102b2f:	6a 00                	push   $0x0
+  pushl $16
+c0102b31:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102b33:	e9 48 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b38 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102b38:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102b3a:	e9 41 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b3f <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102b3f:	6a 00                	push   $0x0
+  pushl $18
+c0102b41:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102b43:	e9 38 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b48 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102b48:	6a 00                	push   $0x0
+  pushl $19
+c0102b4a:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102b4c:	e9 2f ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b51 <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102b51:	6a 00                	push   $0x0
+  pushl $20
+c0102b53:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102b55:	e9 26 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b5a <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102b5a:	6a 00                	push   $0x0
+  pushl $21
+c0102b5c:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102b5e:	e9 1d ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b63 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102b63:	6a 00                	push   $0x0
+  pushl $22
+c0102b65:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102b67:	e9 14 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b6c <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102b6c:	6a 00                	push   $0x0
+  pushl $23
+c0102b6e:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102b70:	e9 0b ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b75 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102b75:	6a 00                	push   $0x0
+  pushl $24
+c0102b77:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102b79:	e9 02 ff ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b7e <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102b7e:	6a 00                	push   $0x0
+  pushl $25
+c0102b80:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102b82:	e9 f9 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b87 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102b87:	6a 00                	push   $0x0
+  pushl $26
+c0102b89:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102b8b:	e9 f0 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b90 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102b90:	6a 00                	push   $0x0
+  pushl $27
+c0102b92:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102b94:	e9 e7 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102b99 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102b99:	6a 00                	push   $0x0
+  pushl $28
+c0102b9b:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102b9d:	e9 de fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ba2 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102ba2:	6a 00                	push   $0x0
+  pushl $29
+c0102ba4:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102ba6:	e9 d5 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bab <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102bab:	6a 00                	push   $0x0
+  pushl $30
+c0102bad:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102baf:	e9 cc fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bb4 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102bb4:	6a 00                	push   $0x0
+  pushl $31
+c0102bb6:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102bb8:	e9 c3 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bbd <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102bbd:	6a 00                	push   $0x0
+  pushl $32
+c0102bbf:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102bc1:	e9 ba fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bc6 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102bc6:	6a 00                	push   $0x0
+  pushl $33
+c0102bc8:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102bca:	e9 b1 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bcf <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102bcf:	6a 00                	push   $0x0
+  pushl $34
+c0102bd1:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102bd3:	e9 a8 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bd8 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102bd8:	6a 00                	push   $0x0
+  pushl $35
+c0102bda:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102bdc:	e9 9f fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102be1 <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102be1:	6a 00                	push   $0x0
+  pushl $36
+c0102be3:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102be5:	e9 96 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bea <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102bea:	6a 00                	push   $0x0
+  pushl $37
+c0102bec:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102bee:	e9 8d fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bf3 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102bf3:	6a 00                	push   $0x0
+  pushl $38
+c0102bf5:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102bf7:	e9 84 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102bfc <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102bfc:	6a 00                	push   $0x0
+  pushl $39
+c0102bfe:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102c00:	e9 7b fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c05 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102c05:	6a 00                	push   $0x0
+  pushl $40
+c0102c07:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102c09:	e9 72 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c0e <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102c0e:	6a 00                	push   $0x0
+  pushl $41
+c0102c10:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102c12:	e9 69 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c17 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102c17:	6a 00                	push   $0x0
+  pushl $42
+c0102c19:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102c1b:	e9 60 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c20 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102c20:	6a 00                	push   $0x0
+  pushl $43
+c0102c22:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102c24:	e9 57 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c29 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102c29:	6a 00                	push   $0x0
+  pushl $44
+c0102c2b:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102c2d:	e9 4e fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c32 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102c32:	6a 00                	push   $0x0
+  pushl $45
+c0102c34:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102c36:	e9 45 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c3b <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102c3b:	6a 00                	push   $0x0
+  pushl $46
+c0102c3d:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102c3f:	e9 3c fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c44 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102c44:	6a 00                	push   $0x0
+  pushl $47
+c0102c46:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102c48:	e9 33 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c4d <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102c4d:	6a 00                	push   $0x0
+  pushl $48
+c0102c4f:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102c51:	e9 2a fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c56 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102c56:	6a 00                	push   $0x0
+  pushl $49
+c0102c58:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102c5a:	e9 21 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c5f <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102c5f:	6a 00                	push   $0x0
+  pushl $50
+c0102c61:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102c63:	e9 18 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c68 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102c68:	6a 00                	push   $0x0
+  pushl $51
+c0102c6a:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102c6c:	e9 0f fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c71 <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102c71:	6a 00                	push   $0x0
+  pushl $52
+c0102c73:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102c75:	e9 06 fe ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c7a <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102c7a:	6a 00                	push   $0x0
+  pushl $53
+c0102c7c:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102c7e:	e9 fd fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c83 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102c83:	6a 00                	push   $0x0
+  pushl $54
+c0102c85:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102c87:	e9 f4 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c8c <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102c8c:	6a 00                	push   $0x0
+  pushl $55
+c0102c8e:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102c90:	e9 eb fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c95 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102c95:	6a 00                	push   $0x0
+  pushl $56
+c0102c97:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102c99:	e9 e2 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102c9e <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102c9e:	6a 00                	push   $0x0
+  pushl $57
+c0102ca0:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102ca2:	e9 d9 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ca7 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102ca7:	6a 00                	push   $0x0
+  pushl $58
+c0102ca9:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102cab:	e9 d0 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cb0 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102cb0:	6a 00                	push   $0x0
+  pushl $59
+c0102cb2:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102cb4:	e9 c7 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cb9 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102cb9:	6a 00                	push   $0x0
+  pushl $60
+c0102cbb:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102cbd:	e9 be fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cc2 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102cc2:	6a 00                	push   $0x0
+  pushl $61
+c0102cc4:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102cc6:	e9 b5 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ccb <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102ccb:	6a 00                	push   $0x0
+  pushl $62
+c0102ccd:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102ccf:	e9 ac fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cd4 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102cd4:	6a 00                	push   $0x0
+  pushl $63
+c0102cd6:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102cd8:	e9 a3 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cdd <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102cdd:	6a 00                	push   $0x0
+  pushl $64
+c0102cdf:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102ce1:	e9 9a fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ce6 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102ce6:	6a 00                	push   $0x0
+  pushl $65
+c0102ce8:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102cea:	e9 91 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cef <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102cef:	6a 00                	push   $0x0
+  pushl $66
+c0102cf1:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102cf3:	e9 88 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102cf8 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102cf8:	6a 00                	push   $0x0
+  pushl $67
+c0102cfa:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102cfc:	e9 7f fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d01 <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102d01:	6a 00                	push   $0x0
+  pushl $68
+c0102d03:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102d05:	e9 76 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d0a <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102d0a:	6a 00                	push   $0x0
+  pushl $69
+c0102d0c:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102d0e:	e9 6d fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d13 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102d13:	6a 00                	push   $0x0
+  pushl $70
+c0102d15:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102d17:	e9 64 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d1c <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102d1c:	6a 00                	push   $0x0
+  pushl $71
+c0102d1e:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102d20:	e9 5b fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d25 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102d25:	6a 00                	push   $0x0
+  pushl $72
+c0102d27:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102d29:	e9 52 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d2e <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102d2e:	6a 00                	push   $0x0
+  pushl $73
+c0102d30:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102d32:	e9 49 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d37 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102d37:	6a 00                	push   $0x0
+  pushl $74
+c0102d39:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102d3b:	e9 40 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d40 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102d40:	6a 00                	push   $0x0
+  pushl $75
+c0102d42:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102d44:	e9 37 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d49 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102d49:	6a 00                	push   $0x0
+  pushl $76
+c0102d4b:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102d4d:	e9 2e fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d52 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102d52:	6a 00                	push   $0x0
+  pushl $77
+c0102d54:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102d56:	e9 25 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d5b <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102d5b:	6a 00                	push   $0x0
+  pushl $78
+c0102d5d:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102d5f:	e9 1c fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d64 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102d64:	6a 00                	push   $0x0
+  pushl $79
+c0102d66:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102d68:	e9 13 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d6d <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102d6d:	6a 00                	push   $0x0
+  pushl $80
+c0102d6f:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102d71:	e9 0a fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d76 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102d76:	6a 00                	push   $0x0
+  pushl $81
+c0102d78:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102d7a:	e9 01 fd ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d7f <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102d7f:	6a 00                	push   $0x0
+  pushl $82
+c0102d81:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102d83:	e9 f8 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d88 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102d88:	6a 00                	push   $0x0
+  pushl $83
+c0102d8a:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102d8c:	e9 ef fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d91 <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102d91:	6a 00                	push   $0x0
+  pushl $84
+c0102d93:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102d95:	e9 e6 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102d9a <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102d9a:	6a 00                	push   $0x0
+  pushl $85
+c0102d9c:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102d9e:	e9 dd fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102da3 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102da3:	6a 00                	push   $0x0
+  pushl $86
+c0102da5:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102da7:	e9 d4 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dac <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102dac:	6a 00                	push   $0x0
+  pushl $87
+c0102dae:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102db0:	e9 cb fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102db5 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102db5:	6a 00                	push   $0x0
+  pushl $88
+c0102db7:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102db9:	e9 c2 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dbe <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102dbe:	6a 00                	push   $0x0
+  pushl $89
+c0102dc0:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102dc2:	e9 b9 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dc7 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102dc7:	6a 00                	push   $0x0
+  pushl $90
+c0102dc9:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102dcb:	e9 b0 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dd0 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102dd0:	6a 00                	push   $0x0
+  pushl $91
+c0102dd2:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102dd4:	e9 a7 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dd9 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102dd9:	6a 00                	push   $0x0
+  pushl $92
+c0102ddb:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102ddd:	e9 9e fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102de2 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102de2:	6a 00                	push   $0x0
+  pushl $93
+c0102de4:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102de6:	e9 95 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102deb <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102deb:	6a 00                	push   $0x0
+  pushl $94
+c0102ded:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102def:	e9 8c fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102df4 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102df4:	6a 00                	push   $0x0
+  pushl $95
+c0102df6:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102df8:	e9 83 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102dfd <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102dfd:	6a 00                	push   $0x0
+  pushl $96
+c0102dff:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102e01:	e9 7a fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e06 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102e06:	6a 00                	push   $0x0
+  pushl $97
+c0102e08:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102e0a:	e9 71 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e0f <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102e0f:	6a 00                	push   $0x0
+  pushl $98
+c0102e11:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102e13:	e9 68 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e18 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102e18:	6a 00                	push   $0x0
+  pushl $99
+c0102e1a:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102e1c:	e9 5f fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e21 <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102e21:	6a 00                	push   $0x0
+  pushl $100
+c0102e23:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102e25:	e9 56 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e2a <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102e2a:	6a 00                	push   $0x0
+  pushl $101
+c0102e2c:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102e2e:	e9 4d fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e33 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102e33:	6a 00                	push   $0x0
+  pushl $102
+c0102e35:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102e37:	e9 44 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e3c <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102e3c:	6a 00                	push   $0x0
+  pushl $103
+c0102e3e:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102e40:	e9 3b fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e45 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102e45:	6a 00                	push   $0x0
+  pushl $104
+c0102e47:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102e49:	e9 32 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e4e <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102e4e:	6a 00                	push   $0x0
+  pushl $105
+c0102e50:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102e52:	e9 29 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e57 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102e57:	6a 00                	push   $0x0
+  pushl $106
+c0102e59:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102e5b:	e9 20 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e60 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102e60:	6a 00                	push   $0x0
+  pushl $107
+c0102e62:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102e64:	e9 17 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e69 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102e69:	6a 00                	push   $0x0
+  pushl $108
+c0102e6b:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102e6d:	e9 0e fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e72 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102e72:	6a 00                	push   $0x0
+  pushl $109
+c0102e74:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102e76:	e9 05 fc ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e7b <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102e7b:	6a 00                	push   $0x0
+  pushl $110
+c0102e7d:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102e7f:	e9 fc fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e84 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102e84:	6a 00                	push   $0x0
+  pushl $111
+c0102e86:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102e88:	e9 f3 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e8d <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102e8d:	6a 00                	push   $0x0
+  pushl $112
+c0102e8f:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102e91:	e9 ea fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e96 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102e96:	6a 00                	push   $0x0
+  pushl $113
+c0102e98:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102e9a:	e9 e1 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102e9f <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102e9f:	6a 00                	push   $0x0
+  pushl $114
+c0102ea1:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102ea3:	e9 d8 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ea8 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102ea8:	6a 00                	push   $0x0
+  pushl $115
+c0102eaa:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102eac:	e9 cf fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102eb1 <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102eb1:	6a 00                	push   $0x0
+  pushl $116
+c0102eb3:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102eb5:	e9 c6 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102eba <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102eba:	6a 00                	push   $0x0
+  pushl $117
+c0102ebc:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102ebe:	e9 bd fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ec3 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102ec3:	6a 00                	push   $0x0
+  pushl $118
+c0102ec5:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102ec7:	e9 b4 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ecc <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102ecc:	6a 00                	push   $0x0
+  pushl $119
+c0102ece:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102ed0:	e9 ab fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ed5 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102ed5:	6a 00                	push   $0x0
+  pushl $120
+c0102ed7:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102ed9:	e9 a2 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ede <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102ede:	6a 00                	push   $0x0
+  pushl $121
+c0102ee0:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102ee2:	e9 99 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ee7 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102ee7:	6a 00                	push   $0x0
+  pushl $122
+c0102ee9:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102eeb:	e9 90 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ef0 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102ef0:	6a 00                	push   $0x0
+  pushl $123
+c0102ef2:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102ef4:	e9 87 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ef9 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102ef9:	6a 00                	push   $0x0
+  pushl $124
+c0102efb:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102efd:	e9 7e fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f02 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102f02:	6a 00                	push   $0x0
+  pushl $125
+c0102f04:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102f06:	e9 75 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f0b <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102f0b:	6a 00                	push   $0x0
+  pushl $126
+c0102f0d:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102f0f:	e9 6c fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f14 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102f14:	6a 00                	push   $0x0
+  pushl $127
+c0102f16:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102f18:	e9 63 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f1d <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102f1d:	6a 00                	push   $0x0
+  pushl $128
+c0102f1f:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102f24:	e9 57 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f29 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102f29:	6a 00                	push   $0x0
+  pushl $129
+c0102f2b:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102f30:	e9 4b fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f35 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102f35:	6a 00                	push   $0x0
+  pushl $130
+c0102f37:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102f3c:	e9 3f fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f41 <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102f41:	6a 00                	push   $0x0
+  pushl $131
+c0102f43:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102f48:	e9 33 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f4d <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102f4d:	6a 00                	push   $0x0
+  pushl $132
+c0102f4f:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102f54:	e9 27 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f59 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102f59:	6a 00                	push   $0x0
+  pushl $133
+c0102f5b:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102f60:	e9 1b fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f65 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102f65:	6a 00                	push   $0x0
+  pushl $134
+c0102f67:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102f6c:	e9 0f fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f71 <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102f71:	6a 00                	push   $0x0
+  pushl $135
+c0102f73:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102f78:	e9 03 fb ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f7d <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0102f7d:	6a 00                	push   $0x0
+  pushl $136
+c0102f7f:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0102f84:	e9 f7 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f89 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0102f89:	6a 00                	push   $0x0
+  pushl $137
+c0102f8b:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0102f90:	e9 eb fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102f95 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0102f95:	6a 00                	push   $0x0
+  pushl $138
+c0102f97:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0102f9c:	e9 df fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fa1 <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c0102fa1:	6a 00                	push   $0x0
+  pushl $139
+c0102fa3:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0102fa8:	e9 d3 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fad <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0102fad:	6a 00                	push   $0x0
+  pushl $140
+c0102faf:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0102fb4:	e9 c7 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fb9 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0102fb9:	6a 00                	push   $0x0
+  pushl $141
+c0102fbb:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0102fc0:	e9 bb fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fc5 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0102fc5:	6a 00                	push   $0x0
+  pushl $142
+c0102fc7:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0102fcc:	e9 af fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fd1 <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c0102fd1:	6a 00                	push   $0x0
+  pushl $143
+c0102fd3:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0102fd8:	e9 a3 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fdd <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0102fdd:	6a 00                	push   $0x0
+  pushl $144
+c0102fdf:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0102fe4:	e9 97 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102fe9 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0102fe9:	6a 00                	push   $0x0
+  pushl $145
+c0102feb:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0102ff0:	e9 8b fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0102ff5 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c0102ff5:	6a 00                	push   $0x0
+  pushl $146
+c0102ff7:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0102ffc:	e9 7f fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103001 <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c0103001:	6a 00                	push   $0x0
+  pushl $147
+c0103003:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0103008:	e9 73 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c010300d <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c010300d:	6a 00                	push   $0x0
+  pushl $148
+c010300f:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c0103014:	e9 67 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103019 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0103019:	6a 00                	push   $0x0
+  pushl $149
+c010301b:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c0103020:	e9 5b fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103025 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c0103025:	6a 00                	push   $0x0
+  pushl $150
+c0103027:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c010302c:	e9 4f fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103031 <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c0103031:	6a 00                	push   $0x0
+  pushl $151
+c0103033:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c0103038:	e9 43 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c010303d <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c010303d:	6a 00                	push   $0x0
+  pushl $152
+c010303f:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c0103044:	e9 37 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103049 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c0103049:	6a 00                	push   $0x0
+  pushl $153
+c010304b:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c0103050:	e9 2b fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103055 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c0103055:	6a 00                	push   $0x0
+  pushl $154
+c0103057:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c010305c:	e9 1f fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103061 <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c0103061:	6a 00                	push   $0x0
+  pushl $155
+c0103063:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c0103068:	e9 13 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c010306d <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c010306d:	6a 00                	push   $0x0
+  pushl $156
+c010306f:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c0103074:	e9 07 fa ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103079 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c0103079:	6a 00                	push   $0x0
+  pushl $157
+c010307b:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c0103080:	e9 fb f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103085 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c0103085:	6a 00                	push   $0x0
+  pushl $158
+c0103087:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c010308c:	e9 ef f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103091 <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c0103091:	6a 00                	push   $0x0
+  pushl $159
+c0103093:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c0103098:	e9 e3 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010309d <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c010309d:	6a 00                	push   $0x0
+  pushl $160
+c010309f:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c01030a4:	e9 d7 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030a9 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c01030a9:	6a 00                	push   $0x0
+  pushl $161
+c01030ab:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c01030b0:	e9 cb f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030b5 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c01030b5:	6a 00                	push   $0x0
+  pushl $162
+c01030b7:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c01030bc:	e9 bf f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030c1 <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c01030c1:	6a 00                	push   $0x0
+  pushl $163
+c01030c3:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c01030c8:	e9 b3 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030cd <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c01030cd:	6a 00                	push   $0x0
+  pushl $164
+c01030cf:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c01030d4:	e9 a7 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030d9 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c01030d9:	6a 00                	push   $0x0
+  pushl $165
+c01030db:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c01030e0:	e9 9b f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030e5 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c01030e5:	6a 00                	push   $0x0
+  pushl $166
+c01030e7:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c01030ec:	e9 8f f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030f1 <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c01030f1:	6a 00                	push   $0x0
+  pushl $167
+c01030f3:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c01030f8:	e9 83 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01030fd <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c01030fd:	6a 00                	push   $0x0
+  pushl $168
+c01030ff:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c0103104:	e9 77 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103109 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0103109:	6a 00                	push   $0x0
+  pushl $169
+c010310b:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c0103110:	e9 6b f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103115 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c0103115:	6a 00                	push   $0x0
+  pushl $170
+c0103117:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c010311c:	e9 5f f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103121 <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c0103121:	6a 00                	push   $0x0
+  pushl $171
+c0103123:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c0103128:	e9 53 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010312d <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c010312d:	6a 00                	push   $0x0
+  pushl $172
+c010312f:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c0103134:	e9 47 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103139 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c0103139:	6a 00                	push   $0x0
+  pushl $173
+c010313b:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c0103140:	e9 3b f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103145 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c0103145:	6a 00                	push   $0x0
+  pushl $174
+c0103147:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c010314c:	e9 2f f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103151 <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c0103151:	6a 00                	push   $0x0
+  pushl $175
+c0103153:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c0103158:	e9 23 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010315d <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c010315d:	6a 00                	push   $0x0
+  pushl $176
+c010315f:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c0103164:	e9 17 f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103169 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c0103169:	6a 00                	push   $0x0
+  pushl $177
+c010316b:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c0103170:	e9 0b f9 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103175 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c0103175:	6a 00                	push   $0x0
+  pushl $178
+c0103177:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c010317c:	e9 ff f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103181 <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c0103181:	6a 00                	push   $0x0
+  pushl $179
+c0103183:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c0103188:	e9 f3 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010318d <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c010318d:	6a 00                	push   $0x0
+  pushl $180
+c010318f:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c0103194:	e9 e7 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103199 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c0103199:	6a 00                	push   $0x0
+  pushl $181
+c010319b:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c01031a0:	e9 db f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031a5 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c01031a5:	6a 00                	push   $0x0
+  pushl $182
+c01031a7:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c01031ac:	e9 cf f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031b1 <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c01031b1:	6a 00                	push   $0x0
+  pushl $183
+c01031b3:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c01031b8:	e9 c3 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031bd <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c01031bd:	6a 00                	push   $0x0
+  pushl $184
+c01031bf:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c01031c4:	e9 b7 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031c9 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c01031c9:	6a 00                	push   $0x0
+  pushl $185
+c01031cb:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c01031d0:	e9 ab f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031d5 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c01031d5:	6a 00                	push   $0x0
+  pushl $186
+c01031d7:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c01031dc:	e9 9f f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031e1 <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c01031e1:	6a 00                	push   $0x0
+  pushl $187
+c01031e3:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c01031e8:	e9 93 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031ed <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c01031ed:	6a 00                	push   $0x0
+  pushl $188
+c01031ef:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c01031f4:	e9 87 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01031f9 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c01031f9:	6a 00                	push   $0x0
+  pushl $189
+c01031fb:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c0103200:	e9 7b f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103205 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c0103205:	6a 00                	push   $0x0
+  pushl $190
+c0103207:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c010320c:	e9 6f f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103211 <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c0103211:	6a 00                	push   $0x0
+  pushl $191
+c0103213:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0103218:	e9 63 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010321d <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c010321d:	6a 00                	push   $0x0
+  pushl $192
+c010321f:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c0103224:	e9 57 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103229 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c0103229:	6a 00                	push   $0x0
+  pushl $193
+c010322b:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c0103230:	e9 4b f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103235 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c0103235:	6a 00                	push   $0x0
+  pushl $194
+c0103237:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c010323c:	e9 3f f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103241 <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c0103241:	6a 00                	push   $0x0
+  pushl $195
+c0103243:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c0103248:	e9 33 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010324d <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c010324d:	6a 00                	push   $0x0
+  pushl $196
+c010324f:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c0103254:	e9 27 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103259 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c0103259:	6a 00                	push   $0x0
+  pushl $197
+c010325b:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c0103260:	e9 1b f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103265 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c0103265:	6a 00                	push   $0x0
+  pushl $198
+c0103267:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c010326c:	e9 0f f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103271 <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c0103271:	6a 00                	push   $0x0
+  pushl $199
+c0103273:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c0103278:	e9 03 f8 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010327d <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c010327d:	6a 00                	push   $0x0
+  pushl $200
+c010327f:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c0103284:	e9 f7 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103289 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c0103289:	6a 00                	push   $0x0
+  pushl $201
+c010328b:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c0103290:	e9 eb f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103295 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c0103295:	6a 00                	push   $0x0
+  pushl $202
+c0103297:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c010329c:	e9 df f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032a1 <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c01032a1:	6a 00                	push   $0x0
+  pushl $203
+c01032a3:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c01032a8:	e9 d3 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032ad <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c01032ad:	6a 00                	push   $0x0
+  pushl $204
+c01032af:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c01032b4:	e9 c7 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032b9 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c01032b9:	6a 00                	push   $0x0
+  pushl $205
+c01032bb:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c01032c0:	e9 bb f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032c5 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c01032c5:	6a 00                	push   $0x0
+  pushl $206
+c01032c7:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c01032cc:	e9 af f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032d1 <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c01032d1:	6a 00                	push   $0x0
+  pushl $207
+c01032d3:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c01032d8:	e9 a3 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032dd <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c01032dd:	6a 00                	push   $0x0
+  pushl $208
+c01032df:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c01032e4:	e9 97 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032e9 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c01032e9:	6a 00                	push   $0x0
+  pushl $209
+c01032eb:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c01032f0:	e9 8b f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01032f5 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c01032f5:	6a 00                	push   $0x0
+  pushl $210
+c01032f7:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c01032fc:	e9 7f f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103301 <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c0103301:	6a 00                	push   $0x0
+  pushl $211
+c0103303:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c0103308:	e9 73 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010330d <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c010330d:	6a 00                	push   $0x0
+  pushl $212
+c010330f:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c0103314:	e9 67 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103319 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c0103319:	6a 00                	push   $0x0
+  pushl $213
+c010331b:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c0103320:	e9 5b f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103325 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c0103325:	6a 00                	push   $0x0
+  pushl $214
+c0103327:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c010332c:	e9 4f f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103331 <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c0103331:	6a 00                	push   $0x0
+  pushl $215
+c0103333:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c0103338:	e9 43 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010333d <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c010333d:	6a 00                	push   $0x0
+  pushl $216
+c010333f:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c0103344:	e9 37 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103349 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c0103349:	6a 00                	push   $0x0
+  pushl $217
+c010334b:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c0103350:	e9 2b f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103355 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c0103355:	6a 00                	push   $0x0
+  pushl $218
+c0103357:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c010335c:	e9 1f f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103361 <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c0103361:	6a 00                	push   $0x0
+  pushl $219
+c0103363:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c0103368:	e9 13 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010336d <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c010336d:	6a 00                	push   $0x0
+  pushl $220
+c010336f:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c0103374:	e9 07 f7 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103379 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c0103379:	6a 00                	push   $0x0
+  pushl $221
+c010337b:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c0103380:	e9 fb f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103385 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c0103385:	6a 00                	push   $0x0
+  pushl $222
+c0103387:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c010338c:	e9 ef f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103391 <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c0103391:	6a 00                	push   $0x0
+  pushl $223
+c0103393:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c0103398:	e9 e3 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010339d <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c010339d:	6a 00                	push   $0x0
+  pushl $224
+c010339f:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c01033a4:	e9 d7 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033a9 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c01033a9:	6a 00                	push   $0x0
+  pushl $225
+c01033ab:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c01033b0:	e9 cb f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033b5 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c01033b5:	6a 00                	push   $0x0
+  pushl $226
+c01033b7:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c01033bc:	e9 bf f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033c1 <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c01033c1:	6a 00                	push   $0x0
+  pushl $227
+c01033c3:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c01033c8:	e9 b3 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033cd <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c01033cd:	6a 00                	push   $0x0
+  pushl $228
+c01033cf:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c01033d4:	e9 a7 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033d9 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c01033d9:	6a 00                	push   $0x0
+  pushl $229
+c01033db:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c01033e0:	e9 9b f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033e5 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c01033e5:	6a 00                	push   $0x0
+  pushl $230
+c01033e7:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c01033ec:	e9 8f f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033f1 <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c01033f1:	6a 00                	push   $0x0
+  pushl $231
+c01033f3:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c01033f8:	e9 83 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01033fd <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c01033fd:	6a 00                	push   $0x0
+  pushl $232
+c01033ff:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c0103404:	e9 77 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103409 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c0103409:	6a 00                	push   $0x0
+  pushl $233
+c010340b:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c0103410:	e9 6b f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103415 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c0103415:	6a 00                	push   $0x0
+  pushl $234
+c0103417:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c010341c:	e9 5f f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103421 <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c0103421:	6a 00                	push   $0x0
+  pushl $235
+c0103423:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c0103428:	e9 53 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010342d <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c010342d:	6a 00                	push   $0x0
+  pushl $236
+c010342f:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c0103434:	e9 47 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103439 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c0103439:	6a 00                	push   $0x0
+  pushl $237
+c010343b:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c0103440:	e9 3b f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103445 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c0103445:	6a 00                	push   $0x0
+  pushl $238
+c0103447:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c010344c:	e9 2f f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103451 <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c0103451:	6a 00                	push   $0x0
+  pushl $239
+c0103453:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c0103458:	e9 23 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010345d <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c010345d:	6a 00                	push   $0x0
+  pushl $240
+c010345f:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c0103464:	e9 17 f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103469 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c0103469:	6a 00                	push   $0x0
+  pushl $241
+c010346b:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c0103470:	e9 0b f6 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103475 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c0103475:	6a 00                	push   $0x0
+  pushl $242
+c0103477:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c010347c:	e9 ff f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103481 <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c0103481:	6a 00                	push   $0x0
+  pushl $243
+c0103483:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c0103488:	e9 f3 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010348d <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c010348d:	6a 00                	push   $0x0
+  pushl $244
+c010348f:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c0103494:	e9 e7 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103499 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c0103499:	6a 00                	push   $0x0
+  pushl $245
+c010349b:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c01034a0:	e9 db f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034a5 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c01034a5:	6a 00                	push   $0x0
+  pushl $246
+c01034a7:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c01034ac:	e9 cf f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034b1 <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c01034b1:	6a 00                	push   $0x0
+  pushl $247
+c01034b3:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c01034b8:	e9 c3 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034bd <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c01034bd:	6a 00                	push   $0x0
+  pushl $248
+c01034bf:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c01034c4:	e9 b7 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034c9 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c01034c9:	6a 00                	push   $0x0
+  pushl $249
+c01034cb:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c01034d0:	e9 ab f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034d5 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c01034d5:	6a 00                	push   $0x0
+  pushl $250
+c01034d7:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c01034dc:	e9 9f f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034e1 <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c01034e1:	6a 00                	push   $0x0
+  pushl $251
+c01034e3:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c01034e8:	e9 93 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034ed <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c01034ed:	6a 00                	push   $0x0
+  pushl $252
+c01034ef:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c01034f4:	e9 87 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c01034f9 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c01034f9:	6a 00                	push   $0x0
+  pushl $253
+c01034fb:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c0103500:	e9 7b f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103505 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c0103505:	6a 00                	push   $0x0
+  pushl $254
+c0103507:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c010350c:	e9 6f f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c0103511 <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c0103511:	6a 00                	push   $0x0
+  pushl $255
+c0103513:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c0103518:	e9 63 f5 ff ff       	jmp    c0102a80 <__alltraps>
+
+c010351d <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c010351d:	55                   	push   %ebp
+c010351e:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0103520:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103523:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0103528:	29 c2                	sub    %eax,%edx
+c010352a:	89 d0                	mov    %edx,%eax
+c010352c:	c1 f8 05             	sar    $0x5,%eax
+}
+c010352f:	5d                   	pop    %ebp
+c0103530:	c3                   	ret    
+
+c0103531 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0103531:	55                   	push   %ebp
+c0103532:	89 e5                	mov    %esp,%ebp
+c0103534:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0103537:	8b 45 08             	mov    0x8(%ebp),%eax
+c010353a:	89 04 24             	mov    %eax,(%esp)
+c010353d:	e8 db ff ff ff       	call   c010351d <page2ppn>
+c0103542:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0103545:	c9                   	leave  
+c0103546:	c3                   	ret    
+
+c0103547 <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c0103547:	55                   	push   %ebp
+c0103548:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c010354a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010354d:	8b 00                	mov    (%eax),%eax
+}
+c010354f:	5d                   	pop    %ebp
+c0103550:	c3                   	ret    
+
+c0103551 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0103551:	55                   	push   %ebp
+c0103552:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0103554:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103557:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010355a:	89 10                	mov    %edx,(%eax)
+}
+c010355c:	5d                   	pop    %ebp
+c010355d:	c3                   	ret    
+
+c010355e <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c010355e:	55                   	push   %ebp
+c010355f:	89 e5                	mov    %esp,%ebp
+c0103561:	83 ec 10             	sub    $0x10,%esp
+c0103564:	c7 45 fc 78 10 1a c0 	movl   $0xc01a1078,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010356b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010356e:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0103571:	89 50 04             	mov    %edx,0x4(%eax)
+c0103574:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103577:	8b 50 04             	mov    0x4(%eax),%edx
+c010357a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010357d:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c010357f:	c7 05 80 10 1a c0 00 	movl   $0x0,0xc01a1080
+c0103586:	00 00 00 
+}
+c0103589:	c9                   	leave  
+c010358a:	c3                   	ret    
+
+c010358b <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c010358b:	55                   	push   %ebp
+c010358c:	89 e5                	mov    %esp,%ebp
+c010358e:	83 ec 48             	sub    $0x48,%esp
+    assert(n > 0);
+c0103591:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0103595:	75 24                	jne    c01035bb <default_init_memmap+0x30>
+c0103597:	c7 44 24 0c f0 c7 10 	movl   $0xc010c7f0,0xc(%esp)
+c010359e:	c0 
+c010359f:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01035a6:	c0 
+c01035a7:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
+c01035ae:	00 
+c01035af:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01035b6:	e8 26 d8 ff ff       	call   c0100de1 <__panic>
+    struct Page *p = base;
+c01035bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c01035c1:	eb 7d                	jmp    c0103640 <default_init_memmap+0xb5>
+        assert(PageReserved(p));
+c01035c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035c6:	83 c0 04             	add    $0x4,%eax
+c01035c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+c01035d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01035d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01035d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01035d9:	0f a3 10             	bt     %edx,(%eax)
+c01035dc:	19 c0                	sbb    %eax,%eax
+c01035de:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return oldbit != 0;
+c01035e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01035e5:	0f 95 c0             	setne  %al
+c01035e8:	0f b6 c0             	movzbl %al,%eax
+c01035eb:	85 c0                	test   %eax,%eax
+c01035ed:	75 24                	jne    c0103613 <default_init_memmap+0x88>
+c01035ef:	c7 44 24 0c 21 c8 10 	movl   $0xc010c821,0xc(%esp)
+c01035f6:	c0 
+c01035f7:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01035fe:	c0 
+c01035ff:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0103606:	00 
+c0103607:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010360e:	e8 ce d7 ff ff       	call   c0100de1 <__panic>
+        p->flags = p->property = 0;
+c0103613:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103616:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c010361d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103620:	8b 50 08             	mov    0x8(%eax),%edx
+c0103623:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103626:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c0103629:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0103630:	00 
+c0103631:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103634:	89 04 24             	mov    %eax,(%esp)
+c0103637:	e8 15 ff ff ff       	call   c0103551 <set_page_ref>
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c010363c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c0103640:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103643:	c1 e0 05             	shl    $0x5,%eax
+c0103646:	89 c2                	mov    %eax,%edx
+c0103648:	8b 45 08             	mov    0x8(%ebp),%eax
+c010364b:	01 d0                	add    %edx,%eax
+c010364d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103650:	0f 85 6d ff ff ff    	jne    c01035c3 <default_init_memmap+0x38>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c0103656:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103659:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010365c:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c010365f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103662:	83 c0 04             	add    $0x4,%eax
+c0103665:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c010366c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c010366f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103672:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103675:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c0103678:	8b 15 80 10 1a c0    	mov    0xc01a1080,%edx
+c010367e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103681:	01 d0                	add    %edx,%eax
+c0103683:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+    list_add_before(&free_list, &(base->page_link));
+c0103688:	8b 45 08             	mov    0x8(%ebp),%eax
+c010368b:	83 c0 0c             	add    $0xc,%eax
+c010368e:	c7 45 dc 78 10 1a c0 	movl   $0xc01a1078,-0x24(%ebp)
+c0103695:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0103698:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010369b:	8b 00                	mov    (%eax),%eax
+c010369d:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01036a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01036a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01036a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01036a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c01036ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01036af:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01036b2:	89 10                	mov    %edx,(%eax)
+c01036b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01036b7:	8b 10                	mov    (%eax),%edx
+c01036b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01036bc:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01036bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01036c2:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01036c5:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c01036c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01036cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01036ce:	89 10                	mov    %edx,(%eax)
+}
+c01036d0:	c9                   	leave  
+c01036d1:	c3                   	ret    
+
+c01036d2 <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c01036d2:	55                   	push   %ebp
+c01036d3:	89 e5                	mov    %esp,%ebp
+c01036d5:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c01036d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01036dc:	75 24                	jne    c0103702 <default_alloc_pages+0x30>
+c01036de:	c7 44 24 0c f0 c7 10 	movl   $0xc010c7f0,0xc(%esp)
+c01036e5:	c0 
+c01036e6:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01036ed:	c0 
+c01036ee:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
+c01036f5:	00 
+c01036f6:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01036fd:	e8 df d6 ff ff       	call   c0100de1 <__panic>
+    if (n > nr_free) {
+c0103702:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0103707:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010370a:	73 0a                	jae    c0103716 <default_alloc_pages+0x44>
+        return NULL;
+c010370c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0103711:	e9 36 01 00 00       	jmp    c010384c <default_alloc_pages+0x17a>
+    }
+    struct Page *page = NULL;
+c0103716:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c010371d:	c7 45 f0 78 10 1a c0 	movl   $0xc01a1078,-0x10(%ebp)
+    // TODO: optimize (next-fit)
+    while ((le = list_next(le)) != &free_list) {
+c0103724:	eb 1c                	jmp    c0103742 <default_alloc_pages+0x70>
+        struct Page *p = le2page(le, page_link);
+c0103726:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103729:	83 e8 0c             	sub    $0xc,%eax
+c010372c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (p->property >= n) {
+c010372f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103732:	8b 40 08             	mov    0x8(%eax),%eax
+c0103735:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0103738:	72 08                	jb     c0103742 <default_alloc_pages+0x70>
+            page = p;
+c010373a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010373d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c0103740:	eb 18                	jmp    c010375a <default_alloc_pages+0x88>
+c0103742:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103745:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103748:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010374b:	8b 40 04             	mov    0x4(%eax),%eax
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    // TODO: optimize (next-fit)
+    while ((le = list_next(le)) != &free_list) {
+c010374e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103751:	81 7d f0 78 10 1a c0 	cmpl   $0xc01a1078,-0x10(%ebp)
+c0103758:	75 cc                	jne    c0103726 <default_alloc_pages+0x54>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c010375a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010375e:	0f 84 e5 00 00 00    	je     c0103849 <default_alloc_pages+0x177>
+        if (page->property > n) {
+c0103764:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103767:	8b 40 08             	mov    0x8(%eax),%eax
+c010376a:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010376d:	0f 86 85 00 00 00    	jbe    c01037f8 <default_alloc_pages+0x126>
+            struct Page *p = page + n;
+c0103773:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103776:	c1 e0 05             	shl    $0x5,%eax
+c0103779:	89 c2                	mov    %eax,%edx
+c010377b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010377e:	01 d0                	add    %edx,%eax
+c0103780:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            p->property = page->property - n;
+c0103783:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103786:	8b 40 08             	mov    0x8(%eax),%eax
+c0103789:	2b 45 08             	sub    0x8(%ebp),%eax
+c010378c:	89 c2                	mov    %eax,%edx
+c010378e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103791:	89 50 08             	mov    %edx,0x8(%eax)
+            SetPageProperty(p);
+c0103794:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103797:	83 c0 04             	add    $0x4,%eax
+c010379a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c01037a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01037a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01037a7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01037aa:	0f ab 10             	bts    %edx,(%eax)
+            list_add_after(&(page->page_link), &(p->page_link));
+c01037ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01037b0:	83 c0 0c             	add    $0xc,%eax
+c01037b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01037b6:	83 c2 0c             	add    $0xc,%edx
+c01037b9:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c01037bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c01037bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01037c2:	8b 40 04             	mov    0x4(%eax),%eax
+c01037c5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01037c8:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c01037cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01037ce:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c01037d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c01037d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01037d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01037da:	89 10                	mov    %edx,(%eax)
+c01037dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01037df:	8b 10                	mov    (%eax),%edx
+c01037e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01037e4:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01037e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01037ea:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c01037ed:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c01037f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01037f3:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01037f6:	89 10                	mov    %edx,(%eax)
+        }
+        list_del(&(page->page_link));
+c01037f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01037fb:	83 c0 0c             	add    $0xc,%eax
+c01037fe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103801:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103804:	8b 40 04             	mov    0x4(%eax),%eax
+c0103807:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c010380a:	8b 12                	mov    (%edx),%edx
+c010380c:	89 55 c0             	mov    %edx,-0x40(%ebp)
+c010380f:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103812:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103815:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0103818:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010381b:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010381e:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0103821:	89 10                	mov    %edx,(%eax)
+        nr_free -= n;
+c0103823:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0103828:	2b 45 08             	sub    0x8(%ebp),%eax
+c010382b:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+        ClearPageProperty(page);
+c0103830:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103833:	83 c0 04             	add    $0x4,%eax
+c0103836:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
+c010383d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103840:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0103843:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0103846:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c0103849:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010384c:	c9                   	leave  
+c010384d:	c3                   	ret    
+
+c010384e <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c010384e:	55                   	push   %ebp
+c010384f:	89 e5                	mov    %esp,%ebp
+c0103851:	81 ec 98 00 00 00    	sub    $0x98,%esp
+    assert(n > 0);
+c0103857:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010385b:	75 24                	jne    c0103881 <default_free_pages+0x33>
+c010385d:	c7 44 24 0c f0 c7 10 	movl   $0xc010c7f0,0xc(%esp)
+c0103864:	c0 
+c0103865:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010386c:	c0 
+c010386d:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c0103874:	00 
+c0103875:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010387c:	e8 60 d5 ff ff       	call   c0100de1 <__panic>
+    struct Page *p = base;
+c0103881:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103884:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0103887:	e9 9d 00 00 00       	jmp    c0103929 <default_free_pages+0xdb>
+        assert(!PageReserved(p) && !PageProperty(p));
+c010388c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010388f:	83 c0 04             	add    $0x4,%eax
+c0103892:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0103899:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010389c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010389f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01038a2:	0f a3 10             	bt     %edx,(%eax)
+c01038a5:	19 c0                	sbb    %eax,%eax
+c01038a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return oldbit != 0;
+c01038aa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01038ae:	0f 95 c0             	setne  %al
+c01038b1:	0f b6 c0             	movzbl %al,%eax
+c01038b4:	85 c0                	test   %eax,%eax
+c01038b6:	75 2c                	jne    c01038e4 <default_free_pages+0x96>
+c01038b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01038bb:	83 c0 04             	add    $0x4,%eax
+c01038be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c01038c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01038c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01038cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01038ce:	0f a3 10             	bt     %edx,(%eax)
+c01038d1:	19 c0                	sbb    %eax,%eax
+c01038d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    return oldbit != 0;
+c01038d6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01038da:	0f 95 c0             	setne  %al
+c01038dd:	0f b6 c0             	movzbl %al,%eax
+c01038e0:	85 c0                	test   %eax,%eax
+c01038e2:	74 24                	je     c0103908 <default_free_pages+0xba>
+c01038e4:	c7 44 24 0c 34 c8 10 	movl   $0xc010c834,0xc(%esp)
+c01038eb:	c0 
+c01038ec:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01038f3:	c0 
+c01038f4:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
+c01038fb:	00 
+c01038fc:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103903:	e8 d9 d4 ff ff       	call   c0100de1 <__panic>
+        p->flags = 0;
+c0103908:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010390b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c0103912:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0103919:	00 
+c010391a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010391d:	89 04 24             	mov    %eax,(%esp)
+c0103920:	e8 2c fc ff ff       	call   c0103551 <set_page_ref>
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c0103925:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c0103929:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010392c:	c1 e0 05             	shl    $0x5,%eax
+c010392f:	89 c2                	mov    %eax,%edx
+c0103931:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103934:	01 d0                	add    %edx,%eax
+c0103936:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103939:	0f 85 4d ff ff ff    	jne    c010388c <default_free_pages+0x3e>
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c010393f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103942:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0103945:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c0103948:	8b 45 08             	mov    0x8(%ebp),%eax
+c010394b:	83 c0 04             	add    $0x4,%eax
+c010394e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0103955:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103958:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010395b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010395e:	0f ab 10             	bts    %edx,(%eax)
+c0103961:	c7 45 cc 78 10 1a c0 	movl   $0xc01a1078,-0x34(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103968:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010396b:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c010396e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0103971:	e9 fa 00 00 00       	jmp    c0103a70 <default_free_pages+0x222>
+        p = le2page(le, page_link);
+c0103976:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103979:	83 e8 0c             	sub    $0xc,%eax
+c010397c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010397f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103982:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103985:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103988:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c010398b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        // TODO: optimize
+        if (base + base->property == p) {
+c010398e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103991:	8b 40 08             	mov    0x8(%eax),%eax
+c0103994:	c1 e0 05             	shl    $0x5,%eax
+c0103997:	89 c2                	mov    %eax,%edx
+c0103999:	8b 45 08             	mov    0x8(%ebp),%eax
+c010399c:	01 d0                	add    %edx,%eax
+c010399e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01039a1:	75 5a                	jne    c01039fd <default_free_pages+0x1af>
+            base->property += p->property;
+c01039a3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039a6:	8b 50 08             	mov    0x8(%eax),%edx
+c01039a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039ac:	8b 40 08             	mov    0x8(%eax),%eax
+c01039af:	01 c2                	add    %eax,%edx
+c01039b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039b4:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c01039b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039ba:	83 c0 04             	add    $0x4,%eax
+c01039bd:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c01039c4:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01039c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01039ca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c01039cd:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c01039d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039d3:	83 c0 0c             	add    $0xc,%eax
+c01039d6:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01039d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c01039dc:	8b 40 04             	mov    0x4(%eax),%eax
+c01039df:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01039e2:	8b 12                	mov    (%edx),%edx
+c01039e4:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c01039e7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01039ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01039ed:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01039f0:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01039f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01039f6:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c01039f9:	89 10                	mov    %edx,(%eax)
+c01039fb:	eb 73                	jmp    c0103a70 <default_free_pages+0x222>
+        }
+        else if (p + p->property == base) {
+c01039fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a00:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a03:	c1 e0 05             	shl    $0x5,%eax
+c0103a06:	89 c2                	mov    %eax,%edx
+c0103a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a0b:	01 d0                	add    %edx,%eax
+c0103a0d:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0103a10:	75 5e                	jne    c0103a70 <default_free_pages+0x222>
+            p->property += base->property;
+c0103a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a15:	8b 50 08             	mov    0x8(%eax),%edx
+c0103a18:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a1b:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a1e:	01 c2                	add    %eax,%edx
+c0103a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a23:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c0103a26:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a29:	83 c0 04             	add    $0x4,%eax
+c0103a2c:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0103a33:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c0103a36:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103a39:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0103a3c:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c0103a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a42:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c0103a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a48:	83 c0 0c             	add    $0xc,%eax
+c0103a4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103a4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103a51:	8b 40 04             	mov    0x4(%eax),%eax
+c0103a54:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0103a57:	8b 12                	mov    (%edx),%edx
+c0103a59:	89 55 a4             	mov    %edx,-0x5c(%ebp)
+c0103a5c:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103a5f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0103a62:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0103a65:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0103a68:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103a6b:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0103a6e:	89 10                	mov    %edx,(%eax)
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+c0103a70:	81 7d f0 78 10 1a c0 	cmpl   $0xc01a1078,-0x10(%ebp)
+c0103a77:	0f 85 f9 fe ff ff    	jne    c0103976 <default_free_pages+0x128>
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+c0103a7d:	8b 15 80 10 1a c0    	mov    0xc01a1080,%edx
+c0103a83:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103a86:	01 d0                	add    %edx,%eax
+c0103a88:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+c0103a8d:	c7 45 9c 78 10 1a c0 	movl   $0xc01a1078,-0x64(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103a94:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0103a97:	8b 40 04             	mov    0x4(%eax),%eax
+    le = list_next(&free_list);
+c0103a9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0103a9d:	eb 68                	jmp    c0103b07 <default_free_pages+0x2b9>
+        p = le2page(le, page_link);
+c0103a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103aa2:	83 e8 0c             	sub    $0xc,%eax
+c0103aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (base + base->property <= p) {
+c0103aa8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103aab:	8b 40 08             	mov    0x8(%eax),%eax
+c0103aae:	c1 e0 05             	shl    $0x5,%eax
+c0103ab1:	89 c2                	mov    %eax,%edx
+c0103ab3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103ab6:	01 d0                	add    %edx,%eax
+c0103ab8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103abb:	77 3b                	ja     c0103af8 <default_free_pages+0x2aa>
+            assert(base + base->property != p);
+c0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103ac0:	8b 40 08             	mov    0x8(%eax),%eax
+c0103ac3:	c1 e0 05             	shl    $0x5,%eax
+c0103ac6:	89 c2                	mov    %eax,%edx
+c0103ac8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103acb:	01 d0                	add    %edx,%eax
+c0103acd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103ad0:	75 24                	jne    c0103af6 <default_free_pages+0x2a8>
+c0103ad2:	c7 44 24 0c 59 c8 10 	movl   $0xc010c859,0xc(%esp)
+c0103ad9:	c0 
+c0103ada:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103ae1:	c0 
+c0103ae2:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
+c0103ae9:	00 
+c0103aea:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103af1:	e8 eb d2 ff ff       	call   c0100de1 <__panic>
+            break;
+c0103af6:	eb 18                	jmp    c0103b10 <default_free_pages+0x2c2>
+c0103af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103afb:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103afe:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103b01:	8b 40 04             	mov    0x4(%eax),%eax
+        }
+        le = list_next(le);
+c0103b04:	89 45 f0             	mov    %eax,-0x10(%ebp)
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+    le = list_next(&free_list);
+    while (le != &free_list) {
+c0103b07:	81 7d f0 78 10 1a c0 	cmpl   $0xc01a1078,-0x10(%ebp)
+c0103b0e:	75 8f                	jne    c0103a9f <default_free_pages+0x251>
+            assert(base + base->property != p);
+            break;
+        }
+        le = list_next(le);
+    }
+    list_add_before(le, &(base->page_link));
+c0103b10:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b13:	8d 50 0c             	lea    0xc(%eax),%edx
+c0103b16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b19:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0103b1c:	89 55 90             	mov    %edx,-0x70(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0103b1f:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b22:	8b 00                	mov    (%eax),%eax
+c0103b24:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0103b27:	89 55 8c             	mov    %edx,-0x74(%ebp)
+c0103b2a:	89 45 88             	mov    %eax,-0x78(%ebp)
+c0103b2d:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b30:	89 45 84             	mov    %eax,-0x7c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103b33:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b36:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c0103b39:	89 10                	mov    %edx,(%eax)
+c0103b3b:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b3e:	8b 10                	mov    (%eax),%edx
+c0103b40:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0103b43:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103b46:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103b49:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0103b4c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103b4f:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103b52:	8b 55 88             	mov    -0x78(%ebp),%edx
+c0103b55:	89 10                	mov    %edx,(%eax)
+}
+c0103b57:	c9                   	leave  
+c0103b58:	c3                   	ret    
+
+c0103b59 <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c0103b59:	55                   	push   %ebp
+c0103b5a:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0103b5c:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+}
+c0103b61:	5d                   	pop    %ebp
+c0103b62:	c3                   	ret    
+
+c0103b63 <basic_check>:
+
+static void
+basic_check(void) {
+c0103b63:	55                   	push   %ebp
+c0103b64:	89 e5                	mov    %esp,%ebp
+c0103b66:	83 ec 48             	sub    $0x48,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c0103b69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0103b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103b73:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b79:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c0103b7c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103b83:	e8 dc 15 00 00       	call   c0105164 <alloc_pages>
+c0103b88:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103b8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103b8f:	75 24                	jne    c0103bb5 <basic_check+0x52>
+c0103b91:	c7 44 24 0c 74 c8 10 	movl   $0xc010c874,0xc(%esp)
+c0103b98:	c0 
+c0103b99:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103ba0:	c0 
+c0103ba1:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
+c0103ba8:	00 
+c0103ba9:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103bb0:	e8 2c d2 ff ff       	call   c0100de1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103bb5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103bbc:	e8 a3 15 00 00       	call   c0105164 <alloc_pages>
+c0103bc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103bc4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103bc8:	75 24                	jne    c0103bee <basic_check+0x8b>
+c0103bca:	c7 44 24 0c 90 c8 10 	movl   $0xc010c890,0xc(%esp)
+c0103bd1:	c0 
+c0103bd2:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103bd9:	c0 
+c0103bda:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c0103be1:	00 
+c0103be2:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103be9:	e8 f3 d1 ff ff       	call   c0100de1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103bee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103bf5:	e8 6a 15 00 00       	call   c0105164 <alloc_pages>
+c0103bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103bfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103c01:	75 24                	jne    c0103c27 <basic_check+0xc4>
+c0103c03:	c7 44 24 0c ac c8 10 	movl   $0xc010c8ac,0xc(%esp)
+c0103c0a:	c0 
+c0103c0b:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103c12:	c0 
+c0103c13:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
+c0103c1a:	00 
+c0103c1b:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103c22:	e8 ba d1 ff ff       	call   c0100de1 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c0103c27:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0103c2d:	74 10                	je     c0103c3f <basic_check+0xdc>
+c0103c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c35:	74 08                	je     c0103c3f <basic_check+0xdc>
+c0103c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103c3a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c3d:	75 24                	jne    c0103c63 <basic_check+0x100>
+c0103c3f:	c7 44 24 0c c8 c8 10 	movl   $0xc010c8c8,0xc(%esp)
+c0103c46:	c0 
+c0103c47:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103c4e:	c0 
+c0103c4f:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
+c0103c56:	00 
+c0103c57:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103c5e:	e8 7e d1 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0103c63:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c66:	89 04 24             	mov    %eax,(%esp)
+c0103c69:	e8 d9 f8 ff ff       	call   c0103547 <page_ref>
+c0103c6e:	85 c0                	test   %eax,%eax
+c0103c70:	75 1e                	jne    c0103c90 <basic_check+0x12d>
+c0103c72:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103c75:	89 04 24             	mov    %eax,(%esp)
+c0103c78:	e8 ca f8 ff ff       	call   c0103547 <page_ref>
+c0103c7d:	85 c0                	test   %eax,%eax
+c0103c7f:	75 0f                	jne    c0103c90 <basic_check+0x12d>
+c0103c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103c84:	89 04 24             	mov    %eax,(%esp)
+c0103c87:	e8 bb f8 ff ff       	call   c0103547 <page_ref>
+c0103c8c:	85 c0                	test   %eax,%eax
+c0103c8e:	74 24                	je     c0103cb4 <basic_check+0x151>
+c0103c90:	c7 44 24 0c ec c8 10 	movl   $0xc010c8ec,0xc(%esp)
+c0103c97:	c0 
+c0103c98:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103c9f:	c0 
+c0103ca0:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
+c0103ca7:	00 
+c0103ca8:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103caf:	e8 2d d1 ff ff       	call   c0100de1 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c0103cb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103cb7:	89 04 24             	mov    %eax,(%esp)
+c0103cba:	e8 72 f8 ff ff       	call   c0103531 <page2pa>
+c0103cbf:	8b 15 a0 ef 19 c0    	mov    0xc019efa0,%edx
+c0103cc5:	c1 e2 0c             	shl    $0xc,%edx
+c0103cc8:	39 d0                	cmp    %edx,%eax
+c0103cca:	72 24                	jb     c0103cf0 <basic_check+0x18d>
+c0103ccc:	c7 44 24 0c 28 c9 10 	movl   $0xc010c928,0xc(%esp)
+c0103cd3:	c0 
+c0103cd4:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103cdb:	c0 
+c0103cdc:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c0103ce3:	00 
+c0103ce4:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103ceb:	e8 f1 d0 ff ff       	call   c0100de1 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0103cf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103cf3:	89 04 24             	mov    %eax,(%esp)
+c0103cf6:	e8 36 f8 ff ff       	call   c0103531 <page2pa>
+c0103cfb:	8b 15 a0 ef 19 c0    	mov    0xc019efa0,%edx
+c0103d01:	c1 e2 0c             	shl    $0xc,%edx
+c0103d04:	39 d0                	cmp    %edx,%eax
+c0103d06:	72 24                	jb     c0103d2c <basic_check+0x1c9>
+c0103d08:	c7 44 24 0c 45 c9 10 	movl   $0xc010c945,0xc(%esp)
+c0103d0f:	c0 
+c0103d10:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103d17:	c0 
+c0103d18:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
+c0103d1f:	00 
+c0103d20:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103d27:	e8 b5 d0 ff ff       	call   c0100de1 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0103d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103d2f:	89 04 24             	mov    %eax,(%esp)
+c0103d32:	e8 fa f7 ff ff       	call   c0103531 <page2pa>
+c0103d37:	8b 15 a0 ef 19 c0    	mov    0xc019efa0,%edx
+c0103d3d:	c1 e2 0c             	shl    $0xc,%edx
+c0103d40:	39 d0                	cmp    %edx,%eax
+c0103d42:	72 24                	jb     c0103d68 <basic_check+0x205>
+c0103d44:	c7 44 24 0c 62 c9 10 	movl   $0xc010c962,0xc(%esp)
+c0103d4b:	c0 
+c0103d4c:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103d53:	c0 
+c0103d54:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
+c0103d5b:	00 
+c0103d5c:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103d63:	e8 79 d0 ff ff       	call   c0100de1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0103d68:	a1 78 10 1a c0       	mov    0xc01a1078,%eax
+c0103d6d:	8b 15 7c 10 1a c0    	mov    0xc01a107c,%edx
+c0103d73:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103d76:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103d79:	c7 45 e0 78 10 1a c0 	movl   $0xc01a1078,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0103d80:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103d83:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103d86:	89 50 04             	mov    %edx,0x4(%eax)
+c0103d89:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103d8c:	8b 50 04             	mov    0x4(%eax),%edx
+c0103d8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103d92:	89 10                	mov    %edx,(%eax)
+c0103d94:	c7 45 dc 78 10 1a c0 	movl   $0xc01a1078,-0x24(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0103d9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103d9e:	8b 40 04             	mov    0x4(%eax),%eax
+c0103da1:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0103da4:	0f 94 c0             	sete   %al
+c0103da7:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0103daa:	85 c0                	test   %eax,%eax
+c0103dac:	75 24                	jne    c0103dd2 <basic_check+0x26f>
+c0103dae:	c7 44 24 0c 7f c9 10 	movl   $0xc010c97f,0xc(%esp)
+c0103db5:	c0 
+c0103db6:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103dbd:	c0 
+c0103dbe:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
+c0103dc5:	00 
+c0103dc6:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103dcd:	e8 0f d0 ff ff       	call   c0100de1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0103dd2:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0103dd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    nr_free = 0;
+c0103dda:	c7 05 80 10 1a c0 00 	movl   $0x0,0xc01a1080
+c0103de1:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c0103de4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103deb:	e8 74 13 00 00       	call   c0105164 <alloc_pages>
+c0103df0:	85 c0                	test   %eax,%eax
+c0103df2:	74 24                	je     c0103e18 <basic_check+0x2b5>
+c0103df4:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c0103dfb:	c0 
+c0103dfc:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103e03:	c0 
+c0103e04:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c0103e0b:	00 
+c0103e0c:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103e13:	e8 c9 cf ff ff       	call   c0100de1 <__panic>
+
+    free_page(p0);
+c0103e18:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e1f:	00 
+c0103e20:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e23:	89 04 24             	mov    %eax,(%esp)
+c0103e26:	e8 a4 13 00 00       	call   c01051cf <free_pages>
+    free_page(p1);
+c0103e2b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e32:	00 
+c0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103e36:	89 04 24             	mov    %eax,(%esp)
+c0103e39:	e8 91 13 00 00       	call   c01051cf <free_pages>
+    free_page(p2);
+c0103e3e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e45:	00 
+c0103e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103e49:	89 04 24             	mov    %eax,(%esp)
+c0103e4c:	e8 7e 13 00 00       	call   c01051cf <free_pages>
+    assert(nr_free == 3);
+c0103e51:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0103e56:	83 f8 03             	cmp    $0x3,%eax
+c0103e59:	74 24                	je     c0103e7f <basic_check+0x31c>
+c0103e5b:	c7 44 24 0c ab c9 10 	movl   $0xc010c9ab,0xc(%esp)
+c0103e62:	c0 
+c0103e63:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103e6a:	c0 
+c0103e6b:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
+c0103e72:	00 
+c0103e73:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103e7a:	e8 62 cf ff ff       	call   c0100de1 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c0103e7f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103e86:	e8 d9 12 00 00       	call   c0105164 <alloc_pages>
+c0103e8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103e8e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103e92:	75 24                	jne    c0103eb8 <basic_check+0x355>
+c0103e94:	c7 44 24 0c 74 c8 10 	movl   $0xc010c874,0xc(%esp)
+c0103e9b:	c0 
+c0103e9c:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103ea3:	c0 
+c0103ea4:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
+c0103eab:	00 
+c0103eac:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103eb3:	e8 29 cf ff ff       	call   c0100de1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103eb8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103ebf:	e8 a0 12 00 00       	call   c0105164 <alloc_pages>
+c0103ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103ec7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103ecb:	75 24                	jne    c0103ef1 <basic_check+0x38e>
+c0103ecd:	c7 44 24 0c 90 c8 10 	movl   $0xc010c890,0xc(%esp)
+c0103ed4:	c0 
+c0103ed5:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103edc:	c0 
+c0103edd:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
+c0103ee4:	00 
+c0103ee5:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103eec:	e8 f0 ce ff ff       	call   c0100de1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103ef1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103ef8:	e8 67 12 00 00       	call   c0105164 <alloc_pages>
+c0103efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103f00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103f04:	75 24                	jne    c0103f2a <basic_check+0x3c7>
+c0103f06:	c7 44 24 0c ac c8 10 	movl   $0xc010c8ac,0xc(%esp)
+c0103f0d:	c0 
+c0103f0e:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103f15:	c0 
+c0103f16:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
+c0103f1d:	00 
+c0103f1e:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103f25:	e8 b7 ce ff ff       	call   c0100de1 <__panic>
+
+    assert(alloc_page() == NULL);
+c0103f2a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f31:	e8 2e 12 00 00       	call   c0105164 <alloc_pages>
+c0103f36:	85 c0                	test   %eax,%eax
+c0103f38:	74 24                	je     c0103f5e <basic_check+0x3fb>
+c0103f3a:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c0103f41:	c0 
+c0103f42:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103f49:	c0 
+c0103f4a:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
+c0103f51:	00 
+c0103f52:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103f59:	e8 83 ce ff ff       	call   c0100de1 <__panic>
+
+    free_page(p0);
+c0103f5e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103f65:	00 
+c0103f66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103f69:	89 04 24             	mov    %eax,(%esp)
+c0103f6c:	e8 5e 12 00 00       	call   c01051cf <free_pages>
+c0103f71:	c7 45 d8 78 10 1a c0 	movl   $0xc01a1078,-0x28(%ebp)
+c0103f78:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103f7b:	8b 40 04             	mov    0x4(%eax),%eax
+c0103f7e:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0103f81:	0f 94 c0             	sete   %al
+c0103f84:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0103f87:	85 c0                	test   %eax,%eax
+c0103f89:	74 24                	je     c0103faf <basic_check+0x44c>
+c0103f8b:	c7 44 24 0c b8 c9 10 	movl   $0xc010c9b8,0xc(%esp)
+c0103f92:	c0 
+c0103f93:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103f9a:	c0 
+c0103f9b:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
+c0103fa2:	00 
+c0103fa3:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103faa:	e8 32 ce ff ff       	call   c0100de1 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c0103faf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103fb6:	e8 a9 11 00 00       	call   c0105164 <alloc_pages>
+c0103fbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0103fbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103fc1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0103fc4:	74 24                	je     c0103fea <basic_check+0x487>
+c0103fc6:	c7 44 24 0c d0 c9 10 	movl   $0xc010c9d0,0xc(%esp)
+c0103fcd:	c0 
+c0103fce:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0103fd5:	c0 
+c0103fd6:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
+c0103fdd:	00 
+c0103fde:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0103fe5:	e8 f7 cd ff ff       	call   c0100de1 <__panic>
+    assert(alloc_page() == NULL);
+c0103fea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103ff1:	e8 6e 11 00 00       	call   c0105164 <alloc_pages>
+c0103ff6:	85 c0                	test   %eax,%eax
+c0103ff8:	74 24                	je     c010401e <basic_check+0x4bb>
+c0103ffa:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c0104001:	c0 
+c0104002:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104009:	c0 
+c010400a:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
+c0104011:	00 
+c0104012:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104019:	e8 c3 cd ff ff       	call   c0100de1 <__panic>
+
+    assert(nr_free == 0);
+c010401e:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0104023:	85 c0                	test   %eax,%eax
+c0104025:	74 24                	je     c010404b <basic_check+0x4e8>
+c0104027:	c7 44 24 0c e9 c9 10 	movl   $0xc010c9e9,0xc(%esp)
+c010402e:	c0 
+c010402f:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104036:	c0 
+c0104037:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
+c010403e:	00 
+c010403f:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104046:	e8 96 cd ff ff       	call   c0100de1 <__panic>
+    free_list = free_list_store;
+c010404b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010404e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0104051:	a3 78 10 1a c0       	mov    %eax,0xc01a1078
+c0104056:	89 15 7c 10 1a c0    	mov    %edx,0xc01a107c
+    nr_free = nr_free_store;
+c010405c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010405f:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+
+    free_page(p);
+c0104064:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010406b:	00 
+c010406c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010406f:	89 04 24             	mov    %eax,(%esp)
+c0104072:	e8 58 11 00 00       	call   c01051cf <free_pages>
+    free_page(p1);
+c0104077:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010407e:	00 
+c010407f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104082:	89 04 24             	mov    %eax,(%esp)
+c0104085:	e8 45 11 00 00       	call   c01051cf <free_pages>
+    free_page(p2);
+c010408a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104091:	00 
+c0104092:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104095:	89 04 24             	mov    %eax,(%esp)
+c0104098:	e8 32 11 00 00       	call   c01051cf <free_pages>
+}
+c010409d:	c9                   	leave  
+c010409e:	c3                   	ret    
+
+c010409f <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c010409f:	55                   	push   %ebp
+c01040a0:	89 e5                	mov    %esp,%ebp
+c01040a2:	53                   	push   %ebx
+c01040a3:	81 ec 94 00 00 00    	sub    $0x94,%esp
+    int count = 0, total = 0;
+c01040a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01040b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c01040b7:	c7 45 ec 78 10 1a c0 	movl   $0xc01a1078,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01040be:	eb 6b                	jmp    c010412b <default_check+0x8c>
+        struct Page *p = le2page(le, page_link);
+c01040c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01040c3:	83 e8 0c             	sub    $0xc,%eax
+c01040c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        assert(PageProperty(p));
+c01040c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01040cc:	83 c0 04             	add    $0x4,%eax
+c01040cf:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
+c01040d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01040d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01040dc:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01040df:	0f a3 10             	bt     %edx,(%eax)
+c01040e2:	19 c0                	sbb    %eax,%eax
+c01040e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    return oldbit != 0;
+c01040e7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c01040eb:	0f 95 c0             	setne  %al
+c01040ee:	0f b6 c0             	movzbl %al,%eax
+c01040f1:	85 c0                	test   %eax,%eax
+c01040f3:	75 24                	jne    c0104119 <default_check+0x7a>
+c01040f5:	c7 44 24 0c f6 c9 10 	movl   $0xc010c9f6,0xc(%esp)
+c01040fc:	c0 
+c01040fd:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104104:	c0 
+c0104105:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
+c010410c:	00 
+c010410d:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104114:	e8 c8 cc ff ff       	call   c0100de1 <__panic>
+        count ++, total += p->property;
+c0104119:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010411d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104120:	8b 50 08             	mov    0x8(%eax),%edx
+c0104123:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104126:	01 d0                	add    %edx,%eax
+c0104128:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010412b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010412e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0104131:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0104134:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0104137:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010413a:	81 7d ec 78 10 1a c0 	cmpl   $0xc01a1078,-0x14(%ebp)
+c0104141:	0f 85 79 ff ff ff    	jne    c01040c0 <default_check+0x21>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c0104147:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c010414a:	e8 b2 10 00 00       	call   c0105201 <nr_free_pages>
+c010414f:	39 c3                	cmp    %eax,%ebx
+c0104151:	74 24                	je     c0104177 <default_check+0xd8>
+c0104153:	c7 44 24 0c 06 ca 10 	movl   $0xc010ca06,0xc(%esp)
+c010415a:	c0 
+c010415b:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104162:	c0 
+c0104163:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
+c010416a:	00 
+c010416b:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104172:	e8 6a cc ff ff       	call   c0100de1 <__panic>
+
+    basic_check();
+c0104177:	e8 e7 f9 ff ff       	call   c0103b63 <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c010417c:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c0104183:	e8 dc 0f 00 00       	call   c0105164 <alloc_pages>
+c0104188:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(p0 != NULL);
+c010418b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010418f:	75 24                	jne    c01041b5 <default_check+0x116>
+c0104191:	c7 44 24 0c 1f ca 10 	movl   $0xc010ca1f,0xc(%esp)
+c0104198:	c0 
+c0104199:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01041a0:	c0 
+c01041a1:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
+c01041a8:	00 
+c01041a9:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01041b0:	e8 2c cc ff ff       	call   c0100de1 <__panic>
+    assert(!PageProperty(p0));
+c01041b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01041b8:	83 c0 04             	add    $0x4,%eax
+c01041bb:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+c01041c2:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01041c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c01041c8:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c01041cb:	0f a3 10             	bt     %edx,(%eax)
+c01041ce:	19 c0                	sbb    %eax,%eax
+c01041d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    return oldbit != 0;
+c01041d3:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c01041d7:	0f 95 c0             	setne  %al
+c01041da:	0f b6 c0             	movzbl %al,%eax
+c01041dd:	85 c0                	test   %eax,%eax
+c01041df:	74 24                	je     c0104205 <default_check+0x166>
+c01041e1:	c7 44 24 0c 2a ca 10 	movl   $0xc010ca2a,0xc(%esp)
+c01041e8:	c0 
+c01041e9:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01041f0:	c0 
+c01041f1:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
+c01041f8:	00 
+c01041f9:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104200:	e8 dc cb ff ff       	call   c0100de1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0104205:	a1 78 10 1a c0       	mov    0xc01a1078,%eax
+c010420a:	8b 15 7c 10 1a c0    	mov    0xc01a107c,%edx
+c0104210:	89 45 80             	mov    %eax,-0x80(%ebp)
+c0104213:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c0104216:	c7 45 b4 78 10 1a c0 	movl   $0xc01a1078,-0x4c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010421d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104220:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0104223:	89 50 04             	mov    %edx,0x4(%eax)
+c0104226:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104229:	8b 50 04             	mov    0x4(%eax),%edx
+c010422c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010422f:	89 10                	mov    %edx,(%eax)
+c0104231:	c7 45 b0 78 10 1a c0 	movl   $0xc01a1078,-0x50(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0104238:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010423b:	8b 40 04             	mov    0x4(%eax),%eax
+c010423e:	39 45 b0             	cmp    %eax,-0x50(%ebp)
+c0104241:	0f 94 c0             	sete   %al
+c0104244:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0104247:	85 c0                	test   %eax,%eax
+c0104249:	75 24                	jne    c010426f <default_check+0x1d0>
+c010424b:	c7 44 24 0c 7f c9 10 	movl   $0xc010c97f,0xc(%esp)
+c0104252:	c0 
+c0104253:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010425a:	c0 
+c010425b:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
+c0104262:	00 
+c0104263:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010426a:	e8 72 cb ff ff       	call   c0100de1 <__panic>
+    assert(alloc_page() == NULL);
+c010426f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104276:	e8 e9 0e 00 00       	call   c0105164 <alloc_pages>
+c010427b:	85 c0                	test   %eax,%eax
+c010427d:	74 24                	je     c01042a3 <default_check+0x204>
+c010427f:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c0104286:	c0 
+c0104287:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010428e:	c0 
+c010428f:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
+c0104296:	00 
+c0104297:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010429e:	e8 3e cb ff ff       	call   c0100de1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01042a3:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c01042a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c01042ab:	c7 05 80 10 1a c0 00 	movl   $0x0,0xc01a1080
+c01042b2:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c01042b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01042b8:	83 c0 40             	add    $0x40,%eax
+c01042bb:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c01042c2:	00 
+c01042c3:	89 04 24             	mov    %eax,(%esp)
+c01042c6:	e8 04 0f 00 00       	call   c01051cf <free_pages>
+    assert(alloc_pages(4) == NULL);
+c01042cb:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c01042d2:	e8 8d 0e 00 00       	call   c0105164 <alloc_pages>
+c01042d7:	85 c0                	test   %eax,%eax
+c01042d9:	74 24                	je     c01042ff <default_check+0x260>
+c01042db:	c7 44 24 0c 3c ca 10 	movl   $0xc010ca3c,0xc(%esp)
+c01042e2:	c0 
+c01042e3:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01042ea:	c0 
+c01042eb:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
+c01042f2:	00 
+c01042f3:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01042fa:	e8 e2 ca ff ff       	call   c0100de1 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c01042ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104302:	83 c0 40             	add    $0x40,%eax
+c0104305:	83 c0 04             	add    $0x4,%eax
+c0104308:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
+c010430f:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104312:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0104315:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0104318:	0f a3 10             	bt     %edx,(%eax)
+c010431b:	19 c0                	sbb    %eax,%eax
+c010431d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    return oldbit != 0;
+c0104320:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0104324:	0f 95 c0             	setne  %al
+c0104327:	0f b6 c0             	movzbl %al,%eax
+c010432a:	85 c0                	test   %eax,%eax
+c010432c:	74 0e                	je     c010433c <default_check+0x29d>
+c010432e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104331:	83 c0 40             	add    $0x40,%eax
+c0104334:	8b 40 08             	mov    0x8(%eax),%eax
+c0104337:	83 f8 03             	cmp    $0x3,%eax
+c010433a:	74 24                	je     c0104360 <default_check+0x2c1>
+c010433c:	c7 44 24 0c 54 ca 10 	movl   $0xc010ca54,0xc(%esp)
+c0104343:	c0 
+c0104344:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010434b:	c0 
+c010434c:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
+c0104353:	00 
+c0104354:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010435b:	e8 81 ca ff ff       	call   c0100de1 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c0104360:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+c0104367:	e8 f8 0d 00 00       	call   c0105164 <alloc_pages>
+c010436c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010436f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0104373:	75 24                	jne    c0104399 <default_check+0x2fa>
+c0104375:	c7 44 24 0c 80 ca 10 	movl   $0xc010ca80,0xc(%esp)
+c010437c:	c0 
+c010437d:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104384:	c0 
+c0104385:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
+c010438c:	00 
+c010438d:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104394:	e8 48 ca ff ff       	call   c0100de1 <__panic>
+    assert(alloc_page() == NULL);
+c0104399:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01043a0:	e8 bf 0d 00 00       	call   c0105164 <alloc_pages>
+c01043a5:	85 c0                	test   %eax,%eax
+c01043a7:	74 24                	je     c01043cd <default_check+0x32e>
+c01043a9:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c01043b0:	c0 
+c01043b1:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01043b8:	c0 
+c01043b9:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
+c01043c0:	00 
+c01043c1:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01043c8:	e8 14 ca ff ff       	call   c0100de1 <__panic>
+    assert(p0 + 2 == p1);
+c01043cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01043d0:	83 c0 40             	add    $0x40,%eax
+c01043d3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c01043d6:	74 24                	je     c01043fc <default_check+0x35d>
+c01043d8:	c7 44 24 0c 9e ca 10 	movl   $0xc010ca9e,0xc(%esp)
+c01043df:	c0 
+c01043e0:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01043e7:	c0 
+c01043e8:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
+c01043ef:	00 
+c01043f0:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01043f7:	e8 e5 c9 ff ff       	call   c0100de1 <__panic>
+
+    p2 = p0 + 1;
+c01043fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01043ff:	83 c0 20             	add    $0x20,%eax
+c0104402:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    free_page(p0);
+c0104405:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010440c:	00 
+c010440d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104410:	89 04 24             	mov    %eax,(%esp)
+c0104413:	e8 b7 0d 00 00       	call   c01051cf <free_pages>
+    free_pages(p1, 3);
+c0104418:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c010441f:	00 
+c0104420:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104423:	89 04 24             	mov    %eax,(%esp)
+c0104426:	e8 a4 0d 00 00       	call   c01051cf <free_pages>
+    assert(PageProperty(p0) && p0->property == 1);
+c010442b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010442e:	83 c0 04             	add    $0x4,%eax
+c0104431:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
+c0104438:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010443b:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c010443e:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0104441:	0f a3 10             	bt     %edx,(%eax)
+c0104444:	19 c0                	sbb    %eax,%eax
+c0104446:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c0104449:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c010444d:	0f 95 c0             	setne  %al
+c0104450:	0f b6 c0             	movzbl %al,%eax
+c0104453:	85 c0                	test   %eax,%eax
+c0104455:	74 0b                	je     c0104462 <default_check+0x3c3>
+c0104457:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010445a:	8b 40 08             	mov    0x8(%eax),%eax
+c010445d:	83 f8 01             	cmp    $0x1,%eax
+c0104460:	74 24                	je     c0104486 <default_check+0x3e7>
+c0104462:	c7 44 24 0c ac ca 10 	movl   $0xc010caac,0xc(%esp)
+c0104469:	c0 
+c010446a:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c0104471:	c0 
+c0104472:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
+c0104479:	00 
+c010447a:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c0104481:	e8 5b c9 ff ff       	call   c0100de1 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c0104486:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104489:	83 c0 04             	add    $0x4,%eax
+c010448c:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
+c0104493:	89 45 90             	mov    %eax,-0x70(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104496:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0104499:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c010449c:	0f a3 10             	bt     %edx,(%eax)
+c010449f:	19 c0                	sbb    %eax,%eax
+c01044a1:	89 45 8c             	mov    %eax,-0x74(%ebp)
+    return oldbit != 0;
+c01044a4:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
+c01044a8:	0f 95 c0             	setne  %al
+c01044ab:	0f b6 c0             	movzbl %al,%eax
+c01044ae:	85 c0                	test   %eax,%eax
+c01044b0:	74 0b                	je     c01044bd <default_check+0x41e>
+c01044b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01044b5:	8b 40 08             	mov    0x8(%eax),%eax
+c01044b8:	83 f8 03             	cmp    $0x3,%eax
+c01044bb:	74 24                	je     c01044e1 <default_check+0x442>
+c01044bd:	c7 44 24 0c d4 ca 10 	movl   $0xc010cad4,0xc(%esp)
+c01044c4:	c0 
+c01044c5:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01044cc:	c0 
+c01044cd:	c7 44 24 04 1f 01 00 	movl   $0x11f,0x4(%esp)
+c01044d4:	00 
+c01044d5:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01044dc:	e8 00 c9 ff ff       	call   c0100de1 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c01044e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01044e8:	e8 77 0c 00 00       	call   c0105164 <alloc_pages>
+c01044ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01044f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01044f3:	83 e8 20             	sub    $0x20,%eax
+c01044f6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c01044f9:	74 24                	je     c010451f <default_check+0x480>
+c01044fb:	c7 44 24 0c fa ca 10 	movl   $0xc010cafa,0xc(%esp)
+c0104502:	c0 
+c0104503:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010450a:	c0 
+c010450b:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
+c0104512:	00 
+c0104513:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010451a:	e8 c2 c8 ff ff       	call   c0100de1 <__panic>
+    free_page(p0);
+c010451f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104526:	00 
+c0104527:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010452a:	89 04 24             	mov    %eax,(%esp)
+c010452d:	e8 9d 0c 00 00       	call   c01051cf <free_pages>
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c0104532:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c0104539:	e8 26 0c 00 00       	call   c0105164 <alloc_pages>
+c010453e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104541:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104544:	83 c0 20             	add    $0x20,%eax
+c0104547:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c010454a:	74 24                	je     c0104570 <default_check+0x4d1>
+c010454c:	c7 44 24 0c 18 cb 10 	movl   $0xc010cb18,0xc(%esp)
+c0104553:	c0 
+c0104554:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010455b:	c0 
+c010455c:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
+c0104563:	00 
+c0104564:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010456b:	e8 71 c8 ff ff       	call   c0100de1 <__panic>
+
+    free_pages(p0, 2);
+c0104570:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c0104577:	00 
+c0104578:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010457b:	89 04 24             	mov    %eax,(%esp)
+c010457e:	e8 4c 0c 00 00       	call   c01051cf <free_pages>
+    free_page(p2);
+c0104583:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010458a:	00 
+c010458b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010458e:	89 04 24             	mov    %eax,(%esp)
+c0104591:	e8 39 0c 00 00       	call   c01051cf <free_pages>
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c0104596:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c010459d:	e8 c2 0b 00 00       	call   c0105164 <alloc_pages>
+c01045a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01045a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01045a9:	75 24                	jne    c01045cf <default_check+0x530>
+c01045ab:	c7 44 24 0c 38 cb 10 	movl   $0xc010cb38,0xc(%esp)
+c01045b2:	c0 
+c01045b3:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01045ba:	c0 
+c01045bb:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
+c01045c2:	00 
+c01045c3:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01045ca:	e8 12 c8 ff ff       	call   c0100de1 <__panic>
+    assert(alloc_page() == NULL);
+c01045cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01045d6:	e8 89 0b 00 00       	call   c0105164 <alloc_pages>
+c01045db:	85 c0                	test   %eax,%eax
+c01045dd:	74 24                	je     c0104603 <default_check+0x564>
+c01045df:	c7 44 24 0c 96 c9 10 	movl   $0xc010c996,0xc(%esp)
+c01045e6:	c0 
+c01045e7:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01045ee:	c0 
+c01045ef:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
+c01045f6:	00 
+c01045f7:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01045fe:	e8 de c7 ff ff       	call   c0100de1 <__panic>
+
+    assert(nr_free == 0);
+c0104603:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0104608:	85 c0                	test   %eax,%eax
+c010460a:	74 24                	je     c0104630 <default_check+0x591>
+c010460c:	c7 44 24 0c e9 c9 10 	movl   $0xc010c9e9,0xc(%esp)
+c0104613:	c0 
+c0104614:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c010461b:	c0 
+c010461c:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
+c0104623:	00 
+c0104624:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c010462b:	e8 b1 c7 ff ff       	call   c0100de1 <__panic>
+    nr_free = nr_free_store;
+c0104630:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104633:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+
+    free_list = free_list_store;
+c0104638:	8b 45 80             	mov    -0x80(%ebp),%eax
+c010463b:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c010463e:	a3 78 10 1a c0       	mov    %eax,0xc01a1078
+c0104643:	89 15 7c 10 1a c0    	mov    %edx,0xc01a107c
+    free_pages(p0, 5);
+c0104649:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+c0104650:	00 
+c0104651:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104654:	89 04 24             	mov    %eax,(%esp)
+c0104657:	e8 73 0b 00 00       	call   c01051cf <free_pages>
+
+    le = &free_list;
+c010465c:	c7 45 ec 78 10 1a c0 	movl   $0xc01a1078,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0104663:	eb 1d                	jmp    c0104682 <default_check+0x5e3>
+        struct Page *p = le2page(le, page_link);
+c0104665:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104668:	83 e8 0c             	sub    $0xc,%eax
+c010466b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        count --, total -= p->property;
+c010466e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0104672:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104675:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0104678:	8b 40 08             	mov    0x8(%eax),%eax
+c010467b:	29 c2                	sub    %eax,%edx
+c010467d:	89 d0                	mov    %edx,%eax
+c010467f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104682:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104685:	89 45 88             	mov    %eax,-0x78(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0104688:	8b 45 88             	mov    -0x78(%ebp),%eax
+c010468b:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c010468e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104691:	81 7d ec 78 10 1a c0 	cmpl   $0xc01a1078,-0x14(%ebp)
+c0104698:	75 cb                	jne    c0104665 <default_check+0x5c6>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+c010469a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010469e:	74 24                	je     c01046c4 <default_check+0x625>
+c01046a0:	c7 44 24 0c 56 cb 10 	movl   $0xc010cb56,0xc(%esp)
+c01046a7:	c0 
+c01046a8:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01046af:	c0 
+c01046b0:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
+c01046b7:	00 
+c01046b8:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01046bf:	e8 1d c7 ff ff       	call   c0100de1 <__panic>
+    assert(total == 0);
+c01046c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01046c8:	74 24                	je     c01046ee <default_check+0x64f>
+c01046ca:	c7 44 24 0c 61 cb 10 	movl   $0xc010cb61,0xc(%esp)
+c01046d1:	c0 
+c01046d2:	c7 44 24 08 f6 c7 10 	movl   $0xc010c7f6,0x8(%esp)
+c01046d9:	c0 
+c01046da:	c7 44 24 04 37 01 00 	movl   $0x137,0x4(%esp)
+c01046e1:	00 
+c01046e2:	c7 04 24 0b c8 10 c0 	movl   $0xc010c80b,(%esp)
+c01046e9:	e8 f3 c6 ff ff       	call   c0100de1 <__panic>
+}
+c01046ee:	81 c4 94 00 00 00    	add    $0x94,%esp
+c01046f4:	5b                   	pop    %ebx
+c01046f5:	5d                   	pop    %ebp
+c01046f6:	c3                   	ret    
+
+c01046f7 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01046f7:	55                   	push   %ebp
+c01046f8:	89 e5                	mov    %esp,%ebp
+c01046fa:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01046fd:	9c                   	pushf  
+c01046fe:	58                   	pop    %eax
+c01046ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0104702:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0104705:	25 00 02 00 00       	and    $0x200,%eax
+c010470a:	85 c0                	test   %eax,%eax
+c010470c:	74 0c                	je     c010471a <__intr_save+0x23>
+        intr_disable();
+c010470e:	e8 37 d9 ff ff       	call   c010204a <intr_disable>
+        return 1;
+c0104713:	b8 01 00 00 00       	mov    $0x1,%eax
+c0104718:	eb 05                	jmp    c010471f <__intr_save+0x28>
+    }
+    return 0;
+c010471a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010471f:	c9                   	leave  
+c0104720:	c3                   	ret    
+
+c0104721 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0104721:	55                   	push   %ebp
+c0104722:	89 e5                	mov    %esp,%ebp
+c0104724:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0104727:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010472b:	74 05                	je     c0104732 <__intr_restore+0x11>
+        intr_enable();
+c010472d:	e8 12 d9 ff ff       	call   c0102044 <intr_enable>
+    }
+}
+c0104732:	c9                   	leave  
+c0104733:	c3                   	ret    
+
+c0104734 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104734:	55                   	push   %ebp
+c0104735:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104737:	8b 55 08             	mov    0x8(%ebp),%edx
+c010473a:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c010473f:	29 c2                	sub    %eax,%edx
+c0104741:	89 d0                	mov    %edx,%eax
+c0104743:	c1 f8 05             	sar    $0x5,%eax
+}
+c0104746:	5d                   	pop    %ebp
+c0104747:	c3                   	ret    
+
+c0104748 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0104748:	55                   	push   %ebp
+c0104749:	89 e5                	mov    %esp,%ebp
+c010474b:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c010474e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104751:	89 04 24             	mov    %eax,(%esp)
+c0104754:	e8 db ff ff ff       	call   c0104734 <page2ppn>
+c0104759:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010475c:	c9                   	leave  
+c010475d:	c3                   	ret    
+
+c010475e <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c010475e:	55                   	push   %ebp
+c010475f:	89 e5                	mov    %esp,%ebp
+c0104761:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0104764:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104767:	c1 e8 0c             	shr    $0xc,%eax
+c010476a:	89 c2                	mov    %eax,%edx
+c010476c:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0104771:	39 c2                	cmp    %eax,%edx
+c0104773:	72 1c                	jb     c0104791 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0104775:	c7 44 24 08 9c cb 10 	movl   $0xc010cb9c,0x8(%esp)
+c010477c:	c0 
+c010477d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0104784:	00 
+c0104785:	c7 04 24 bb cb 10 c0 	movl   $0xc010cbbb,(%esp)
+c010478c:	e8 50 c6 ff ff       	call   c0100de1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0104791:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0104796:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104799:	c1 ea 0c             	shr    $0xc,%edx
+c010479c:	c1 e2 05             	shl    $0x5,%edx
+c010479f:	01 d0                	add    %edx,%eax
+}
+c01047a1:	c9                   	leave  
+c01047a2:	c3                   	ret    
+
+c01047a3 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01047a3:	55                   	push   %ebp
+c01047a4:	89 e5                	mov    %esp,%ebp
+c01047a6:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c01047a9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047ac:	89 04 24             	mov    %eax,(%esp)
+c01047af:	e8 94 ff ff ff       	call   c0104748 <page2pa>
+c01047b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01047b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01047ba:	c1 e8 0c             	shr    $0xc,%eax
+c01047bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01047c0:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c01047c5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01047c8:	72 23                	jb     c01047ed <page2kva+0x4a>
+c01047ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01047cd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01047d1:	c7 44 24 08 cc cb 10 	movl   $0xc010cbcc,0x8(%esp)
+c01047d8:	c0 
+c01047d9:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01047e0:	00 
+c01047e1:	c7 04 24 bb cb 10 c0 	movl   $0xc010cbbb,(%esp)
+c01047e8:	e8 f4 c5 ff ff       	call   c0100de1 <__panic>
+c01047ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01047f0:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01047f5:	c9                   	leave  
+c01047f6:	c3                   	ret    
+
+c01047f7 <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c01047f7:	55                   	push   %ebp
+c01047f8:	89 e5                	mov    %esp,%ebp
+c01047fa:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c01047fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104800:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104803:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010480a:	77 23                	ja     c010482f <kva2page+0x38>
+c010480c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010480f:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104813:	c7 44 24 08 f0 cb 10 	movl   $0xc010cbf0,0x8(%esp)
+c010481a:	c0 
+c010481b:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c0104822:	00 
+c0104823:	c7 04 24 bb cb 10 c0 	movl   $0xc010cbbb,(%esp)
+c010482a:	e8 b2 c5 ff ff       	call   c0100de1 <__panic>
+c010482f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104832:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104837:	89 04 24             	mov    %eax,(%esp)
+c010483a:	e8 1f ff ff ff       	call   c010475e <pa2page>
+}
+c010483f:	c9                   	leave  
+c0104840:	c3                   	ret    
+
+c0104841 <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c0104841:	55                   	push   %ebp
+c0104842:	89 e5                	mov    %esp,%ebp
+c0104844:	83 ec 28             	sub    $0x28,%esp
+  struct Page * page = alloc_pages(1 << order);
+c0104847:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010484a:	ba 01 00 00 00       	mov    $0x1,%edx
+c010484f:	89 c1                	mov    %eax,%ecx
+c0104851:	d3 e2                	shl    %cl,%edx
+c0104853:	89 d0                	mov    %edx,%eax
+c0104855:	89 04 24             	mov    %eax,(%esp)
+c0104858:	e8 07 09 00 00       	call   c0105164 <alloc_pages>
+c010485d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c0104860:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104864:	75 07                	jne    c010486d <__slob_get_free_pages+0x2c>
+    return NULL;
+c0104866:	b8 00 00 00 00       	mov    $0x0,%eax
+c010486b:	eb 0b                	jmp    c0104878 <__slob_get_free_pages+0x37>
+  return page2kva(page);
+c010486d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104870:	89 04 24             	mov    %eax,(%esp)
+c0104873:	e8 2b ff ff ff       	call   c01047a3 <page2kva>
+}
+c0104878:	c9                   	leave  
+c0104879:	c3                   	ret    
+
+c010487a <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c010487a:	55                   	push   %ebp
+c010487b:	89 e5                	mov    %esp,%ebp
+c010487d:	53                   	push   %ebx
+c010487e:	83 ec 14             	sub    $0x14,%esp
+  free_pages(kva2page(kva), 1 << order);
+c0104881:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104884:	ba 01 00 00 00       	mov    $0x1,%edx
+c0104889:	89 c1                	mov    %eax,%ecx
+c010488b:	d3 e2                	shl    %cl,%edx
+c010488d:	89 d0                	mov    %edx,%eax
+c010488f:	89 c3                	mov    %eax,%ebx
+c0104891:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104894:	89 04 24             	mov    %eax,(%esp)
+c0104897:	e8 5b ff ff ff       	call   c01047f7 <kva2page>
+c010489c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c01048a0:	89 04 24             	mov    %eax,(%esp)
+c01048a3:	e8 27 09 00 00       	call   c01051cf <free_pages>
+}
+c01048a8:	83 c4 14             	add    $0x14,%esp
+c01048ab:	5b                   	pop    %ebx
+c01048ac:	5d                   	pop    %ebp
+c01048ad:	c3                   	ret    
+
+c01048ae <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c01048ae:	55                   	push   %ebp
+c01048af:	89 e5                	mov    %esp,%ebp
+c01048b1:	83 ec 38             	sub    $0x38,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c01048b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01048b7:	83 c0 08             	add    $0x8,%eax
+c01048ba:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c01048bf:	76 24                	jbe    c01048e5 <slob_alloc+0x37>
+c01048c1:	c7 44 24 0c 14 cc 10 	movl   $0xc010cc14,0xc(%esp)
+c01048c8:	c0 
+c01048c9:	c7 44 24 08 33 cc 10 	movl   $0xc010cc33,0x8(%esp)
+c01048d0:	c0 
+c01048d1:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c01048d8:	00 
+c01048d9:	c7 04 24 48 cc 10 c0 	movl   $0xc010cc48,(%esp)
+c01048e0:	e8 fc c4 ff ff       	call   c0100de1 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c01048e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c01048ec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c01048f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01048f6:	83 c0 07             	add    $0x7,%eax
+c01048f9:	c1 e8 03             	shr    $0x3,%eax
+c01048fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c01048ff:	e8 f3 fd ff ff       	call   c01046f7 <__intr_save>
+c0104904:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c0104907:	a1 e8 a9 12 c0       	mov    0xc012a9e8,%eax
+c010490c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c010490f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104912:	8b 40 04             	mov    0x4(%eax),%eax
+c0104915:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c0104918:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010491c:	74 25                	je     c0104943 <slob_alloc+0x95>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c010491e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104921:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104924:	01 d0                	add    %edx,%eax
+c0104926:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0104929:	8b 45 10             	mov    0x10(%ebp),%eax
+c010492c:	f7 d8                	neg    %eax
+c010492e:	21 d0                	and    %edx,%eax
+c0104930:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c0104933:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0104936:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104939:	29 c2                	sub    %eax,%edx
+c010493b:	89 d0                	mov    %edx,%eax
+c010493d:	c1 f8 03             	sar    $0x3,%eax
+c0104940:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c0104943:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104946:	8b 00                	mov    (%eax),%eax
+c0104948:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010494b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c010494e:	01 ca                	add    %ecx,%edx
+c0104950:	39 d0                	cmp    %edx,%eax
+c0104952:	0f 8c aa 00 00 00    	jl     c0104a02 <slob_alloc+0x154>
+			if (delta) { /* need to fragment head to align? */
+c0104958:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010495c:	74 38                	je     c0104996 <slob_alloc+0xe8>
+				aligned->units = cur->units - delta;
+c010495e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104961:	8b 00                	mov    (%eax),%eax
+c0104963:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c0104966:	89 c2                	mov    %eax,%edx
+c0104968:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010496b:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c010496d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104970:	8b 50 04             	mov    0x4(%eax),%edx
+c0104973:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104976:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c0104979:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010497c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010497f:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c0104982:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104985:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0104988:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c010498a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010498d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c0104990:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104993:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c0104996:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104999:	8b 00                	mov    (%eax),%eax
+c010499b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c010499e:	75 0e                	jne    c01049ae <slob_alloc+0x100>
+				prev->next = cur->next; /* unlink */
+c01049a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049a3:	8b 50 04             	mov    0x4(%eax),%edx
+c01049a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049a9:	89 50 04             	mov    %edx,0x4(%eax)
+c01049ac:	eb 3c                	jmp    c01049ea <slob_alloc+0x13c>
+			else { /* fragment */
+				prev->next = cur + units;
+c01049ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01049b1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01049b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049bb:	01 c2                	add    %eax,%edx
+c01049bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049c0:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c01049c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049c6:	8b 40 04             	mov    0x4(%eax),%eax
+c01049c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01049cc:	8b 12                	mov    (%edx),%edx
+c01049ce:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c01049d1:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c01049d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049d6:	8b 40 04             	mov    0x4(%eax),%eax
+c01049d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01049dc:	8b 52 04             	mov    0x4(%edx),%edx
+c01049df:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c01049e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01049e8:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c01049ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049ed:	a3 e8 a9 12 c0       	mov    %eax,0xc012a9e8
+			spin_unlock_irqrestore(&slob_lock, flags);
+c01049f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01049f5:	89 04 24             	mov    %eax,(%esp)
+c01049f8:	e8 24 fd ff ff       	call   c0104721 <__intr_restore>
+			return cur;
+c01049fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a00:	eb 7f                	jmp    c0104a81 <slob_alloc+0x1d3>
+		}
+		if (cur == slobfree) {
+c0104a02:	a1 e8 a9 12 c0       	mov    0xc012a9e8,%eax
+c0104a07:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104a0a:	75 61                	jne    c0104a6d <slob_alloc+0x1bf>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0104a0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104a0f:	89 04 24             	mov    %eax,(%esp)
+c0104a12:	e8 0a fd ff ff       	call   c0104721 <__intr_restore>
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0104a17:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104a1e:	75 07                	jne    c0104a27 <slob_alloc+0x179>
+				return 0;
+c0104a20:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104a25:	eb 5a                	jmp    c0104a81 <slob_alloc+0x1d3>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c0104a27:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104a2e:	00 
+c0104a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104a32:	89 04 24             	mov    %eax,(%esp)
+c0104a35:	e8 07 fe ff ff       	call   c0104841 <__slob_get_free_pages>
+c0104a3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c0104a3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a41:	75 07                	jne    c0104a4a <slob_alloc+0x19c>
+				return 0;
+c0104a43:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104a48:	eb 37                	jmp    c0104a81 <slob_alloc+0x1d3>
+
+			slob_free(cur, PAGE_SIZE);
+c0104a4a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104a51:	00 
+c0104a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a55:	89 04 24             	mov    %eax,(%esp)
+c0104a58:	e8 26 00 00 00       	call   c0104a83 <slob_free>
+			spin_lock_irqsave(&slob_lock, flags);
+c0104a5d:	e8 95 fc ff ff       	call   c01046f7 <__intr_save>
+c0104a62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c0104a65:	a1 e8 a9 12 c0       	mov    0xc012a9e8,%eax
+c0104a6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+	prev = slobfree;
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0104a6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a76:	8b 40 04             	mov    0x4(%eax),%eax
+c0104a79:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+			slob_free(cur, PAGE_SIZE);
+			spin_lock_irqsave(&slob_lock, flags);
+			cur = slobfree;
+		}
+	}
+c0104a7c:	e9 97 fe ff ff       	jmp    c0104918 <slob_alloc+0x6a>
+}
+c0104a81:	c9                   	leave  
+c0104a82:	c3                   	ret    
+
+c0104a83 <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c0104a83:	55                   	push   %ebp
+c0104a84:	89 e5                	mov    %esp,%ebp
+c0104a86:	83 ec 28             	sub    $0x28,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c0104a89:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104a8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104a93:	75 05                	jne    c0104a9a <slob_free+0x17>
+		return;
+c0104a95:	e9 ff 00 00 00       	jmp    c0104b99 <slob_free+0x116>
+
+	if (size)
+c0104a9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0104a9e:	74 10                	je     c0104ab0 <slob_free+0x2d>
+		b->units = SLOB_UNITS(size);
+c0104aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104aa3:	83 c0 07             	add    $0x7,%eax
+c0104aa6:	c1 e8 03             	shr    $0x3,%eax
+c0104aa9:	89 c2                	mov    %eax,%edx
+c0104aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aae:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c0104ab0:	e8 42 fc ff ff       	call   c01046f7 <__intr_save>
+c0104ab5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104ab8:	a1 e8 a9 12 c0       	mov    0xc012a9e8,%eax
+c0104abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104ac0:	eb 27                	jmp    c0104ae9 <slob_free+0x66>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c0104ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ac5:	8b 40 04             	mov    0x4(%eax),%eax
+c0104ac8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104acb:	77 13                	ja     c0104ae0 <slob_free+0x5d>
+c0104acd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ad0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104ad3:	77 27                	ja     c0104afc <slob_free+0x79>
+c0104ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ad8:	8b 40 04             	mov    0x4(%eax),%eax
+c0104adb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104ade:	77 1c                	ja     c0104afc <slob_free+0x79>
+	if (size)
+		b->units = SLOB_UNITS(size);
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ae3:	8b 40 04             	mov    0x4(%eax),%eax
+c0104ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104ae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104aef:	76 d1                	jbe    c0104ac2 <slob_free+0x3f>
+c0104af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104af4:	8b 40 04             	mov    0x4(%eax),%eax
+c0104af7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104afa:	76 c6                	jbe    c0104ac2 <slob_free+0x3f>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+			break;
+
+	if (b + b->units == cur->next) {
+c0104afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aff:	8b 00                	mov    (%eax),%eax
+c0104b01:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104b08:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b0b:	01 c2                	add    %eax,%edx
+c0104b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b10:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b13:	39 c2                	cmp    %eax,%edx
+c0104b15:	75 25                	jne    c0104b3c <slob_free+0xb9>
+		b->units += cur->next->units;
+c0104b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b1a:	8b 10                	mov    (%eax),%edx
+c0104b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b1f:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b22:	8b 00                	mov    (%eax),%eax
+c0104b24:	01 c2                	add    %eax,%edx
+c0104b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b29:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0104b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b2e:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b31:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b37:	89 50 04             	mov    %edx,0x4(%eax)
+c0104b3a:	eb 0c                	jmp    c0104b48 <slob_free+0xc5>
+	} else
+		b->next = cur->next;
+c0104b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b3f:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b45:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0104b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b4b:	8b 00                	mov    (%eax),%eax
+c0104b4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b57:	01 d0                	add    %edx,%eax
+c0104b59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104b5c:	75 1f                	jne    c0104b7d <slob_free+0xfa>
+		cur->units += b->units;
+c0104b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b61:	8b 10                	mov    (%eax),%edx
+c0104b63:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b66:	8b 00                	mov    (%eax),%eax
+c0104b68:	01 c2                	add    %eax,%edx
+c0104b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b6d:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c0104b6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b72:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b78:	89 50 04             	mov    %edx,0x4(%eax)
+c0104b7b:	eb 09                	jmp    c0104b86 <slob_free+0x103>
+	} else
+		cur->next = b;
+c0104b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b80:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104b83:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0104b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b89:	a3 e8 a9 12 c0       	mov    %eax,0xc012a9e8
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0104b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104b91:	89 04 24             	mov    %eax,(%esp)
+c0104b94:	e8 88 fb ff ff       	call   c0104721 <__intr_restore>
+}
+c0104b99:	c9                   	leave  
+c0104b9a:	c3                   	ret    
+
+c0104b9b <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0104b9b:	55                   	push   %ebp
+c0104b9c:	89 e5                	mov    %esp,%ebp
+c0104b9e:	83 ec 18             	sub    $0x18,%esp
+  cprintf("use SLOB allocator\n");
+c0104ba1:	c7 04 24 5a cc 10 c0 	movl   $0xc010cc5a,(%esp)
+c0104ba8:	e8 b2 b7 ff ff       	call   c010035f <cprintf>
+}
+c0104bad:	c9                   	leave  
+c0104bae:	c3                   	ret    
+
+c0104baf <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c0104baf:	55                   	push   %ebp
+c0104bb0:	89 e5                	mov    %esp,%ebp
+c0104bb2:	83 ec 18             	sub    $0x18,%esp
+    slob_init();
+c0104bb5:	e8 e1 ff ff ff       	call   c0104b9b <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c0104bba:	c7 04 24 6e cc 10 c0 	movl   $0xc010cc6e,(%esp)
+c0104bc1:	e8 99 b7 ff ff       	call   c010035f <cprintf>
+}
+c0104bc6:	c9                   	leave  
+c0104bc7:	c3                   	ret    
+
+c0104bc8 <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c0104bc8:	55                   	push   %ebp
+c0104bc9:	89 e5                	mov    %esp,%ebp
+  return 0;
+c0104bcb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104bd0:	5d                   	pop    %ebp
+c0104bd1:	c3                   	ret    
+
+c0104bd2 <kallocated>:
+
+size_t
+kallocated(void) {
+c0104bd2:	55                   	push   %ebp
+c0104bd3:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c0104bd5:	e8 ee ff ff ff       	call   c0104bc8 <slob_allocated>
+}
+c0104bda:	5d                   	pop    %ebp
+c0104bdb:	c3                   	ret    
+
+c0104bdc <find_order>:
+
+static int find_order(int size)
+{
+c0104bdc:	55                   	push   %ebp
+c0104bdd:	89 e5                	mov    %esp,%ebp
+c0104bdf:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c0104be2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c0104be9:	eb 07                	jmp    c0104bf2 <find_order+0x16>
+		order++;
+c0104beb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+}
+
+static int find_order(int size)
+{
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)
+c0104bef:	d1 7d 08             	sarl   0x8(%ebp)
+c0104bf2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104bf9:	7f f0                	jg     c0104beb <find_order+0xf>
+		order++;
+	return order;
+c0104bfb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0104bfe:	c9                   	leave  
+c0104bff:	c3                   	ret    
+
+c0104c00 <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c0104c00:	55                   	push   %ebp
+c0104c01:	89 e5                	mov    %esp,%ebp
+c0104c03:	83 ec 28             	sub    $0x28,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0104c06:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c0104c0d:	77 38                	ja     c0104c47 <__kmalloc+0x47>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c0104c0f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104c12:	8d 50 08             	lea    0x8(%eax),%edx
+c0104c15:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104c1c:	00 
+c0104c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104c20:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104c24:	89 14 24             	mov    %edx,(%esp)
+c0104c27:	e8 82 fc ff ff       	call   c01048ae <slob_alloc>
+c0104c2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c0104c2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104c33:	74 08                	je     c0104c3d <__kmalloc+0x3d>
+c0104c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104c38:	83 c0 08             	add    $0x8,%eax
+c0104c3b:	eb 05                	jmp    c0104c42 <__kmalloc+0x42>
+c0104c3d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104c42:	e9 a6 00 00 00       	jmp    c0104ced <__kmalloc+0xed>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0104c47:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104c4e:	00 
+c0104c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104c52:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104c56:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+c0104c5d:	e8 4c fc ff ff       	call   c01048ae <slob_alloc>
+c0104c62:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	if (!bb)
+c0104c65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104c69:	75 07                	jne    c0104c72 <__kmalloc+0x72>
+		return 0;
+c0104c6b:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104c70:	eb 7b                	jmp    c0104ced <__kmalloc+0xed>
+
+	bb->order = find_order(size);
+c0104c72:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104c75:	89 04 24             	mov    %eax,(%esp)
+c0104c78:	e8 5f ff ff ff       	call   c0104bdc <find_order>
+c0104c7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104c80:	89 02                	mov    %eax,(%edx)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0104c82:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c85:	8b 00                	mov    (%eax),%eax
+c0104c87:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104c8e:	89 04 24             	mov    %eax,(%esp)
+c0104c91:	e8 ab fb ff ff       	call   c0104841 <__slob_get_free_pages>
+c0104c96:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104c99:	89 42 04             	mov    %eax,0x4(%edx)
+
+	if (bb->pages) {
+c0104c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c9f:	8b 40 04             	mov    0x4(%eax),%eax
+c0104ca2:	85 c0                	test   %eax,%eax
+c0104ca4:	74 2f                	je     c0104cd5 <__kmalloc+0xd5>
+		spin_lock_irqsave(&block_lock, flags);
+c0104ca6:	e8 4c fa ff ff       	call   c01046f7 <__intr_save>
+c0104cab:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		bb->next = bigblocks;
+c0104cae:	8b 15 84 ef 19 c0    	mov    0xc019ef84,%edx
+c0104cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cb7:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c0104cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cbd:	a3 84 ef 19 c0       	mov    %eax,0xc019ef84
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104cc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104cc5:	89 04 24             	mov    %eax,(%esp)
+c0104cc8:	e8 54 fa ff ff       	call   c0104721 <__intr_restore>
+		return bb->pages;
+c0104ccd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cd0:	8b 40 04             	mov    0x4(%eax),%eax
+c0104cd3:	eb 18                	jmp    c0104ced <__kmalloc+0xed>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c0104cd5:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104cdc:	00 
+c0104cdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ce0:	89 04 24             	mov    %eax,(%esp)
+c0104ce3:	e8 9b fd ff ff       	call   c0104a83 <slob_free>
+	return 0;
+c0104ce8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104ced:	c9                   	leave  
+c0104cee:	c3                   	ret    
+
+c0104cef <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c0104cef:	55                   	push   %ebp
+c0104cf0:	89 e5                	mov    %esp,%ebp
+c0104cf2:	83 ec 18             	sub    $0x18,%esp
+  return __kmalloc(size, 0);
+c0104cf5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104cfc:	00 
+c0104cfd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d00:	89 04 24             	mov    %eax,(%esp)
+c0104d03:	e8 f8 fe ff ff       	call   c0104c00 <__kmalloc>
+}
+c0104d08:	c9                   	leave  
+c0104d09:	c3                   	ret    
+
+c0104d0a <kfree>:
+
+
+void kfree(void *block)
+{
+c0104d0a:	55                   	push   %ebp
+c0104d0b:	89 e5                	mov    %esp,%ebp
+c0104d0d:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0104d10:	c7 45 f0 84 ef 19 c0 	movl   $0xc019ef84,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104d17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104d1b:	75 05                	jne    c0104d22 <kfree+0x18>
+		return;
+c0104d1d:	e9 a2 00 00 00       	jmp    c0104dc4 <kfree+0xba>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104d22:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d25:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104d2a:	85 c0                	test   %eax,%eax
+c0104d2c:	75 7f                	jne    c0104dad <kfree+0xa3>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0104d2e:	e8 c4 f9 ff ff       	call   c01046f7 <__intr_save>
+c0104d33:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104d36:	a1 84 ef 19 c0       	mov    0xc019ef84,%eax
+c0104d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104d3e:	eb 5c                	jmp    c0104d9c <kfree+0x92>
+			if (bb->pages == block) {
+c0104d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d43:	8b 40 04             	mov    0x4(%eax),%eax
+c0104d46:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104d49:	75 3f                	jne    c0104d8a <kfree+0x80>
+				*last = bb->next;
+c0104d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d4e:	8b 50 08             	mov    0x8(%eax),%edx
+c0104d51:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d54:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c0104d56:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d59:	89 04 24             	mov    %eax,(%esp)
+c0104d5c:	e8 c0 f9 ff ff       	call   c0104721 <__intr_restore>
+				__slob_free_pages((unsigned long)block, bb->order);
+c0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d64:	8b 10                	mov    (%eax),%edx
+c0104d66:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d69:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0104d6d:	89 04 24             	mov    %eax,(%esp)
+c0104d70:	e8 05 fb ff ff       	call   c010487a <__slob_free_pages>
+				slob_free(bb, sizeof(bigblock_t));
+c0104d75:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104d7c:	00 
+c0104d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d80:	89 04 24             	mov    %eax,(%esp)
+c0104d83:	e8 fb fc ff ff       	call   c0104a83 <slob_free>
+				return;
+c0104d88:	eb 3a                	jmp    c0104dc4 <kfree+0xba>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d8d:	83 c0 08             	add    $0x8,%eax
+c0104d90:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104d93:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d96:	8b 40 08             	mov    0x8(%eax),%eax
+c0104d99:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104d9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104da0:	75 9e                	jne    c0104d40 <kfree+0x36>
+				__slob_free_pages((unsigned long)block, bb->order);
+				slob_free(bb, sizeof(bigblock_t));
+				return;
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104da5:	89 04 24             	mov    %eax,(%esp)
+c0104da8:	e8 74 f9 ff ff       	call   c0104721 <__intr_restore>
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c0104dad:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104db0:	83 e8 08             	sub    $0x8,%eax
+c0104db3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104dba:	00 
+c0104dbb:	89 04 24             	mov    %eax,(%esp)
+c0104dbe:	e8 c0 fc ff ff       	call   c0104a83 <slob_free>
+	return;
+c0104dc3:	90                   	nop
+}
+c0104dc4:	c9                   	leave  
+c0104dc5:	c3                   	ret    
+
+c0104dc6 <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c0104dc6:	55                   	push   %ebp
+c0104dc7:	89 e5                	mov    %esp,%ebp
+c0104dc9:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c0104dcc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104dd0:	75 07                	jne    c0104dd9 <ksize+0x13>
+		return 0;
+c0104dd2:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104dd7:	eb 6b                	jmp    c0104e44 <ksize+0x7e>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104dd9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ddc:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104de1:	85 c0                	test   %eax,%eax
+c0104de3:	75 54                	jne    c0104e39 <ksize+0x73>
+		spin_lock_irqsave(&block_lock, flags);
+c0104de5:	e8 0d f9 ff ff       	call   c01046f7 <__intr_save>
+c0104dea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104ded:	a1 84 ef 19 c0       	mov    0xc019ef84,%eax
+c0104df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104df5:	eb 31                	jmp    c0104e28 <ksize+0x62>
+			if (bb->pages == block) {
+c0104df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104dfa:	8b 40 04             	mov    0x4(%eax),%eax
+c0104dfd:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104e00:	75 1d                	jne    c0104e1f <ksize+0x59>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e05:	89 04 24             	mov    %eax,(%esp)
+c0104e08:	e8 14 f9 ff ff       	call   c0104721 <__intr_restore>
+				return PAGE_SIZE << bb->order;
+c0104e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e10:	8b 00                	mov    (%eax),%eax
+c0104e12:	ba 00 10 00 00       	mov    $0x1000,%edx
+c0104e17:	89 c1                	mov    %eax,%ecx
+c0104e19:	d3 e2                	shl    %cl,%edx
+c0104e1b:	89 d0                	mov    %edx,%eax
+c0104e1d:	eb 25                	jmp    c0104e44 <ksize+0x7e>
+	if (!block)
+		return 0;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e22:	8b 40 08             	mov    0x8(%eax),%eax
+c0104e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104e28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104e2c:	75 c9                	jne    c0104df7 <ksize+0x31>
+			if (bb->pages == block) {
+				spin_unlock_irqrestore(&slob_lock, flags);
+				return PAGE_SIZE << bb->order;
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e31:	89 04 24             	mov    %eax,(%esp)
+c0104e34:	e8 e8 f8 ff ff       	call   c0104721 <__intr_restore>
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0104e39:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e3c:	83 e8 08             	sub    $0x8,%eax
+c0104e3f:	8b 00                	mov    (%eax),%eax
+c0104e41:	c1 e0 03             	shl    $0x3,%eax
+}
+c0104e44:	c9                   	leave  
+c0104e45:	c3                   	ret    
+
+c0104e46 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104e46:	55                   	push   %ebp
+c0104e47:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104e49:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104e4c:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0104e51:	29 c2                	sub    %eax,%edx
+c0104e53:	89 d0                	mov    %edx,%eax
+c0104e55:	c1 f8 05             	sar    $0x5,%eax
+}
+c0104e58:	5d                   	pop    %ebp
+c0104e59:	c3                   	ret    
+
+c0104e5a <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0104e5a:	55                   	push   %ebp
+c0104e5b:	89 e5                	mov    %esp,%ebp
+c0104e5d:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0104e60:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e63:	89 04 24             	mov    %eax,(%esp)
+c0104e66:	e8 db ff ff ff       	call   c0104e46 <page2ppn>
+c0104e6b:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0104e6e:	c9                   	leave  
+c0104e6f:	c3                   	ret    
+
+c0104e70 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0104e70:	55                   	push   %ebp
+c0104e71:	89 e5                	mov    %esp,%ebp
+c0104e73:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0104e76:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e79:	c1 e8 0c             	shr    $0xc,%eax
+c0104e7c:	89 c2                	mov    %eax,%edx
+c0104e7e:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0104e83:	39 c2                	cmp    %eax,%edx
+c0104e85:	72 1c                	jb     c0104ea3 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0104e87:	c7 44 24 08 8c cc 10 	movl   $0xc010cc8c,0x8(%esp)
+c0104e8e:	c0 
+c0104e8f:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0104e96:	00 
+c0104e97:	c7 04 24 ab cc 10 c0 	movl   $0xc010ccab,(%esp)
+c0104e9e:	e8 3e bf ff ff       	call   c0100de1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0104ea3:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0104ea8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104eab:	c1 ea 0c             	shr    $0xc,%edx
+c0104eae:	c1 e2 05             	shl    $0x5,%edx
+c0104eb1:	01 d0                	add    %edx,%eax
+}
+c0104eb3:	c9                   	leave  
+c0104eb4:	c3                   	ret    
+
+c0104eb5 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0104eb5:	55                   	push   %ebp
+c0104eb6:	89 e5                	mov    %esp,%ebp
+c0104eb8:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0104ebb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ebe:	89 04 24             	mov    %eax,(%esp)
+c0104ec1:	e8 94 ff ff ff       	call   c0104e5a <page2pa>
+c0104ec6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104ec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ecc:	c1 e8 0c             	shr    $0xc,%eax
+c0104ecf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104ed2:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0104ed7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104eda:	72 23                	jb     c0104eff <page2kva+0x4a>
+c0104edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104ee3:	c7 44 24 08 bc cc 10 	movl   $0xc010ccbc,0x8(%esp)
+c0104eea:	c0 
+c0104eeb:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0104ef2:	00 
+c0104ef3:	c7 04 24 ab cc 10 c0 	movl   $0xc010ccab,(%esp)
+c0104efa:	e8 e2 be ff ff       	call   c0100de1 <__panic>
+c0104eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f02:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0104f07:	c9                   	leave  
+c0104f08:	c3                   	ret    
+
+c0104f09 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0104f09:	55                   	push   %ebp
+c0104f0a:	89 e5                	mov    %esp,%ebp
+c0104f0c:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0104f0f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f12:	83 e0 01             	and    $0x1,%eax
+c0104f15:	85 c0                	test   %eax,%eax
+c0104f17:	75 1c                	jne    c0104f35 <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0104f19:	c7 44 24 08 e0 cc 10 	movl   $0xc010cce0,0x8(%esp)
+c0104f20:	c0 
+c0104f21:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0104f28:	00 
+c0104f29:	c7 04 24 ab cc 10 c0 	movl   $0xc010ccab,(%esp)
+c0104f30:	e8 ac be ff ff       	call   c0100de1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0104f35:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104f3d:	89 04 24             	mov    %eax,(%esp)
+c0104f40:	e8 2b ff ff ff       	call   c0104e70 <pa2page>
+}
+c0104f45:	c9                   	leave  
+c0104f46:	c3                   	ret    
+
+c0104f47 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0104f47:	55                   	push   %ebp
+c0104f48:	89 e5                	mov    %esp,%ebp
+c0104f4a:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104f55:	89 04 24             	mov    %eax,(%esp)
+c0104f58:	e8 13 ff ff ff       	call   c0104e70 <pa2page>
+}
+c0104f5d:	c9                   	leave  
+c0104f5e:	c3                   	ret    
+
+c0104f5f <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c0104f5f:	55                   	push   %ebp
+c0104f60:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0104f62:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f65:	8b 00                	mov    (%eax),%eax
+}
+c0104f67:	5d                   	pop    %ebp
+c0104f68:	c3                   	ret    
+
+c0104f69 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0104f69:	55                   	push   %ebp
+c0104f6a:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0104f6c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f6f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0104f72:	89 10                	mov    %edx,(%eax)
+}
+c0104f74:	5d                   	pop    %ebp
+c0104f75:	c3                   	ret    
+
+c0104f76 <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c0104f76:	55                   	push   %ebp
+c0104f77:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c0104f79:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f7c:	8b 00                	mov    (%eax),%eax
+c0104f7e:	8d 50 01             	lea    0x1(%eax),%edx
+c0104f81:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f84:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104f86:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f89:	8b 00                	mov    (%eax),%eax
+}
+c0104f8b:	5d                   	pop    %ebp
+c0104f8c:	c3                   	ret    
+
+c0104f8d <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c0104f8d:	55                   	push   %ebp
+c0104f8e:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0104f90:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f93:	8b 00                	mov    (%eax),%eax
+c0104f95:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0104f98:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f9b:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104f9d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fa0:	8b 00                	mov    (%eax),%eax
+}
+c0104fa2:	5d                   	pop    %ebp
+c0104fa3:	c3                   	ret    
+
+c0104fa4 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0104fa4:	55                   	push   %ebp
+c0104fa5:	89 e5                	mov    %esp,%ebp
+c0104fa7:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0104faa:	9c                   	pushf  
+c0104fab:	58                   	pop    %eax
+c0104fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0104faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0104fb2:	25 00 02 00 00       	and    $0x200,%eax
+c0104fb7:	85 c0                	test   %eax,%eax
+c0104fb9:	74 0c                	je     c0104fc7 <__intr_save+0x23>
+        intr_disable();
+c0104fbb:	e8 8a d0 ff ff       	call   c010204a <intr_disable>
+        return 1;
+c0104fc0:	b8 01 00 00 00       	mov    $0x1,%eax
+c0104fc5:	eb 05                	jmp    c0104fcc <__intr_save+0x28>
+    }
+    return 0;
+c0104fc7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104fcc:	c9                   	leave  
+c0104fcd:	c3                   	ret    
+
+c0104fce <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0104fce:	55                   	push   %ebp
+c0104fcf:	89 e5                	mov    %esp,%ebp
+c0104fd1:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0104fd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104fd8:	74 05                	je     c0104fdf <__intr_restore+0x11>
+        intr_enable();
+c0104fda:	e8 65 d0 ff ff       	call   c0102044 <intr_enable>
+    }
+}
+c0104fdf:	c9                   	leave  
+c0104fe0:	c3                   	ret    
+
+c0104fe1 <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c0104fe1:	55                   	push   %ebp
+c0104fe2:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c0104fe4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fe7:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c0104fea:	b8 23 00 00 00       	mov    $0x23,%eax
+c0104fef:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c0104ff1:	b8 23 00 00 00       	mov    $0x23,%eax
+c0104ff6:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c0104ff8:	b8 10 00 00 00       	mov    $0x10,%eax
+c0104ffd:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c0104fff:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105004:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c0105006:	b8 10 00 00 00       	mov    $0x10,%eax
+c010500b:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c010500d:	ea 14 50 10 c0 08 00 	ljmp   $0x8,$0xc0105014
+}
+c0105014:	5d                   	pop    %ebp
+c0105015:	c3                   	ret    
+
+c0105016 <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c0105016:	55                   	push   %ebp
+c0105017:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c0105019:	8b 45 08             	mov    0x8(%ebp),%eax
+c010501c:	a3 c4 ef 19 c0       	mov    %eax,0xc019efc4
+}
+c0105021:	5d                   	pop    %ebp
+c0105022:	c3                   	ret    
+
+c0105023 <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c0105023:	55                   	push   %ebp
+c0105024:	89 e5                	mov    %esp,%ebp
+c0105026:	83 ec 14             	sub    $0x14,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c0105029:	b8 00 a0 12 c0       	mov    $0xc012a000,%eax
+c010502e:	89 04 24             	mov    %eax,(%esp)
+c0105031:	e8 e0 ff ff ff       	call   c0105016 <load_esp0>
+    ts.ts_ss0 = KERNEL_DS;
+c0105036:	66 c7 05 c8 ef 19 c0 	movw   $0x10,0xc019efc8
+c010503d:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c010503f:	66 c7 05 48 aa 12 c0 	movw   $0x68,0xc012aa48
+c0105046:	68 00 
+c0105048:	b8 c0 ef 19 c0       	mov    $0xc019efc0,%eax
+c010504d:	66 a3 4a aa 12 c0    	mov    %ax,0xc012aa4a
+c0105053:	b8 c0 ef 19 c0       	mov    $0xc019efc0,%eax
+c0105058:	c1 e8 10             	shr    $0x10,%eax
+c010505b:	a2 4c aa 12 c0       	mov    %al,0xc012aa4c
+c0105060:	0f b6 05 4d aa 12 c0 	movzbl 0xc012aa4d,%eax
+c0105067:	83 e0 f0             	and    $0xfffffff0,%eax
+c010506a:	83 c8 09             	or     $0x9,%eax
+c010506d:	a2 4d aa 12 c0       	mov    %al,0xc012aa4d
+c0105072:	0f b6 05 4d aa 12 c0 	movzbl 0xc012aa4d,%eax
+c0105079:	83 e0 ef             	and    $0xffffffef,%eax
+c010507c:	a2 4d aa 12 c0       	mov    %al,0xc012aa4d
+c0105081:	0f b6 05 4d aa 12 c0 	movzbl 0xc012aa4d,%eax
+c0105088:	83 e0 9f             	and    $0xffffff9f,%eax
+c010508b:	a2 4d aa 12 c0       	mov    %al,0xc012aa4d
+c0105090:	0f b6 05 4d aa 12 c0 	movzbl 0xc012aa4d,%eax
+c0105097:	83 c8 80             	or     $0xffffff80,%eax
+c010509a:	a2 4d aa 12 c0       	mov    %al,0xc012aa4d
+c010509f:	0f b6 05 4e aa 12 c0 	movzbl 0xc012aa4e,%eax
+c01050a6:	83 e0 f0             	and    $0xfffffff0,%eax
+c01050a9:	a2 4e aa 12 c0       	mov    %al,0xc012aa4e
+c01050ae:	0f b6 05 4e aa 12 c0 	movzbl 0xc012aa4e,%eax
+c01050b5:	83 e0 ef             	and    $0xffffffef,%eax
+c01050b8:	a2 4e aa 12 c0       	mov    %al,0xc012aa4e
+c01050bd:	0f b6 05 4e aa 12 c0 	movzbl 0xc012aa4e,%eax
+c01050c4:	83 e0 df             	and    $0xffffffdf,%eax
+c01050c7:	a2 4e aa 12 c0       	mov    %al,0xc012aa4e
+c01050cc:	0f b6 05 4e aa 12 c0 	movzbl 0xc012aa4e,%eax
+c01050d3:	83 c8 40             	or     $0x40,%eax
+c01050d6:	a2 4e aa 12 c0       	mov    %al,0xc012aa4e
+c01050db:	0f b6 05 4e aa 12 c0 	movzbl 0xc012aa4e,%eax
+c01050e2:	83 e0 7f             	and    $0x7f,%eax
+c01050e5:	a2 4e aa 12 c0       	mov    %al,0xc012aa4e
+c01050ea:	b8 c0 ef 19 c0       	mov    $0xc019efc0,%eax
+c01050ef:	c1 e8 18             	shr    $0x18,%eax
+c01050f2:	a2 4f aa 12 c0       	mov    %al,0xc012aa4f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c01050f7:	c7 04 24 50 aa 12 c0 	movl   $0xc012aa50,(%esp)
+c01050fe:	e8 de fe ff ff       	call   c0104fe1 <lgdt>
+c0105103:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c0105109:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c010510d:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0105110:	c9                   	leave  
+c0105111:	c3                   	ret    
+
+c0105112 <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c0105112:	55                   	push   %ebp
+c0105113:	89 e5                	mov    %esp,%ebp
+c0105115:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager = &default_pmm_manager;
+c0105118:	c7 05 84 10 1a c0 80 	movl   $0xc010cb80,0xc01a1084
+c010511f:	cb 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c0105122:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c0105127:	8b 00                	mov    (%eax),%eax
+c0105129:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010512d:	c7 04 24 0c cd 10 c0 	movl   $0xc010cd0c,(%esp)
+c0105134:	e8 26 b2 ff ff       	call   c010035f <cprintf>
+    pmm_manager->init();
+c0105139:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c010513e:	8b 40 04             	mov    0x4(%eax),%eax
+c0105141:	ff d0                	call   *%eax
+}
+c0105143:	c9                   	leave  
+c0105144:	c3                   	ret    
+
+c0105145 <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c0105145:	55                   	push   %ebp
+c0105146:	89 e5                	mov    %esp,%ebp
+c0105148:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->init_memmap(base, n);
+c010514b:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c0105150:	8b 40 08             	mov    0x8(%eax),%eax
+c0105153:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105156:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010515a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010515d:	89 14 24             	mov    %edx,(%esp)
+c0105160:	ff d0                	call   *%eax
+}
+c0105162:	c9                   	leave  
+c0105163:	c3                   	ret    
+
+c0105164 <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c0105164:	55                   	push   %ebp
+c0105165:	89 e5                	mov    %esp,%ebp
+c0105167:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page=NULL;
+c010516a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c0105171:	e8 2e fe ff ff       	call   c0104fa4 <__intr_save>
+c0105176:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c0105179:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c010517e:	8b 40 0c             	mov    0xc(%eax),%eax
+c0105181:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105184:	89 14 24             	mov    %edx,(%esp)
+c0105187:	ff d0                	call   *%eax
+c0105189:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c010518c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010518f:	89 04 24             	mov    %eax,(%esp)
+c0105192:	e8 37 fe ff ff       	call   c0104fce <__intr_restore>
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c0105197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010519b:	75 2d                	jne    c01051ca <alloc_pages+0x66>
+c010519d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01051a1:	77 27                	ja     c01051ca <alloc_pages+0x66>
+c01051a3:	a1 2c f0 19 c0       	mov    0xc019f02c,%eax
+c01051a8:	85 c0                	test   %eax,%eax
+c01051aa:	74 1e                	je     c01051ca <alloc_pages+0x66>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c01051ac:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051af:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c01051b4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01051bb:	00 
+c01051bc:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01051c0:	89 04 24             	mov    %eax,(%esp)
+c01051c3:	e8 19 1d 00 00       	call   c0106ee1 <swap_out>
+    }
+c01051c8:	eb a7                	jmp    c0105171 <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c01051ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01051cd:	c9                   	leave  
+c01051ce:	c3                   	ret    
+
+c01051cf <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c01051cf:	55                   	push   %ebp
+c01051d0:	89 e5                	mov    %esp,%ebp
+c01051d2:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01051d5:	e8 ca fd ff ff       	call   c0104fa4 <__intr_save>
+c01051da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c01051dd:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c01051e2:	8b 40 10             	mov    0x10(%eax),%eax
+c01051e5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01051e8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01051ec:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051ef:	89 14 24             	mov    %edx,(%esp)
+c01051f2:	ff d0                	call   *%eax
+    }
+    local_intr_restore(intr_flag);
+c01051f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01051f7:	89 04 24             	mov    %eax,(%esp)
+c01051fa:	e8 cf fd ff ff       	call   c0104fce <__intr_restore>
+}
+c01051ff:	c9                   	leave  
+c0105200:	c3                   	ret    
+
+c0105201 <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c0105201:	55                   	push   %ebp
+c0105202:	89 e5                	mov    %esp,%ebp
+c0105204:	83 ec 28             	sub    $0x28,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0105207:	e8 98 fd ff ff       	call   c0104fa4 <__intr_save>
+c010520c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c010520f:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c0105214:	8b 40 14             	mov    0x14(%eax),%eax
+c0105217:	ff d0                	call   *%eax
+c0105219:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c010521c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010521f:	89 04 24             	mov    %eax,(%esp)
+c0105222:	e8 a7 fd ff ff       	call   c0104fce <__intr_restore>
+    return ret;
+c0105227:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c010522a:	c9                   	leave  
+c010522b:	c3                   	ret    
+
+c010522c <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c010522c:	55                   	push   %ebp
+c010522d:	89 e5                	mov    %esp,%ebp
+c010522f:	57                   	push   %edi
+c0105230:	56                   	push   %esi
+c0105231:	53                   	push   %ebx
+c0105232:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0105238:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c010523f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c0105246:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c010524d:	c7 04 24 23 cd 10 c0 	movl   $0xc010cd23,(%esp)
+c0105254:	e8 06 b1 ff ff       	call   c010035f <cprintf>
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0105259:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0105260:	e9 15 01 00 00       	jmp    c010537a <page_init+0x14e>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0105265:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105268:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010526b:	89 d0                	mov    %edx,%eax
+c010526d:	c1 e0 02             	shl    $0x2,%eax
+c0105270:	01 d0                	add    %edx,%eax
+c0105272:	c1 e0 02             	shl    $0x2,%eax
+c0105275:	01 c8                	add    %ecx,%eax
+c0105277:	8b 50 08             	mov    0x8(%eax),%edx
+c010527a:	8b 40 04             	mov    0x4(%eax),%eax
+c010527d:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0105280:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c0105283:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105286:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105289:	89 d0                	mov    %edx,%eax
+c010528b:	c1 e0 02             	shl    $0x2,%eax
+c010528e:	01 d0                	add    %edx,%eax
+c0105290:	c1 e0 02             	shl    $0x2,%eax
+c0105293:	01 c8                	add    %ecx,%eax
+c0105295:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105298:	8b 58 10             	mov    0x10(%eax),%ebx
+c010529b:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010529e:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01052a1:	01 c8                	add    %ecx,%eax
+c01052a3:	11 da                	adc    %ebx,%edx
+c01052a5:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c01052a8:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c01052ab:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052b1:	89 d0                	mov    %edx,%eax
+c01052b3:	c1 e0 02             	shl    $0x2,%eax
+c01052b6:	01 d0                	add    %edx,%eax
+c01052b8:	c1 e0 02             	shl    $0x2,%eax
+c01052bb:	01 c8                	add    %ecx,%eax
+c01052bd:	83 c0 14             	add    $0x14,%eax
+c01052c0:	8b 00                	mov    (%eax),%eax
+c01052c2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
+c01052c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01052cb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01052ce:	83 c0 ff             	add    $0xffffffff,%eax
+c01052d1:	83 d2 ff             	adc    $0xffffffff,%edx
+c01052d4:	89 c6                	mov    %eax,%esi
+c01052d6:	89 d7                	mov    %edx,%edi
+c01052d8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052db:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052de:	89 d0                	mov    %edx,%eax
+c01052e0:	c1 e0 02             	shl    $0x2,%eax
+c01052e3:	01 d0                	add    %edx,%eax
+c01052e5:	c1 e0 02             	shl    $0x2,%eax
+c01052e8:	01 c8                	add    %ecx,%eax
+c01052ea:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01052ed:	8b 58 10             	mov    0x10(%eax),%ebx
+c01052f0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
+c01052f6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+c01052fa:	89 74 24 14          	mov    %esi,0x14(%esp)
+c01052fe:	89 7c 24 18          	mov    %edi,0x18(%esp)
+c0105302:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105305:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0105308:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010530c:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0105310:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0105314:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+c0105318:	c7 04 24 30 cd 10 c0 	movl   $0xc010cd30,(%esp)
+c010531f:	e8 3b b0 ff ff       	call   c010035f <cprintf>
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0105324:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105327:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010532a:	89 d0                	mov    %edx,%eax
+c010532c:	c1 e0 02             	shl    $0x2,%eax
+c010532f:	01 d0                	add    %edx,%eax
+c0105331:	c1 e0 02             	shl    $0x2,%eax
+c0105334:	01 c8                	add    %ecx,%eax
+c0105336:	83 c0 14             	add    $0x14,%eax
+c0105339:	8b 00                	mov    (%eax),%eax
+c010533b:	83 f8 01             	cmp    $0x1,%eax
+c010533e:	75 36                	jne    c0105376 <page_init+0x14a>
+            if (maxpa < end && begin < KMEMSIZE) {
+c0105340:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105343:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105346:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0105349:	77 2b                	ja     c0105376 <page_init+0x14a>
+c010534b:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c010534e:	72 05                	jb     c0105355 <page_init+0x129>
+c0105350:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c0105353:	73 21                	jae    c0105376 <page_init+0x14a>
+c0105355:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0105359:	77 1b                	ja     c0105376 <page_init+0x14a>
+c010535b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c010535f:	72 09                	jb     c010536a <page_init+0x13e>
+c0105361:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c0105368:	77 0c                	ja     c0105376 <page_init+0x14a>
+                maxpa = end;
+c010536a:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010536d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0105370:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105373:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0105376:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c010537a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010537d:	8b 00                	mov    (%eax),%eax
+c010537f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0105382:	0f 8f dd fe ff ff    	jg     c0105265 <page_init+0x39>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c0105388:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010538c:	72 1d                	jb     c01053ab <page_init+0x17f>
+c010538e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105392:	77 09                	ja     c010539d <page_init+0x171>
+c0105394:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c010539b:	76 0e                	jbe    c01053ab <page_init+0x17f>
+        maxpa = KMEMSIZE;
+c010539d:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c01053a4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c01053ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01053ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01053b1:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c01053b5:	c1 ea 0c             	shr    $0xc,%edx
+c01053b8:	a3 a0 ef 19 c0       	mov    %eax,0xc019efa0
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c01053bd:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c01053c4:	b8 78 11 1a c0       	mov    $0xc01a1178,%eax
+c01053c9:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01053cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01053cf:	01 d0                	add    %edx,%eax
+c01053d1:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c01053d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c01053d7:	ba 00 00 00 00       	mov    $0x0,%edx
+c01053dc:	f7 75 ac             	divl   -0x54(%ebp)
+c01053df:	89 d0                	mov    %edx,%eax
+c01053e1:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c01053e4:	29 c2                	sub    %eax,%edx
+c01053e6:	89 d0                	mov    %edx,%eax
+c01053e8:	a3 8c 10 1a c0       	mov    %eax,0xc01a108c
+
+    for (i = 0; i < npage; i ++) {
+c01053ed:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01053f4:	eb 27                	jmp    c010541d <page_init+0x1f1>
+        SetPageReserved(pages + i);
+c01053f6:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c01053fb:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01053fe:	c1 e2 05             	shl    $0x5,%edx
+c0105401:	01 d0                	add    %edx,%eax
+c0105403:	83 c0 04             	add    $0x4,%eax
+c0105406:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c010540d:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0105410:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0105413:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0105416:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c0105419:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c010541d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105420:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0105425:	39 c2                	cmp    %eax,%edx
+c0105427:	72 cd                	jb     c01053f6 <page_init+0x1ca>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0105429:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c010542e:	c1 e0 05             	shl    $0x5,%eax
+c0105431:	89 c2                	mov    %eax,%edx
+c0105433:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0105438:	01 d0                	add    %edx,%eax
+c010543a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c010543d:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c0105444:	77 23                	ja     c0105469 <page_init+0x23d>
+c0105446:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0105449:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010544d:	c7 44 24 08 60 cd 10 	movl   $0xc010cd60,0x8(%esp)
+c0105454:	c0 
+c0105455:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
+c010545c:	00 
+c010545d:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105464:	e8 78 b9 ff ff       	call   c0100de1 <__panic>
+c0105469:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c010546c:	05 00 00 00 40       	add    $0x40000000,%eax
+c0105471:	89 45 a0             	mov    %eax,-0x60(%ebp)
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0105474:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010547b:	e9 74 01 00 00       	jmp    c01055f4 <page_init+0x3c8>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0105480:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105483:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105486:	89 d0                	mov    %edx,%eax
+c0105488:	c1 e0 02             	shl    $0x2,%eax
+c010548b:	01 d0                	add    %edx,%eax
+c010548d:	c1 e0 02             	shl    $0x2,%eax
+c0105490:	01 c8                	add    %ecx,%eax
+c0105492:	8b 50 08             	mov    0x8(%eax),%edx
+c0105495:	8b 40 04             	mov    0x4(%eax),%eax
+c0105498:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010549b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010549e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01054a4:	89 d0                	mov    %edx,%eax
+c01054a6:	c1 e0 02             	shl    $0x2,%eax
+c01054a9:	01 d0                	add    %edx,%eax
+c01054ab:	c1 e0 02             	shl    $0x2,%eax
+c01054ae:	01 c8                	add    %ecx,%eax
+c01054b0:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01054b3:	8b 58 10             	mov    0x10(%eax),%ebx
+c01054b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01054b9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01054bc:	01 c8                	add    %ecx,%eax
+c01054be:	11 da                	adc    %ebx,%edx
+c01054c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01054c3:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c01054c6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01054cc:	89 d0                	mov    %edx,%eax
+c01054ce:	c1 e0 02             	shl    $0x2,%eax
+c01054d1:	01 d0                	add    %edx,%eax
+c01054d3:	c1 e0 02             	shl    $0x2,%eax
+c01054d6:	01 c8                	add    %ecx,%eax
+c01054d8:	83 c0 14             	add    $0x14,%eax
+c01054db:	8b 00                	mov    (%eax),%eax
+c01054dd:	83 f8 01             	cmp    $0x1,%eax
+c01054e0:	0f 85 0a 01 00 00    	jne    c01055f0 <page_init+0x3c4>
+            if (begin < freemem) {
+c01054e6:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c01054e9:	ba 00 00 00 00       	mov    $0x0,%edx
+c01054ee:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c01054f1:	72 17                	jb     c010550a <page_init+0x2de>
+c01054f3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c01054f6:	77 05                	ja     c01054fd <page_init+0x2d1>
+c01054f8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c01054fb:	76 0d                	jbe    c010550a <page_init+0x2de>
+                begin = freemem;
+c01054fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0105500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0105503:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c010550a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c010550e:	72 1d                	jb     c010552d <page_init+0x301>
+c0105510:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105514:	77 09                	ja     c010551f <page_init+0x2f3>
+c0105516:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c010551d:	76 0e                	jbe    c010552d <page_init+0x301>
+                end = KMEMSIZE;
+c010551f:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c0105526:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c010552d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105530:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105533:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105536:	0f 87 b4 00 00 00    	ja     c01055f0 <page_init+0x3c4>
+c010553c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c010553f:	72 09                	jb     c010554a <page_init+0x31e>
+c0105541:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0105544:	0f 83 a6 00 00 00    	jae    c01055f0 <page_init+0x3c4>
+                begin = ROUNDUP(begin, PGSIZE);
+c010554a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c0105551:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0105554:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0105557:	01 d0                	add    %edx,%eax
+c0105559:	83 e8 01             	sub    $0x1,%eax
+c010555c:	89 45 98             	mov    %eax,-0x68(%ebp)
+c010555f:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0105562:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105567:	f7 75 9c             	divl   -0x64(%ebp)
+c010556a:	89 d0                	mov    %edx,%eax
+c010556c:	8b 55 98             	mov    -0x68(%ebp),%edx
+c010556f:	29 c2                	sub    %eax,%edx
+c0105571:	89 d0                	mov    %edx,%eax
+c0105573:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105578:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010557b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c010557e:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105581:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0105584:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0105587:	ba 00 00 00 00       	mov    $0x0,%edx
+c010558c:	89 c7                	mov    %eax,%edi
+c010558e:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+c0105594:	89 7d 80             	mov    %edi,-0x80(%ebp)
+c0105597:	89 d0                	mov    %edx,%eax
+c0105599:	83 e0 00             	and    $0x0,%eax
+c010559c:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c010559f:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01055a2:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01055a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01055a8:	89 55 cc             	mov    %edx,-0x34(%ebp)
+                if (begin < end) {
+c01055ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01055ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01055b1:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c01055b4:	77 3a                	ja     c01055f0 <page_init+0x3c4>
+c01055b6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c01055b9:	72 05                	jb     c01055c0 <page_init+0x394>
+c01055bb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c01055be:	73 30                	jae    c01055f0 <page_init+0x3c4>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c01055c0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c01055c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+c01055c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01055c9:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01055cc:	29 c8                	sub    %ecx,%eax
+c01055ce:	19 da                	sbb    %ebx,%edx
+c01055d0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c01055d4:	c1 ea 0c             	shr    $0xc,%edx
+c01055d7:	89 c3                	mov    %eax,%ebx
+c01055d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01055dc:	89 04 24             	mov    %eax,(%esp)
+c01055df:	e8 8c f8 ff ff       	call   c0104e70 <pa2page>
+c01055e4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c01055e8:	89 04 24             	mov    %eax,(%esp)
+c01055eb:	e8 55 fb ff ff       	call   c0105145 <init_memmap>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01055f0:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c01055f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01055f7:	8b 00                	mov    (%eax),%eax
+c01055f9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c01055fc:	0f 8f 7e fe ff ff    	jg     c0105480 <page_init+0x254>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c0105602:	81 c4 9c 00 00 00    	add    $0x9c,%esp
+c0105608:	5b                   	pop    %ebx
+c0105609:	5e                   	pop    %esi
+c010560a:	5f                   	pop    %edi
+c010560b:	5d                   	pop    %ebp
+c010560c:	c3                   	ret    
+
+c010560d <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c010560d:	55                   	push   %ebp
+c010560e:	89 e5                	mov    %esp,%ebp
+c0105610:	83 ec 38             	sub    $0x38,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c0105613:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105616:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105619:	31 d0                	xor    %edx,%eax
+c010561b:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105620:	85 c0                	test   %eax,%eax
+c0105622:	74 24                	je     c0105648 <boot_map_segment+0x3b>
+c0105624:	c7 44 24 0c 92 cd 10 	movl   $0xc010cd92,0xc(%esp)
+c010562b:	c0 
+c010562c:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105633:	c0 
+c0105634:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
+c010563b:	00 
+c010563c:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105643:	e8 99 b7 ff ff       	call   c0100de1 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c0105648:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c010564f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105652:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105657:	89 c2                	mov    %eax,%edx
+c0105659:	8b 45 10             	mov    0x10(%ebp),%eax
+c010565c:	01 c2                	add    %eax,%edx
+c010565e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105661:	01 d0                	add    %edx,%eax
+c0105663:	83 e8 01             	sub    $0x1,%eax
+c0105666:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105669:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010566c:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105671:	f7 75 f0             	divl   -0x10(%ebp)
+c0105674:	89 d0                	mov    %edx,%eax
+c0105676:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0105679:	29 c2                	sub    %eax,%edx
+c010567b:	89 d0                	mov    %edx,%eax
+c010567d:	c1 e8 0c             	shr    $0xc,%eax
+c0105680:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0105683:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105686:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105689:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010568c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105691:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0105694:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105697:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010569a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010569d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01056a2:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c01056a5:	eb 6b                	jmp    c0105712 <boot_map_segment+0x105>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c01056a7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c01056ae:	00 
+c01056af:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01056b2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01056b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01056b9:	89 04 24             	mov    %eax,(%esp)
+c01056bc:	e8 87 01 00 00       	call   c0105848 <get_pte>
+c01056c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c01056c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01056c8:	75 24                	jne    c01056ee <boot_map_segment+0xe1>
+c01056ca:	c7 44 24 0c be cd 10 	movl   $0xc010cdbe,0xc(%esp)
+c01056d1:	c0 
+c01056d2:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01056d9:	c0 
+c01056da:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
+c01056e1:	00 
+c01056e2:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01056e9:	e8 f3 b6 ff ff       	call   c0100de1 <__panic>
+        *ptep = pa | PTE_P | perm;
+c01056ee:	8b 45 18             	mov    0x18(%ebp),%eax
+c01056f1:	8b 55 14             	mov    0x14(%ebp),%edx
+c01056f4:	09 d0                	or     %edx,%eax
+c01056f6:	83 c8 01             	or     $0x1,%eax
+c01056f9:	89 c2                	mov    %eax,%edx
+c01056fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01056fe:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0105700:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105704:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c010570b:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c0105712:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105716:	75 8f                	jne    c01056a7 <boot_map_segment+0x9a>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c0105718:	c9                   	leave  
+c0105719:	c3                   	ret    
+
+c010571a <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c010571a:	55                   	push   %ebp
+c010571b:	89 e5                	mov    %esp,%ebp
+c010571d:	83 ec 28             	sub    $0x28,%esp
+    struct Page *p = alloc_page();
+c0105720:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105727:	e8 38 fa ff ff       	call   c0105164 <alloc_pages>
+c010572c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c010572f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105733:	75 1c                	jne    c0105751 <boot_alloc_page+0x37>
+        panic("boot_alloc_page failed.\n");
+c0105735:	c7 44 24 08 cb cd 10 	movl   $0xc010cdcb,0x8(%esp)
+c010573c:	c0 
+c010573d:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
+c0105744:	00 
+c0105745:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010574c:	e8 90 b6 ff ff       	call   c0100de1 <__panic>
+    }
+    return page2kva(p);
+c0105751:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105754:	89 04 24             	mov    %eax,(%esp)
+c0105757:	e8 59 f7 ff ff       	call   c0104eb5 <page2kva>
+}
+c010575c:	c9                   	leave  
+c010575d:	c3                   	ret    
+
+c010575e <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c010575e:	55                   	push   %ebp
+c010575f:	89 e5                	mov    %esp,%ebp
+c0105761:	83 ec 38             	sub    $0x38,%esp
+    // We've already enabled paging
+    boot_cr3 = PADDR(boot_pgdir);
+c0105764:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0105769:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010576c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0105773:	77 23                	ja     c0105798 <pmm_init+0x3a>
+c0105775:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105778:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010577c:	c7 44 24 08 60 cd 10 	movl   $0xc010cd60,0x8(%esp)
+c0105783:	c0 
+c0105784:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
+c010578b:	00 
+c010578c:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105793:	e8 49 b6 ff ff       	call   c0100de1 <__panic>
+c0105798:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010579b:	05 00 00 00 40       	add    $0x40000000,%eax
+c01057a0:	a3 88 10 1a c0       	mov    %eax,0xc01a1088
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c01057a5:	e8 68 f9 ff ff       	call   c0105112 <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c01057aa:	e8 7d fa ff ff       	call   c010522c <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c01057af:	e8 d2 08 00 00       	call   c0106086 <check_alloc_page>
+
+    check_pgdir();
+c01057b4:	e8 eb 08 00 00       	call   c01060a4 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c01057b9:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01057be:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c01057c4:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01057c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01057cc:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c01057d3:	77 23                	ja     c01057f8 <pmm_init+0x9a>
+c01057d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01057d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01057dc:	c7 44 24 08 60 cd 10 	movl   $0xc010cd60,0x8(%esp)
+c01057e3:	c0 
+c01057e4:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
+c01057eb:	00 
+c01057ec:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01057f3:	e8 e9 b5 ff ff       	call   c0100de1 <__panic>
+c01057f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01057fb:	05 00 00 00 40       	add    $0x40000000,%eax
+c0105800:	83 c8 03             	or     $0x3,%eax
+c0105803:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c0105805:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010580a:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
+c0105811:	00 
+c0105812:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0105819:	00 
+c010581a:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
+c0105821:	38 
+c0105822:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+c0105829:	c0 
+c010582a:	89 04 24             	mov    %eax,(%esp)
+c010582d:	e8 db fd ff ff       	call   c010560d <boot_map_segment>
+
+    // Since we are using bootloader's GDT,
+    // we should reload gdt (second time, the last time) to get user segments and the TSS
+    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
+    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c0105832:	e8 ec f7 ff ff       	call   c0105023 <gdt_init>
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c0105837:	e8 03 0f 00 00       	call   c010673f <check_boot_pgdir>
+
+    print_pgdir();
+c010583c:	e8 8b 13 00 00       	call   c0106bcc <print_pgdir>
+    
+    kmalloc_init();
+c0105841:	e8 69 f3 ff ff       	call   c0104baf <kmalloc_init>
+
+}
+c0105846:	c9                   	leave  
+c0105847:	c3                   	ret    
+
+c0105848 <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c0105848:	55                   	push   %ebp
+c0105849:	89 e5                	mov    %esp,%ebp
+c010584b:	83 ec 38             	sub    $0x38,%esp
+                          // (6) clear page content using memset
+                          // (7) set page directory entry's permission
+    }
+    return NULL;          // (8) return page table entry
+#endif
+    pde_t *pdep = &pgdir[PDX(la)];
+c010584e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105851:	c1 e8 16             	shr    $0x16,%eax
+c0105854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010585b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010585e:	01 d0                	add    %edx,%eax
+c0105860:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!(*pdep & PTE_P)) {
+c0105863:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105866:	8b 00                	mov    (%eax),%eax
+c0105868:	83 e0 01             	and    $0x1,%eax
+c010586b:	85 c0                	test   %eax,%eax
+c010586d:	0f 85 af 00 00 00    	jne    c0105922 <get_pte+0xda>
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+c0105873:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105877:	74 15                	je     c010588e <get_pte+0x46>
+c0105879:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105880:	e8 df f8 ff ff       	call   c0105164 <alloc_pages>
+c0105885:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105888:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010588c:	75 0a                	jne    c0105898 <get_pte+0x50>
+            return NULL;
+c010588e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105893:	e9 e6 00 00 00       	jmp    c010597e <get_pte+0x136>
+        }
+        set_page_ref(page, 1);
+c0105898:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010589f:	00 
+c01058a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058a3:	89 04 24             	mov    %eax,(%esp)
+c01058a6:	e8 be f6 ff ff       	call   c0104f69 <set_page_ref>
+        uintptr_t pa = page2pa(page);
+c01058ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058ae:	89 04 24             	mov    %eax,(%esp)
+c01058b1:	e8 a4 f5 ff ff       	call   c0104e5a <page2pa>
+c01058b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        memset(KADDR(pa), 0, PGSIZE);
+c01058b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01058bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01058bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01058c2:	c1 e8 0c             	shr    $0xc,%eax
+c01058c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01058c8:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c01058cd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c01058d0:	72 23                	jb     c01058f5 <get_pte+0xad>
+c01058d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01058d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01058d9:	c7 44 24 08 bc cc 10 	movl   $0xc010ccbc,0x8(%esp)
+c01058e0:	c0 
+c01058e1:	c7 44 24 04 82 01 00 	movl   $0x182,0x4(%esp)
+c01058e8:	00 
+c01058e9:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01058f0:	e8 ec b4 ff ff       	call   c0100de1 <__panic>
+c01058f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01058f8:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01058fd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0105904:	00 
+c0105905:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010590c:	00 
+c010590d:	89 04 24             	mov    %eax,(%esp)
+c0105910:	e8 f5 63 00 00       	call   c010bd0a <memset>
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+c0105915:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105918:	83 c8 07             	or     $0x7,%eax
+c010591b:	89 c2                	mov    %eax,%edx
+c010591d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105920:	89 10                	mov    %edx,(%eax)
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+c0105922:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105925:	8b 00                	mov    (%eax),%eax
+c0105927:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010592c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010592f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105932:	c1 e8 0c             	shr    $0xc,%eax
+c0105935:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105938:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c010593d:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0105940:	72 23                	jb     c0105965 <get_pte+0x11d>
+c0105942:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105945:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105949:	c7 44 24 08 bc cc 10 	movl   $0xc010ccbc,0x8(%esp)
+c0105950:	c0 
+c0105951:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
+c0105958:	00 
+c0105959:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105960:	e8 7c b4 ff ff       	call   c0100de1 <__panic>
+c0105965:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105968:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c010596d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105970:	c1 ea 0c             	shr    $0xc,%edx
+c0105973:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+c0105979:	c1 e2 02             	shl    $0x2,%edx
+c010597c:	01 d0                	add    %edx,%eax
+}
+c010597e:	c9                   	leave  
+c010597f:	c3                   	ret    
+
+c0105980 <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c0105980:	55                   	push   %ebp
+c0105981:	89 e5                	mov    %esp,%ebp
+c0105983:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105986:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010598d:	00 
+c010598e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105991:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105995:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105998:	89 04 24             	mov    %eax,(%esp)
+c010599b:	e8 a8 fe ff ff       	call   c0105848 <get_pte>
+c01059a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c01059a3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01059a7:	74 08                	je     c01059b1 <get_page+0x31>
+        *ptep_store = ptep;
+c01059a9:	8b 45 10             	mov    0x10(%ebp),%eax
+c01059ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01059af:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c01059b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01059b5:	74 1b                	je     c01059d2 <get_page+0x52>
+c01059b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059ba:	8b 00                	mov    (%eax),%eax
+c01059bc:	83 e0 01             	and    $0x1,%eax
+c01059bf:	85 c0                	test   %eax,%eax
+c01059c1:	74 0f                	je     c01059d2 <get_page+0x52>
+        return pte2page(*ptep);
+c01059c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059c6:	8b 00                	mov    (%eax),%eax
+c01059c8:	89 04 24             	mov    %eax,(%esp)
+c01059cb:	e8 39 f5 ff ff       	call   c0104f09 <pte2page>
+c01059d0:	eb 05                	jmp    c01059d7 <get_page+0x57>
+    }
+    return NULL;
+c01059d2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01059d7:	c9                   	leave  
+c01059d8:	c3                   	ret    
+
+c01059d9 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c01059d9:	55                   	push   %ebp
+c01059da:	89 e5                	mov    %esp,%ebp
+c01059dc:	83 ec 28             	sub    $0x28,%esp
+                                  //(4) and free this page when page reference reachs 0
+                                  //(5) clear second page table entry
+                                  //(6) flush tlb
+    }
+#endif
+    if (*ptep & PTE_P) {
+c01059df:	8b 45 10             	mov    0x10(%ebp),%eax
+c01059e2:	8b 00                	mov    (%eax),%eax
+c01059e4:	83 e0 01             	and    $0x1,%eax
+c01059e7:	85 c0                	test   %eax,%eax
+c01059e9:	74 4d                	je     c0105a38 <page_remove_pte+0x5f>
+        struct Page *page = pte2page(*ptep);
+c01059eb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01059ee:	8b 00                	mov    (%eax),%eax
+c01059f0:	89 04 24             	mov    %eax,(%esp)
+c01059f3:	e8 11 f5 ff ff       	call   c0104f09 <pte2page>
+c01059f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (page_ref_dec(page) == 0) {
+c01059fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059fe:	89 04 24             	mov    %eax,(%esp)
+c0105a01:	e8 87 f5 ff ff       	call   c0104f8d <page_ref_dec>
+c0105a06:	85 c0                	test   %eax,%eax
+c0105a08:	75 13                	jne    c0105a1d <page_remove_pte+0x44>
+            free_page(page);
+c0105a0a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105a11:	00 
+c0105a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105a15:	89 04 24             	mov    %eax,(%esp)
+c0105a18:	e8 b2 f7 ff ff       	call   c01051cf <free_pages>
+        }
+        *ptep = 0;
+c0105a1d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        tlb_invalidate(pgdir, la);
+c0105a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a29:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105a2d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105a30:	89 04 24             	mov    %eax,(%esp)
+c0105a33:	e8 1d 05 00 00       	call   c0105f55 <tlb_invalidate>
+    }
+}
+c0105a38:	c9                   	leave  
+c0105a39:	c3                   	ret    
+
+c0105a3a <unmap_range>:
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105a3a:	55                   	push   %ebp
+c0105a3b:	89 e5                	mov    %esp,%ebp
+c0105a3d:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105a40:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a43:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105a48:	85 c0                	test   %eax,%eax
+c0105a4a:	75 0c                	jne    c0105a58 <unmap_range+0x1e>
+c0105a4c:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a4f:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105a54:	85 c0                	test   %eax,%eax
+c0105a56:	74 24                	je     c0105a7c <unmap_range+0x42>
+c0105a58:	c7 44 24 0c e4 cd 10 	movl   $0xc010cde4,0xc(%esp)
+c0105a5f:	c0 
+c0105a60:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105a67:	c0 
+c0105a68:	c7 44 24 04 bf 01 00 	movl   $0x1bf,0x4(%esp)
+c0105a6f:	00 
+c0105a70:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105a77:	e8 65 b3 ff ff       	call   c0100de1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105a7c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105a83:	76 11                	jbe    c0105a96 <unmap_range+0x5c>
+c0105a85:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a88:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105a8b:	73 09                	jae    c0105a96 <unmap_range+0x5c>
+c0105a8d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105a94:	76 24                	jbe    c0105aba <unmap_range+0x80>
+c0105a96:	c7 44 24 0c 0d ce 10 	movl   $0xc010ce0d,0xc(%esp)
+c0105a9d:	c0 
+c0105a9e:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105aa5:	c0 
+c0105aa6:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
+c0105aad:	00 
+c0105aae:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105ab5:	e8 27 b3 ff ff       	call   c0100de1 <__panic>
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c0105aba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105ac1:	00 
+c0105ac2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ac5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ac9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105acc:	89 04 24             	mov    %eax,(%esp)
+c0105acf:	e8 74 fd ff ff       	call   c0105848 <get_pte>
+c0105ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105ad7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105adb:	75 18                	jne    c0105af5 <unmap_range+0xbb>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105add:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ae0:	05 00 00 40 00       	add    $0x400000,%eax
+c0105ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105ae8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105aeb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105af0:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue ;
+c0105af3:	eb 29                	jmp    c0105b1e <unmap_range+0xe4>
+        }
+        if (*ptep != 0) {
+c0105af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105af8:	8b 00                	mov    (%eax),%eax
+c0105afa:	85 c0                	test   %eax,%eax
+c0105afc:	74 19                	je     c0105b17 <unmap_range+0xdd>
+            page_remove_pte(pgdir, start, ptep);
+c0105afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b01:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105b05:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b08:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105b0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105b0f:	89 04 24             	mov    %eax,(%esp)
+c0105b12:	e8 c2 fe ff ff       	call   c01059d9 <page_remove_pte>
+        }
+        start += PGSIZE;
+c0105b17:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105b1e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105b22:	74 08                	je     c0105b2c <unmap_range+0xf2>
+c0105b24:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b27:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105b2a:	72 8e                	jb     c0105aba <unmap_range+0x80>
+}
+c0105b2c:	c9                   	leave  
+c0105b2d:	c3                   	ret    
+
+c0105b2e <exit_range>:
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105b2e:	55                   	push   %ebp
+c0105b2f:	89 e5                	mov    %esp,%ebp
+c0105b31:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105b34:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b37:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b3c:	85 c0                	test   %eax,%eax
+c0105b3e:	75 0c                	jne    c0105b4c <exit_range+0x1e>
+c0105b40:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105b43:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b48:	85 c0                	test   %eax,%eax
+c0105b4a:	74 24                	je     c0105b70 <exit_range+0x42>
+c0105b4c:	c7 44 24 0c e4 cd 10 	movl   $0xc010cde4,0xc(%esp)
+c0105b53:	c0 
+c0105b54:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105b5b:	c0 
+c0105b5c:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
+c0105b63:	00 
+c0105b64:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105b6b:	e8 71 b2 ff ff       	call   c0100de1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105b70:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105b77:	76 11                	jbe    c0105b8a <exit_range+0x5c>
+c0105b79:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b7c:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105b7f:	73 09                	jae    c0105b8a <exit_range+0x5c>
+c0105b81:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105b88:	76 24                	jbe    c0105bae <exit_range+0x80>
+c0105b8a:	c7 44 24 0c 0d ce 10 	movl   $0xc010ce0d,0xc(%esp)
+c0105b91:	c0 
+c0105b92:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105b99:	c0 
+c0105b9a:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
+c0105ba1:	00 
+c0105ba2:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105ba9:	e8 33 b2 ff ff       	call   c0100de1 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c0105bae:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bb7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105bbc:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do {
+        int pde_idx = PDX(start);
+c0105bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bc2:	c1 e8 16             	shr    $0x16,%eax
+c0105bc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P) {
+c0105bc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105bcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105bd2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bd5:	01 d0                	add    %edx,%eax
+c0105bd7:	8b 00                	mov    (%eax),%eax
+c0105bd9:	83 e0 01             	and    $0x1,%eax
+c0105bdc:	85 c0                	test   %eax,%eax
+c0105bde:	74 3e                	je     c0105c1e <exit_range+0xf0>
+            free_page(pde2page(pgdir[pde_idx]));
+c0105be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105be3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105bea:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bed:	01 d0                	add    %edx,%eax
+c0105bef:	8b 00                	mov    (%eax),%eax
+c0105bf1:	89 04 24             	mov    %eax,(%esp)
+c0105bf4:	e8 4e f3 ff ff       	call   c0104f47 <pde2page>
+c0105bf9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105c00:	00 
+c0105c01:	89 04 24             	mov    %eax,(%esp)
+c0105c04:	e8 c6 f5 ff ff       	call   c01051cf <free_pages>
+            pgdir[pde_idx] = 0;
+c0105c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105c0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105c13:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c16:	01 d0                	add    %edx,%eax
+c0105c18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c0105c1e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105c25:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105c29:	74 08                	je     c0105c33 <exit_range+0x105>
+c0105c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c2e:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105c31:	72 8c                	jb     c0105bbf <exit_range+0x91>
+}
+c0105c33:	c9                   	leave  
+c0105c34:	c3                   	ret    
+
+c0105c35 <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+c0105c35:	55                   	push   %ebp
+c0105c36:	89 e5                	mov    %esp,%ebp
+c0105c38:	83 ec 48             	sub    $0x48,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105c3b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105c3e:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c43:	85 c0                	test   %eax,%eax
+c0105c45:	75 0c                	jne    c0105c53 <copy_range+0x1e>
+c0105c47:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105c4a:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c4f:	85 c0                	test   %eax,%eax
+c0105c51:	74 24                	je     c0105c77 <copy_range+0x42>
+c0105c53:	c7 44 24 0c e4 cd 10 	movl   $0xc010cde4,0xc(%esp)
+c0105c5a:	c0 
+c0105c5b:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105c62:	c0 
+c0105c63:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
+c0105c6a:	00 
+c0105c6b:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105c72:	e8 6a b1 ff ff       	call   c0100de1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105c77:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c0105c7e:	76 11                	jbe    c0105c91 <copy_range+0x5c>
+c0105c80:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105c83:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105c86:	73 09                	jae    c0105c91 <copy_range+0x5c>
+c0105c88:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c0105c8f:	76 24                	jbe    c0105cb5 <copy_range+0x80>
+c0105c91:	c7 44 24 0c 0d ce 10 	movl   $0xc010ce0d,0xc(%esp)
+c0105c98:	c0 
+c0105c99:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105ca0:	c0 
+c0105ca1:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
+c0105ca8:	00 
+c0105ca9:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105cb0:	e8 2c b1 ff ff       	call   c0100de1 <__panic>
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c0105cb5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105cbc:	00 
+c0105cbd:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105cc0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105cc7:	89 04 24             	mov    %eax,(%esp)
+c0105cca:	e8 79 fb ff ff       	call   c0105848 <get_pte>
+c0105ccf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105cd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105cd6:	75 1b                	jne    c0105cf3 <copy_range+0xbe>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105cd8:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105cdb:	05 00 00 40 00       	add    $0x400000,%eax
+c0105ce0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105ce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ce6:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105ceb:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue ;
+c0105cee:	e9 4c 01 00 00       	jmp    c0105e3f <copy_range+0x20a>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+c0105cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105cf6:	8b 00                	mov    (%eax),%eax
+c0105cf8:	83 e0 01             	and    $0x1,%eax
+c0105cfb:	85 c0                	test   %eax,%eax
+c0105cfd:	0f 84 35 01 00 00    	je     c0105e38 <copy_range+0x203>
+            if ((nptep = get_pte(to, start, 1)) == NULL) {
+c0105d03:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105d0a:	00 
+c0105d0b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d0e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105d12:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105d15:	89 04 24             	mov    %eax,(%esp)
+c0105d18:	e8 2b fb ff ff       	call   c0105848 <get_pte>
+c0105d1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105d20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0105d24:	75 0a                	jne    c0105d30 <copy_range+0xfb>
+                return -E_NO_MEM;
+c0105d26:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105d2b:	e9 26 01 00 00       	jmp    c0105e56 <copy_range+0x221>
+            }
+        uint32_t perm = (*ptep & PTE_USER);
+c0105d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105d33:	8b 00                	mov    (%eax),%eax
+c0105d35:	83 e0 07             	and    $0x7,%eax
+c0105d38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        //get page from ptep
+        struct Page *page = pte2page(*ptep);
+c0105d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105d3e:	8b 00                	mov    (%eax),%eax
+c0105d40:	89 04 24             	mov    %eax,(%esp)
+c0105d43:	e8 c1 f1 ff ff       	call   c0104f09 <pte2page>
+c0105d48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        // alloc a page for process B
+        struct Page *npage=alloc_page();
+c0105d4b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105d52:	e8 0d f4 ff ff       	call   c0105164 <alloc_pages>
+c0105d57:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(page!=NULL);
+c0105d5a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105d5e:	75 24                	jne    c0105d84 <copy_range+0x14f>
+c0105d60:	c7 44 24 0c 25 ce 10 	movl   $0xc010ce25,0xc(%esp)
+c0105d67:	c0 
+c0105d68:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105d6f:	c0 
+c0105d70:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
+c0105d77:	00 
+c0105d78:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105d7f:	e8 5d b0 ff ff       	call   c0100de1 <__panic>
+        assert(npage!=NULL);
+c0105d84:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0105d88:	75 24                	jne    c0105dae <copy_range+0x179>
+c0105d8a:	c7 44 24 0c 30 ce 10 	movl   $0xc010ce30,0xc(%esp)
+c0105d91:	c0 
+c0105d92:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105d99:	c0 
+c0105d9a:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
+c0105da1:	00 
+c0105da2:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105da9:	e8 33 b0 ff ff       	call   c0100de1 <__panic>
+        int ret=0;
+c0105dae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+        void * kva_src = page2kva(page);
+c0105db5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105db8:	89 04 24             	mov    %eax,(%esp)
+c0105dbb:	e8 f5 f0 ff ff       	call   c0104eb5 <page2kva>
+c0105dc0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        void * kva_dst = page2kva(npage);
+c0105dc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105dc6:	89 04 24             	mov    %eax,(%esp)
+c0105dc9:	e8 e7 f0 ff ff       	call   c0104eb5 <page2kva>
+c0105dce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        memcpy(kva_dst, kva_src, PGSIZE);
+c0105dd1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0105dd8:	00 
+c0105dd9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105ddc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105de0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105de3:	89 04 24             	mov    %eax,(%esp)
+c0105de6:	e8 01 60 00 00       	call   c010bdec <memcpy>
+        ret = page_insert(to, npage, start, perm);
+c0105deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105dee:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105df2:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105df5:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105df9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105dfc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105e00:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e03:	89 04 24             	mov    %eax,(%esp)
+c0105e06:	e8 91 00 00 00       	call   c0105e9c <page_insert>
+c0105e0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(ret == 0);
+c0105e0e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105e12:	74 24                	je     c0105e38 <copy_range+0x203>
+c0105e14:	c7 44 24 0c 3c ce 10 	movl   $0xc010ce3c,0xc(%esp)
+c0105e1b:	c0 
+c0105e1c:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0105e23:	c0 
+c0105e24:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
+c0105e2b:	00 
+c0105e2c:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105e33:	e8 a9 af ff ff       	call   c0100de1 <__panic>
+        }
+        start += PGSIZE;
+c0105e38:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c0105e3f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105e43:	74 0c                	je     c0105e51 <copy_range+0x21c>
+c0105e45:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105e48:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105e4b:	0f 82 64 fe ff ff    	jb     c0105cb5 <copy_range+0x80>
+    return 0;
+c0105e51:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105e56:	c9                   	leave  
+c0105e57:	c3                   	ret    
+
+c0105e58 <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c0105e58:	55                   	push   %ebp
+c0105e59:	89 e5                	mov    %esp,%ebp
+c0105e5b:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105e5e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105e65:	00 
+c0105e66:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105e69:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105e6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e70:	89 04 24             	mov    %eax,(%esp)
+c0105e73:	e8 d0 f9 ff ff       	call   c0105848 <get_pte>
+c0105e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c0105e7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105e7f:	74 19                	je     c0105e9a <page_remove+0x42>
+        page_remove_pte(pgdir, la, ptep);
+c0105e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e84:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105e88:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105e8b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105e8f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e92:	89 04 24             	mov    %eax,(%esp)
+c0105e95:	e8 3f fb ff ff       	call   c01059d9 <page_remove_pte>
+    }
+}
+c0105e9a:	c9                   	leave  
+c0105e9b:	c3                   	ret    
+
+c0105e9c <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c0105e9c:	55                   	push   %ebp
+c0105e9d:	89 e5                	mov    %esp,%ebp
+c0105e9f:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0105ea2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105ea9:	00 
+c0105eaa:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ead:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105eb1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105eb4:	89 04 24             	mov    %eax,(%esp)
+c0105eb7:	e8 8c f9 ff ff       	call   c0105848 <get_pte>
+c0105ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0105ebf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105ec3:	75 0a                	jne    c0105ecf <page_insert+0x33>
+        return -E_NO_MEM;
+c0105ec5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105eca:	e9 84 00 00 00       	jmp    c0105f53 <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0105ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ed2:	89 04 24             	mov    %eax,(%esp)
+c0105ed5:	e8 9c f0 ff ff       	call   c0104f76 <page_ref_inc>
+    if (*ptep & PTE_P) {
+c0105eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105edd:	8b 00                	mov    (%eax),%eax
+c0105edf:	83 e0 01             	and    $0x1,%eax
+c0105ee2:	85 c0                	test   %eax,%eax
+c0105ee4:	74 3e                	je     c0105f24 <page_insert+0x88>
+        struct Page *p = pte2page(*ptep);
+c0105ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105ee9:	8b 00                	mov    (%eax),%eax
+c0105eeb:	89 04 24             	mov    %eax,(%esp)
+c0105eee:	e8 16 f0 ff ff       	call   c0104f09 <pte2page>
+c0105ef3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0105ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ef9:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105efc:	75 0d                	jne    c0105f0b <page_insert+0x6f>
+            page_ref_dec(page);
+c0105efe:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f01:	89 04 24             	mov    %eax,(%esp)
+c0105f04:	e8 84 f0 ff ff       	call   c0104f8d <page_ref_dec>
+c0105f09:	eb 19                	jmp    c0105f24 <page_insert+0x88>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c0105f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f0e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105f12:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f15:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f19:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f1c:	89 04 24             	mov    %eax,(%esp)
+c0105f1f:	e8 b5 fa ff ff       	call   c01059d9 <page_remove_pte>
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0105f24:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f27:	89 04 24             	mov    %eax,(%esp)
+c0105f2a:	e8 2b ef ff ff       	call   c0104e5a <page2pa>
+c0105f2f:	0b 45 14             	or     0x14(%ebp),%eax
+c0105f32:	83 c8 01             	or     $0x1,%eax
+c0105f35:	89 c2                	mov    %eax,%edx
+c0105f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f3a:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c0105f3c:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f3f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f43:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f46:	89 04 24             	mov    %eax,(%esp)
+c0105f49:	e8 07 00 00 00       	call   c0105f55 <tlb_invalidate>
+    return 0;
+c0105f4e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105f53:	c9                   	leave  
+c0105f54:	c3                   	ret    
+
+c0105f55 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c0105f55:	55                   	push   %ebp
+c0105f56:	89 e5                	mov    %esp,%ebp
+c0105f58:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c0105f5b:	0f 20 d8             	mov    %cr3,%eax
+c0105f5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr3;
+c0105f61:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    if (rcr3() == PADDR(pgdir)) {
+c0105f64:	89 c2                	mov    %eax,%edx
+c0105f66:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f69:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105f6c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0105f73:	77 23                	ja     c0105f98 <tlb_invalidate+0x43>
+c0105f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f78:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105f7c:	c7 44 24 08 60 cd 10 	movl   $0xc010cd60,0x8(%esp)
+c0105f83:	c0 
+c0105f84:	c7 44 24 04 41 02 00 	movl   $0x241,0x4(%esp)
+c0105f8b:	00 
+c0105f8c:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0105f93:	e8 49 ae ff ff       	call   c0100de1 <__panic>
+c0105f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f9b:	05 00 00 00 40       	add    $0x40000000,%eax
+c0105fa0:	39 c2                	cmp    %eax,%edx
+c0105fa2:	75 0c                	jne    c0105fb0 <tlb_invalidate+0x5b>
+        invlpg((void *)la);
+c0105fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fa7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c0105faa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105fad:	0f 01 38             	invlpg (%eax)
+    }
+}
+c0105fb0:	c9                   	leave  
+c0105fb1:	c3                   	ret    
+
+c0105fb2 <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c0105fb2:	55                   	push   %ebp
+c0105fb3:	89 e5                	mov    %esp,%ebp
+c0105fb5:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_page();
+c0105fb8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105fbf:	e8 a0 f1 ff ff       	call   c0105164 <alloc_pages>
+c0105fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c0105fc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105fcb:	0f 84 b0 00 00 00    	je     c0106081 <pgdir_alloc_page+0xcf>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c0105fd1:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105fd4:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fdb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fe2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105fe9:	89 04 24             	mov    %eax,(%esp)
+c0105fec:	e8 ab fe ff ff       	call   c0105e9c <page_insert>
+c0105ff1:	85 c0                	test   %eax,%eax
+c0105ff3:	74 1a                	je     c010600f <pgdir_alloc_page+0x5d>
+            free_page(page);
+c0105ff5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105ffc:	00 
+c0105ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106000:	89 04 24             	mov    %eax,(%esp)
+c0106003:	e8 c7 f1 ff ff       	call   c01051cf <free_pages>
+            return NULL;
+c0106008:	b8 00 00 00 00       	mov    $0x0,%eax
+c010600d:	eb 75                	jmp    c0106084 <pgdir_alloc_page+0xd2>
+        }
+        if (swap_init_ok){
+c010600f:	a1 2c f0 19 c0       	mov    0xc019f02c,%eax
+c0106014:	85 c0                	test   %eax,%eax
+c0106016:	74 69                	je     c0106081 <pgdir_alloc_page+0xcf>
+            if(check_mm_struct!=NULL) {
+c0106018:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c010601d:	85 c0                	test   %eax,%eax
+c010601f:	74 60                	je     c0106081 <pgdir_alloc_page+0xcf>
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c0106021:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c0106026:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010602d:	00 
+c010602e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106031:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106035:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106038:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010603c:	89 04 24             	mov    %eax,(%esp)
+c010603f:	e8 51 0e 00 00       	call   c0106e95 <swap_map_swappable>
+                page->pra_vaddr=la;
+c0106044:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106047:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010604a:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c010604d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106050:	89 04 24             	mov    %eax,(%esp)
+c0106053:	e8 07 ef ff ff       	call   c0104f5f <page_ref>
+c0106058:	83 f8 01             	cmp    $0x1,%eax
+c010605b:	74 24                	je     c0106081 <pgdir_alloc_page+0xcf>
+c010605d:	c7 44 24 0c 45 ce 10 	movl   $0xc010ce45,0xc(%esp)
+c0106064:	c0 
+c0106065:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010606c:	c0 
+c010606d:	c7 44 24 04 55 02 00 	movl   $0x255,0x4(%esp)
+c0106074:	00 
+c0106075:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010607c:	e8 60 ad ff ff       	call   c0100de1 <__panic>
+            }
+        }
+
+    }
+
+    return page;
+c0106081:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106084:	c9                   	leave  
+c0106085:	c3                   	ret    
+
+c0106086 <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c0106086:	55                   	push   %ebp
+c0106087:	89 e5                	mov    %esp,%ebp
+c0106089:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->check();
+c010608c:	a1 84 10 1a c0       	mov    0xc01a1084,%eax
+c0106091:	8b 40 18             	mov    0x18(%eax),%eax
+c0106094:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c0106096:	c7 04 24 5c ce 10 c0 	movl   $0xc010ce5c,(%esp)
+c010609d:	e8 bd a2 ff ff       	call   c010035f <cprintf>
+}
+c01060a2:	c9                   	leave  
+c01060a3:	c3                   	ret    
+
+c01060a4 <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c01060a4:	55                   	push   %ebp
+c01060a5:	89 e5                	mov    %esp,%ebp
+c01060a7:	83 ec 38             	sub    $0x38,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c01060aa:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c01060af:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c01060b4:	76 24                	jbe    c01060da <check_pgdir+0x36>
+c01060b6:	c7 44 24 0c 7b ce 10 	movl   $0xc010ce7b,0xc(%esp)
+c01060bd:	c0 
+c01060be:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01060c5:	c0 
+c01060c6:	c7 44 24 04 6d 02 00 	movl   $0x26d,0x4(%esp)
+c01060cd:	00 
+c01060ce:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01060d5:	e8 07 ad ff ff       	call   c0100de1 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c01060da:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01060df:	85 c0                	test   %eax,%eax
+c01060e1:	74 0e                	je     c01060f1 <check_pgdir+0x4d>
+c01060e3:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01060e8:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01060ed:	85 c0                	test   %eax,%eax
+c01060ef:	74 24                	je     c0106115 <check_pgdir+0x71>
+c01060f1:	c7 44 24 0c 98 ce 10 	movl   $0xc010ce98,0xc(%esp)
+c01060f8:	c0 
+c01060f9:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106100:	c0 
+c0106101:	c7 44 24 04 6e 02 00 	movl   $0x26e,0x4(%esp)
+c0106108:	00 
+c0106109:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106110:	e8 cc ac ff ff       	call   c0100de1 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c0106115:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010611a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106121:	00 
+c0106122:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0106129:	00 
+c010612a:	89 04 24             	mov    %eax,(%esp)
+c010612d:	e8 4e f8 ff ff       	call   c0105980 <get_page>
+c0106132:	85 c0                	test   %eax,%eax
+c0106134:	74 24                	je     c010615a <check_pgdir+0xb6>
+c0106136:	c7 44 24 0c d0 ce 10 	movl   $0xc010ced0,0xc(%esp)
+c010613d:	c0 
+c010613e:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106145:	c0 
+c0106146:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
+c010614d:	00 
+c010614e:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106155:	e8 87 ac ff ff       	call   c0100de1 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c010615a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0106161:	e8 fe ef ff ff       	call   c0105164 <alloc_pages>
+c0106166:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c0106169:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010616e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106175:	00 
+c0106176:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010617d:	00 
+c010617e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106181:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106185:	89 04 24             	mov    %eax,(%esp)
+c0106188:	e8 0f fd ff ff       	call   c0105e9c <page_insert>
+c010618d:	85 c0                	test   %eax,%eax
+c010618f:	74 24                	je     c01061b5 <check_pgdir+0x111>
+c0106191:	c7 44 24 0c f8 ce 10 	movl   $0xc010cef8,0xc(%esp)
+c0106198:	c0 
+c0106199:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01061a0:	c0 
+c01061a1:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
+c01061a8:	00 
+c01061a9:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01061b0:	e8 2c ac ff ff       	call   c0100de1 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c01061b5:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01061ba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01061c1:	00 
+c01061c2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01061c9:	00 
+c01061ca:	89 04 24             	mov    %eax,(%esp)
+c01061cd:	e8 76 f6 ff ff       	call   c0105848 <get_pte>
+c01061d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01061d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01061d9:	75 24                	jne    c01061ff <check_pgdir+0x15b>
+c01061db:	c7 44 24 0c 24 cf 10 	movl   $0xc010cf24,0xc(%esp)
+c01061e2:	c0 
+c01061e3:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01061ea:	c0 
+c01061eb:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c01061f2:	00 
+c01061f3:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01061fa:	e8 e2 ab ff ff       	call   c0100de1 <__panic>
+    assert(pte2page(*ptep) == p1);
+c01061ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106202:	8b 00                	mov    (%eax),%eax
+c0106204:	89 04 24             	mov    %eax,(%esp)
+c0106207:	e8 fd ec ff ff       	call   c0104f09 <pte2page>
+c010620c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010620f:	74 24                	je     c0106235 <check_pgdir+0x191>
+c0106211:	c7 44 24 0c 51 cf 10 	movl   $0xc010cf51,0xc(%esp)
+c0106218:	c0 
+c0106219:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106220:	c0 
+c0106221:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
+c0106228:	00 
+c0106229:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106230:	e8 ac ab ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p1) == 1);
+c0106235:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106238:	89 04 24             	mov    %eax,(%esp)
+c010623b:	e8 1f ed ff ff       	call   c0104f5f <page_ref>
+c0106240:	83 f8 01             	cmp    $0x1,%eax
+c0106243:	74 24                	je     c0106269 <check_pgdir+0x1c5>
+c0106245:	c7 44 24 0c 67 cf 10 	movl   $0xc010cf67,0xc(%esp)
+c010624c:	c0 
+c010624d:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106254:	c0 
+c0106255:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
+c010625c:	00 
+c010625d:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106264:	e8 78 ab ff ff       	call   c0100de1 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c0106269:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010626e:	8b 00                	mov    (%eax),%eax
+c0106270:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106275:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106278:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010627b:	c1 e8 0c             	shr    $0xc,%eax
+c010627e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0106281:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0106286:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0106289:	72 23                	jb     c01062ae <check_pgdir+0x20a>
+c010628b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010628e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106292:	c7 44 24 08 bc cc 10 	movl   $0xc010ccbc,0x8(%esp)
+c0106299:	c0 
+c010629a:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
+c01062a1:	00 
+c01062a2:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01062a9:	e8 33 ab ff ff       	call   c0100de1 <__panic>
+c01062ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01062b1:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01062b6:	83 c0 04             	add    $0x4,%eax
+c01062b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c01062bc:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01062c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01062c8:	00 
+c01062c9:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c01062d0:	00 
+c01062d1:	89 04 24             	mov    %eax,(%esp)
+c01062d4:	e8 6f f5 ff ff       	call   c0105848 <get_pte>
+c01062d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01062dc:	74 24                	je     c0106302 <check_pgdir+0x25e>
+c01062de:	c7 44 24 0c 7c cf 10 	movl   $0xc010cf7c,0xc(%esp)
+c01062e5:	c0 
+c01062e6:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01062ed:	c0 
+c01062ee:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
+c01062f5:	00 
+c01062f6:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01062fd:	e8 df aa ff ff       	call   c0100de1 <__panic>
+
+    p2 = alloc_page();
+c0106302:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0106309:	e8 56 ee ff ff       	call   c0105164 <alloc_pages>
+c010630e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c0106311:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106316:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
+c010631d:	00 
+c010631e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0106325:	00 
+c0106326:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106329:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010632d:	89 04 24             	mov    %eax,(%esp)
+c0106330:	e8 67 fb ff ff       	call   c0105e9c <page_insert>
+c0106335:	85 c0                	test   %eax,%eax
+c0106337:	74 24                	je     c010635d <check_pgdir+0x2b9>
+c0106339:	c7 44 24 0c a4 cf 10 	movl   $0xc010cfa4,0xc(%esp)
+c0106340:	c0 
+c0106341:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106348:	c0 
+c0106349:	c7 44 24 04 7e 02 00 	movl   $0x27e,0x4(%esp)
+c0106350:	00 
+c0106351:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106358:	e8 84 aa ff ff       	call   c0100de1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c010635d:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106362:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106369:	00 
+c010636a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106371:	00 
+c0106372:	89 04 24             	mov    %eax,(%esp)
+c0106375:	e8 ce f4 ff ff       	call   c0105848 <get_pte>
+c010637a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010637d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106381:	75 24                	jne    c01063a7 <check_pgdir+0x303>
+c0106383:	c7 44 24 0c dc cf 10 	movl   $0xc010cfdc,0xc(%esp)
+c010638a:	c0 
+c010638b:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106392:	c0 
+c0106393:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
+c010639a:	00 
+c010639b:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01063a2:	e8 3a aa ff ff       	call   c0100de1 <__panic>
+    assert(*ptep & PTE_U);
+c01063a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01063aa:	8b 00                	mov    (%eax),%eax
+c01063ac:	83 e0 04             	and    $0x4,%eax
+c01063af:	85 c0                	test   %eax,%eax
+c01063b1:	75 24                	jne    c01063d7 <check_pgdir+0x333>
+c01063b3:	c7 44 24 0c 0c d0 10 	movl   $0xc010d00c,0xc(%esp)
+c01063ba:	c0 
+c01063bb:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01063c2:	c0 
+c01063c3:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
+c01063ca:	00 
+c01063cb:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01063d2:	e8 0a aa ff ff       	call   c0100de1 <__panic>
+    assert(*ptep & PTE_W);
+c01063d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01063da:	8b 00                	mov    (%eax),%eax
+c01063dc:	83 e0 02             	and    $0x2,%eax
+c01063df:	85 c0                	test   %eax,%eax
+c01063e1:	75 24                	jne    c0106407 <check_pgdir+0x363>
+c01063e3:	c7 44 24 0c 1a d0 10 	movl   $0xc010d01a,0xc(%esp)
+c01063ea:	c0 
+c01063eb:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01063f2:	c0 
+c01063f3:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
+c01063fa:	00 
+c01063fb:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106402:	e8 da a9 ff ff       	call   c0100de1 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c0106407:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010640c:	8b 00                	mov    (%eax),%eax
+c010640e:	83 e0 04             	and    $0x4,%eax
+c0106411:	85 c0                	test   %eax,%eax
+c0106413:	75 24                	jne    c0106439 <check_pgdir+0x395>
+c0106415:	c7 44 24 0c 28 d0 10 	movl   $0xc010d028,0xc(%esp)
+c010641c:	c0 
+c010641d:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106424:	c0 
+c0106425:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
+c010642c:	00 
+c010642d:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106434:	e8 a8 a9 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p2) == 1);
+c0106439:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010643c:	89 04 24             	mov    %eax,(%esp)
+c010643f:	e8 1b eb ff ff       	call   c0104f5f <page_ref>
+c0106444:	83 f8 01             	cmp    $0x1,%eax
+c0106447:	74 24                	je     c010646d <check_pgdir+0x3c9>
+c0106449:	c7 44 24 0c 3e d0 10 	movl   $0xc010d03e,0xc(%esp)
+c0106450:	c0 
+c0106451:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106458:	c0 
+c0106459:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
+c0106460:	00 
+c0106461:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106468:	e8 74 a9 ff ff       	call   c0100de1 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c010646d:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106472:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106479:	00 
+c010647a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0106481:	00 
+c0106482:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106485:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106489:	89 04 24             	mov    %eax,(%esp)
+c010648c:	e8 0b fa ff ff       	call   c0105e9c <page_insert>
+c0106491:	85 c0                	test   %eax,%eax
+c0106493:	74 24                	je     c01064b9 <check_pgdir+0x415>
+c0106495:	c7 44 24 0c 50 d0 10 	movl   $0xc010d050,0xc(%esp)
+c010649c:	c0 
+c010649d:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01064a4:	c0 
+c01064a5:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
+c01064ac:	00 
+c01064ad:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01064b4:	e8 28 a9 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p1) == 2);
+c01064b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01064bc:	89 04 24             	mov    %eax,(%esp)
+c01064bf:	e8 9b ea ff ff       	call   c0104f5f <page_ref>
+c01064c4:	83 f8 02             	cmp    $0x2,%eax
+c01064c7:	74 24                	je     c01064ed <check_pgdir+0x449>
+c01064c9:	c7 44 24 0c 7c d0 10 	movl   $0xc010d07c,0xc(%esp)
+c01064d0:	c0 
+c01064d1:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01064d8:	c0 
+c01064d9:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
+c01064e0:	00 
+c01064e1:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01064e8:	e8 f4 a8 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p2) == 0);
+c01064ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01064f0:	89 04 24             	mov    %eax,(%esp)
+c01064f3:	e8 67 ea ff ff       	call   c0104f5f <page_ref>
+c01064f8:	85 c0                	test   %eax,%eax
+c01064fa:	74 24                	je     c0106520 <check_pgdir+0x47c>
+c01064fc:	c7 44 24 0c 8e d0 10 	movl   $0xc010d08e,0xc(%esp)
+c0106503:	c0 
+c0106504:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010650b:	c0 
+c010650c:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
+c0106513:	00 
+c0106514:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010651b:	e8 c1 a8 ff ff       	call   c0100de1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0106520:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106525:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010652c:	00 
+c010652d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106534:	00 
+c0106535:	89 04 24             	mov    %eax,(%esp)
+c0106538:	e8 0b f3 ff ff       	call   c0105848 <get_pte>
+c010653d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106540:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106544:	75 24                	jne    c010656a <check_pgdir+0x4c6>
+c0106546:	c7 44 24 0c dc cf 10 	movl   $0xc010cfdc,0xc(%esp)
+c010654d:	c0 
+c010654e:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106555:	c0 
+c0106556:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
+c010655d:	00 
+c010655e:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106565:	e8 77 a8 ff ff       	call   c0100de1 <__panic>
+    assert(pte2page(*ptep) == p1);
+c010656a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010656d:	8b 00                	mov    (%eax),%eax
+c010656f:	89 04 24             	mov    %eax,(%esp)
+c0106572:	e8 92 e9 ff ff       	call   c0104f09 <pte2page>
+c0106577:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010657a:	74 24                	je     c01065a0 <check_pgdir+0x4fc>
+c010657c:	c7 44 24 0c 51 cf 10 	movl   $0xc010cf51,0xc(%esp)
+c0106583:	c0 
+c0106584:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010658b:	c0 
+c010658c:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
+c0106593:	00 
+c0106594:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010659b:	e8 41 a8 ff ff       	call   c0100de1 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c01065a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01065a3:	8b 00                	mov    (%eax),%eax
+c01065a5:	83 e0 04             	and    $0x4,%eax
+c01065a8:	85 c0                	test   %eax,%eax
+c01065aa:	74 24                	je     c01065d0 <check_pgdir+0x52c>
+c01065ac:	c7 44 24 0c a0 d0 10 	movl   $0xc010d0a0,0xc(%esp)
+c01065b3:	c0 
+c01065b4:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01065bb:	c0 
+c01065bc:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
+c01065c3:	00 
+c01065c4:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01065cb:	e8 11 a8 ff ff       	call   c0100de1 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c01065d0:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01065d5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01065dc:	00 
+c01065dd:	89 04 24             	mov    %eax,(%esp)
+c01065e0:	e8 73 f8 ff ff       	call   c0105e58 <page_remove>
+    assert(page_ref(p1) == 1);
+c01065e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065e8:	89 04 24             	mov    %eax,(%esp)
+c01065eb:	e8 6f e9 ff ff       	call   c0104f5f <page_ref>
+c01065f0:	83 f8 01             	cmp    $0x1,%eax
+c01065f3:	74 24                	je     c0106619 <check_pgdir+0x575>
+c01065f5:	c7 44 24 0c 67 cf 10 	movl   $0xc010cf67,0xc(%esp)
+c01065fc:	c0 
+c01065fd:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106604:	c0 
+c0106605:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
+c010660c:	00 
+c010660d:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106614:	e8 c8 a7 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p2) == 0);
+c0106619:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010661c:	89 04 24             	mov    %eax,(%esp)
+c010661f:	e8 3b e9 ff ff       	call   c0104f5f <page_ref>
+c0106624:	85 c0                	test   %eax,%eax
+c0106626:	74 24                	je     c010664c <check_pgdir+0x5a8>
+c0106628:	c7 44 24 0c 8e d0 10 	movl   $0xc010d08e,0xc(%esp)
+c010662f:	c0 
+c0106630:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106637:	c0 
+c0106638:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
+c010663f:	00 
+c0106640:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106647:	e8 95 a7 ff ff       	call   c0100de1 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c010664c:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106651:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106658:	00 
+c0106659:	89 04 24             	mov    %eax,(%esp)
+c010665c:	e8 f7 f7 ff ff       	call   c0105e58 <page_remove>
+    assert(page_ref(p1) == 0);
+c0106661:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106664:	89 04 24             	mov    %eax,(%esp)
+c0106667:	e8 f3 e8 ff ff       	call   c0104f5f <page_ref>
+c010666c:	85 c0                	test   %eax,%eax
+c010666e:	74 24                	je     c0106694 <check_pgdir+0x5f0>
+c0106670:	c7 44 24 0c b5 d0 10 	movl   $0xc010d0b5,0xc(%esp)
+c0106677:	c0 
+c0106678:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010667f:	c0 
+c0106680:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
+c0106687:	00 
+c0106688:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010668f:	e8 4d a7 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p2) == 0);
+c0106694:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106697:	89 04 24             	mov    %eax,(%esp)
+c010669a:	e8 c0 e8 ff ff       	call   c0104f5f <page_ref>
+c010669f:	85 c0                	test   %eax,%eax
+c01066a1:	74 24                	je     c01066c7 <check_pgdir+0x623>
+c01066a3:	c7 44 24 0c 8e d0 10 	movl   $0xc010d08e,0xc(%esp)
+c01066aa:	c0 
+c01066ab:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01066b2:	c0 
+c01066b3:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
+c01066ba:	00 
+c01066bb:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01066c2:	e8 1a a7 ff ff       	call   c0100de1 <__panic>
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+c01066c7:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01066cc:	8b 00                	mov    (%eax),%eax
+c01066ce:	89 04 24             	mov    %eax,(%esp)
+c01066d1:	e8 71 e8 ff ff       	call   c0104f47 <pde2page>
+c01066d6:	89 04 24             	mov    %eax,(%esp)
+c01066d9:	e8 81 e8 ff ff       	call   c0104f5f <page_ref>
+c01066de:	83 f8 01             	cmp    $0x1,%eax
+c01066e1:	74 24                	je     c0106707 <check_pgdir+0x663>
+c01066e3:	c7 44 24 0c c8 d0 10 	movl   $0xc010d0c8,0xc(%esp)
+c01066ea:	c0 
+c01066eb:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01066f2:	c0 
+c01066f3:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
+c01066fa:	00 
+c01066fb:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106702:	e8 da a6 ff ff       	call   c0100de1 <__panic>
+    free_page(pde2page(boot_pgdir[0]));
+c0106707:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010670c:	8b 00                	mov    (%eax),%eax
+c010670e:	89 04 24             	mov    %eax,(%esp)
+c0106711:	e8 31 e8 ff ff       	call   c0104f47 <pde2page>
+c0106716:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010671d:	00 
+c010671e:	89 04 24             	mov    %eax,(%esp)
+c0106721:	e8 a9 ea ff ff       	call   c01051cf <free_pages>
+    boot_pgdir[0] = 0;
+c0106726:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010672b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c0106731:	c7 04 24 ef d0 10 c0 	movl   $0xc010d0ef,(%esp)
+c0106738:	e8 22 9c ff ff       	call   c010035f <cprintf>
+}
+c010673d:	c9                   	leave  
+c010673e:	c3                   	ret    
+
+c010673f <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c010673f:	55                   	push   %ebp
+c0106740:	89 e5                	mov    %esp,%ebp
+c0106742:	83 ec 38             	sub    $0x38,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0106745:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010674c:	e9 ca 00 00 00       	jmp    c010681b <check_boot_pgdir+0xdc>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c0106751:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106754:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106757:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010675a:	c1 e8 0c             	shr    $0xc,%eax
+c010675d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106760:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0106765:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0106768:	72 23                	jb     c010678d <check_boot_pgdir+0x4e>
+c010676a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010676d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106771:	c7 44 24 08 bc cc 10 	movl   $0xc010ccbc,0x8(%esp)
+c0106778:	c0 
+c0106779:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
+c0106780:	00 
+c0106781:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106788:	e8 54 a6 ff ff       	call   c0100de1 <__panic>
+c010678d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106790:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106795:	89 c2                	mov    %eax,%edx
+c0106797:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c010679c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01067a3:	00 
+c01067a4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01067a8:	89 04 24             	mov    %eax,(%esp)
+c01067ab:	e8 98 f0 ff ff       	call   c0105848 <get_pte>
+c01067b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01067b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01067b7:	75 24                	jne    c01067dd <check_boot_pgdir+0x9e>
+c01067b9:	c7 44 24 0c 0c d1 10 	movl   $0xc010d10c,0xc(%esp)
+c01067c0:	c0 
+c01067c1:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01067c8:	c0 
+c01067c9:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
+c01067d0:	00 
+c01067d1:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01067d8:	e8 04 a6 ff ff       	call   c0100de1 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c01067dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01067e0:	8b 00                	mov    (%eax),%eax
+c01067e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01067e7:	89 c2                	mov    %eax,%edx
+c01067e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01067ec:	39 c2                	cmp    %eax,%edx
+c01067ee:	74 24                	je     c0106814 <check_boot_pgdir+0xd5>
+c01067f0:	c7 44 24 0c 49 d1 10 	movl   $0xc010d149,0xc(%esp)
+c01067f7:	c0 
+c01067f8:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01067ff:	c0 
+c0106800:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
+c0106807:	00 
+c0106808:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010680f:	e8 cd a5 ff ff       	call   c0100de1 <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0106814:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c010681b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010681e:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0106823:	39 c2                	cmp    %eax,%edx
+c0106825:	0f 82 26 ff ff ff    	jb     c0106751 <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c010682b:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106830:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0106835:	8b 00                	mov    (%eax),%eax
+c0106837:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010683c:	89 c2                	mov    %eax,%edx
+c010683e:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106846:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c010684d:	77 23                	ja     c0106872 <check_boot_pgdir+0x133>
+c010684f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106852:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106856:	c7 44 24 08 60 cd 10 	movl   $0xc010cd60,0x8(%esp)
+c010685d:	c0 
+c010685e:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
+c0106865:	00 
+c0106866:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010686d:	e8 6f a5 ff ff       	call   c0100de1 <__panic>
+c0106872:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106875:	05 00 00 00 40       	add    $0x40000000,%eax
+c010687a:	39 c2                	cmp    %eax,%edx
+c010687c:	74 24                	je     c01068a2 <check_boot_pgdir+0x163>
+c010687e:	c7 44 24 0c 60 d1 10 	movl   $0xc010d160,0xc(%esp)
+c0106885:	c0 
+c0106886:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010688d:	c0 
+c010688e:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
+c0106895:	00 
+c0106896:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010689d:	e8 3f a5 ff ff       	call   c0100de1 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c01068a2:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01068a7:	8b 00                	mov    (%eax),%eax
+c01068a9:	85 c0                	test   %eax,%eax
+c01068ab:	74 24                	je     c01068d1 <check_boot_pgdir+0x192>
+c01068ad:	c7 44 24 0c 94 d1 10 	movl   $0xc010d194,0xc(%esp)
+c01068b4:	c0 
+c01068b5:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01068bc:	c0 
+c01068bd:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
+c01068c4:	00 
+c01068c5:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01068cc:	e8 10 a5 ff ff       	call   c0100de1 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c01068d1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01068d8:	e8 87 e8 ff ff       	call   c0105164 <alloc_pages>
+c01068dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c01068e0:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c01068e5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c01068ec:	00 
+c01068ed:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
+c01068f4:	00 
+c01068f5:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01068f8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01068fc:	89 04 24             	mov    %eax,(%esp)
+c01068ff:	e8 98 f5 ff ff       	call   c0105e9c <page_insert>
+c0106904:	85 c0                	test   %eax,%eax
+c0106906:	74 24                	je     c010692c <check_boot_pgdir+0x1ed>
+c0106908:	c7 44 24 0c a8 d1 10 	movl   $0xc010d1a8,0xc(%esp)
+c010690f:	c0 
+c0106910:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106917:	c0 
+c0106918:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
+c010691f:	00 
+c0106920:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106927:	e8 b5 a4 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p) == 1);
+c010692c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010692f:	89 04 24             	mov    %eax,(%esp)
+c0106932:	e8 28 e6 ff ff       	call   c0104f5f <page_ref>
+c0106937:	83 f8 01             	cmp    $0x1,%eax
+c010693a:	74 24                	je     c0106960 <check_boot_pgdir+0x221>
+c010693c:	c7 44 24 0c d6 d1 10 	movl   $0xc010d1d6,0xc(%esp)
+c0106943:	c0 
+c0106944:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c010694b:	c0 
+c010694c:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
+c0106953:	00 
+c0106954:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c010695b:	e8 81 a4 ff ff       	call   c0100de1 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c0106960:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106965:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c010696c:	00 
+c010696d:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
+c0106974:	00 
+c0106975:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106978:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010697c:	89 04 24             	mov    %eax,(%esp)
+c010697f:	e8 18 f5 ff ff       	call   c0105e9c <page_insert>
+c0106984:	85 c0                	test   %eax,%eax
+c0106986:	74 24                	je     c01069ac <check_boot_pgdir+0x26d>
+c0106988:	c7 44 24 0c e8 d1 10 	movl   $0xc010d1e8,0xc(%esp)
+c010698f:	c0 
+c0106990:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106997:	c0 
+c0106998:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
+c010699f:	00 
+c01069a0:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01069a7:	e8 35 a4 ff ff       	call   c0100de1 <__panic>
+    assert(page_ref(p) == 2);
+c01069ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01069af:	89 04 24             	mov    %eax,(%esp)
+c01069b2:	e8 a8 e5 ff ff       	call   c0104f5f <page_ref>
+c01069b7:	83 f8 02             	cmp    $0x2,%eax
+c01069ba:	74 24                	je     c01069e0 <check_boot_pgdir+0x2a1>
+c01069bc:	c7 44 24 0c 1f d2 10 	movl   $0xc010d21f,0xc(%esp)
+c01069c3:	c0 
+c01069c4:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c01069cb:	c0 
+c01069cc:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c01069d3:	00 
+c01069d4:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c01069db:	e8 01 a4 ff ff       	call   c0100de1 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c01069e0:	c7 45 dc 30 d2 10 c0 	movl   $0xc010d230,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c01069e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01069ea:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01069ee:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c01069f5:	e8 39 50 00 00       	call   c010ba33 <strcpy>
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c01069fa:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
+c0106a01:	00 
+c0106a02:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106a09:	e8 9e 50 00 00       	call   c010baac <strcmp>
+c0106a0e:	85 c0                	test   %eax,%eax
+c0106a10:	74 24                	je     c0106a36 <check_boot_pgdir+0x2f7>
+c0106a12:	c7 44 24 0c 48 d2 10 	movl   $0xc010d248,0xc(%esp)
+c0106a19:	c0 
+c0106a1a:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106a21:	c0 
+c0106a22:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
+c0106a29:	00 
+c0106a2a:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106a31:	e8 ab a3 ff ff       	call   c0100de1 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c0106a36:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a39:	89 04 24             	mov    %eax,(%esp)
+c0106a3c:	e8 74 e4 ff ff       	call   c0104eb5 <page2kva>
+c0106a41:	05 00 01 00 00       	add    $0x100,%eax
+c0106a46:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0106a49:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106a50:	e8 86 4f 00 00       	call   c010b9db <strlen>
+c0106a55:	85 c0                	test   %eax,%eax
+c0106a57:	74 24                	je     c0106a7d <check_boot_pgdir+0x33e>
+c0106a59:	c7 44 24 0c 80 d2 10 	movl   $0xc010d280,0xc(%esp)
+c0106a60:	c0 
+c0106a61:	c7 44 24 08 a9 cd 10 	movl   $0xc010cda9,0x8(%esp)
+c0106a68:	c0 
+c0106a69:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
+c0106a70:	00 
+c0106a71:	c7 04 24 84 cd 10 c0 	movl   $0xc010cd84,(%esp)
+c0106a78:	e8 64 a3 ff ff       	call   c0100de1 <__panic>
+
+    free_page(p);
+c0106a7d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106a84:	00 
+c0106a85:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a88:	89 04 24             	mov    %eax,(%esp)
+c0106a8b:	e8 3f e7 ff ff       	call   c01051cf <free_pages>
+    free_page(pde2page(boot_pgdir[0]));
+c0106a90:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106a95:	8b 00                	mov    (%eax),%eax
+c0106a97:	89 04 24             	mov    %eax,(%esp)
+c0106a9a:	e8 a8 e4 ff ff       	call   c0104f47 <pde2page>
+c0106a9f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106aa6:	00 
+c0106aa7:	89 04 24             	mov    %eax,(%esp)
+c0106aaa:	e8 20 e7 ff ff       	call   c01051cf <free_pages>
+    boot_pgdir[0] = 0;
+c0106aaf:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0106ab4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c0106aba:	c7 04 24 a4 d2 10 c0 	movl   $0xc010d2a4,(%esp)
+c0106ac1:	e8 99 98 ff ff       	call   c010035f <cprintf>
+}
+c0106ac6:	c9                   	leave  
+c0106ac7:	c3                   	ret    
+
+c0106ac8 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0106ac8:	55                   	push   %ebp
+c0106ac9:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0106acb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ace:	83 e0 04             	and    $0x4,%eax
+c0106ad1:	85 c0                	test   %eax,%eax
+c0106ad3:	74 07                	je     c0106adc <perm2str+0x14>
+c0106ad5:	b8 75 00 00 00       	mov    $0x75,%eax
+c0106ada:	eb 05                	jmp    c0106ae1 <perm2str+0x19>
+c0106adc:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106ae1:	a2 28 f0 19 c0       	mov    %al,0xc019f028
+    str[1] = 'r';
+c0106ae6:	c6 05 29 f0 19 c0 72 	movb   $0x72,0xc019f029
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0106aed:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106af0:	83 e0 02             	and    $0x2,%eax
+c0106af3:	85 c0                	test   %eax,%eax
+c0106af5:	74 07                	je     c0106afe <perm2str+0x36>
+c0106af7:	b8 77 00 00 00       	mov    $0x77,%eax
+c0106afc:	eb 05                	jmp    c0106b03 <perm2str+0x3b>
+c0106afe:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106b03:	a2 2a f0 19 c0       	mov    %al,0xc019f02a
+    str[3] = '\0';
+c0106b08:	c6 05 2b f0 19 c0 00 	movb   $0x0,0xc019f02b
+    return str;
+c0106b0f:	b8 28 f0 19 c0       	mov    $0xc019f028,%eax
+}
+c0106b14:	5d                   	pop    %ebp
+c0106b15:	c3                   	ret    
+
+c0106b16 <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0106b16:	55                   	push   %ebp
+c0106b17:	89 e5                	mov    %esp,%ebp
+c0106b19:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0106b1c:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b1f:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106b22:	72 0a                	jb     c0106b2e <get_pgtable_items+0x18>
+        return 0;
+c0106b24:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106b29:	e9 9c 00 00 00       	jmp    c0106bca <get_pgtable_items+0xb4>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106b2e:	eb 04                	jmp    c0106b34 <get_pgtable_items+0x1e>
+        start ++;
+c0106b30:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106b34:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b37:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106b3a:	73 18                	jae    c0106b54 <get_pgtable_items+0x3e>
+c0106b3c:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106b46:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106b49:	01 d0                	add    %edx,%eax
+c0106b4b:	8b 00                	mov    (%eax),%eax
+c0106b4d:	83 e0 01             	and    $0x1,%eax
+c0106b50:	85 c0                	test   %eax,%eax
+c0106b52:	74 dc                	je     c0106b30 <get_pgtable_items+0x1a>
+        start ++;
+    }
+    if (start < right) {
+c0106b54:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b57:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106b5a:	73 69                	jae    c0106bc5 <get_pgtable_items+0xaf>
+        if (left_store != NULL) {
+c0106b5c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0106b60:	74 08                	je     c0106b6a <get_pgtable_items+0x54>
+            *left_store = start;
+c0106b62:	8b 45 18             	mov    0x18(%ebp),%eax
+c0106b65:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106b68:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c0106b6a:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b6d:	8d 50 01             	lea    0x1(%eax),%edx
+c0106b70:	89 55 10             	mov    %edx,0x10(%ebp)
+c0106b73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106b7a:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106b7d:	01 d0                	add    %edx,%eax
+c0106b7f:	8b 00                	mov    (%eax),%eax
+c0106b81:	83 e0 07             	and    $0x7,%eax
+c0106b84:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106b87:	eb 04                	jmp    c0106b8d <get_pgtable_items+0x77>
+            start ++;
+c0106b89:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106b8d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b90:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106b93:	73 1d                	jae    c0106bb2 <get_pgtable_items+0x9c>
+c0106b95:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106b9f:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106ba2:	01 d0                	add    %edx,%eax
+c0106ba4:	8b 00                	mov    (%eax),%eax
+c0106ba6:	83 e0 07             	and    $0x7,%eax
+c0106ba9:	89 c2                	mov    %eax,%edx
+c0106bab:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106bae:	39 c2                	cmp    %eax,%edx
+c0106bb0:	74 d7                	je     c0106b89 <get_pgtable_items+0x73>
+            start ++;
+        }
+        if (right_store != NULL) {
+c0106bb2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0106bb6:	74 08                	je     c0106bc0 <get_pgtable_items+0xaa>
+            *right_store = start;
+c0106bb8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0106bbb:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106bbe:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c0106bc0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106bc3:	eb 05                	jmp    c0106bca <get_pgtable_items+0xb4>
+    }
+    return 0;
+c0106bc5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106bca:	c9                   	leave  
+c0106bcb:	c3                   	ret    
+
+c0106bcc <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c0106bcc:	55                   	push   %ebp
+c0106bcd:	89 e5                	mov    %esp,%ebp
+c0106bcf:	57                   	push   %edi
+c0106bd0:	56                   	push   %esi
+c0106bd1:	53                   	push   %ebx
+c0106bd2:	83 ec 4c             	sub    $0x4c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c0106bd5:	c7 04 24 c4 d2 10 c0 	movl   $0xc010d2c4,(%esp)
+c0106bdc:	e8 7e 97 ff ff       	call   c010035f <cprintf>
+    size_t left, right = 0, perm;
+c0106be1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106be8:	e9 fa 00 00 00       	jmp    c0106ce7 <print_pgdir+0x11b>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106bed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106bf0:	89 04 24             	mov    %eax,(%esp)
+c0106bf3:	e8 d0 fe ff ff       	call   c0106ac8 <perm2str>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c0106bf8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106bfb:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106bfe:	29 d1                	sub    %edx,%ecx
+c0106c00:	89 ca                	mov    %ecx,%edx
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106c02:	89 d6                	mov    %edx,%esi
+c0106c04:	c1 e6 16             	shl    $0x16,%esi
+c0106c07:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106c0a:	89 d3                	mov    %edx,%ebx
+c0106c0c:	c1 e3 16             	shl    $0x16,%ebx
+c0106c0f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106c12:	89 d1                	mov    %edx,%ecx
+c0106c14:	c1 e1 16             	shl    $0x16,%ecx
+c0106c17:	8b 7d dc             	mov    -0x24(%ebp),%edi
+c0106c1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106c1d:	29 d7                	sub    %edx,%edi
+c0106c1f:	89 fa                	mov    %edi,%edx
+c0106c21:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106c25:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106c29:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106c2d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106c31:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106c35:	c7 04 24 f5 d2 10 c0 	movl   $0xc010d2f5,(%esp)
+c0106c3c:	e8 1e 97 ff ff       	call   c010035f <cprintf>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c0106c41:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106c44:	c1 e0 0a             	shl    $0xa,%eax
+c0106c47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106c4a:	eb 54                	jmp    c0106ca0 <print_pgdir+0xd4>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106c4f:	89 04 24             	mov    %eax,(%esp)
+c0106c52:	e8 71 fe ff ff       	call   c0106ac8 <perm2str>
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c0106c57:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+c0106c5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106c5d:	29 d1                	sub    %edx,%ecx
+c0106c5f:	89 ca                	mov    %ecx,%edx
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106c61:	89 d6                	mov    %edx,%esi
+c0106c63:	c1 e6 0c             	shl    $0xc,%esi
+c0106c66:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0106c69:	89 d3                	mov    %edx,%ebx
+c0106c6b:	c1 e3 0c             	shl    $0xc,%ebx
+c0106c6e:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106c71:	c1 e2 0c             	shl    $0xc,%edx
+c0106c74:	89 d1                	mov    %edx,%ecx
+c0106c76:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+c0106c79:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106c7c:	29 d7                	sub    %edx,%edi
+c0106c7e:	89 fa                	mov    %edi,%edx
+c0106c80:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106c84:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106c88:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106c8c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106c90:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106c94:	c7 04 24 14 d3 10 c0 	movl   $0xc010d314,(%esp)
+c0106c9b:	e8 bf 96 ff ff       	call   c010035f <cprintf>
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106ca0:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
+c0106ca5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0106ca8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106cab:	89 ce                	mov    %ecx,%esi
+c0106cad:	c1 e6 0a             	shl    $0xa,%esi
+c0106cb0:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c0106cb3:	89 cb                	mov    %ecx,%ebx
+c0106cb5:	c1 e3 0a             	shl    $0xa,%ebx
+c0106cb8:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
+c0106cbb:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106cbf:	8d 4d d8             	lea    -0x28(%ebp),%ecx
+c0106cc2:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106cc6:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106cca:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106cce:	89 74 24 04          	mov    %esi,0x4(%esp)
+c0106cd2:	89 1c 24             	mov    %ebx,(%esp)
+c0106cd5:	e8 3c fe ff ff       	call   c0106b16 <get_pgtable_items>
+c0106cda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106cdd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106ce1:	0f 85 65 ff ff ff    	jne    c0106c4c <print_pgdir+0x80>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106ce7:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
+c0106cec:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106cef:	8d 4d dc             	lea    -0x24(%ebp),%ecx
+c0106cf2:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106cf6:	8d 4d e0             	lea    -0x20(%ebp),%ecx
+c0106cf9:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106cfd:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106d01:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106d05:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
+c0106d0c:	00 
+c0106d0d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0106d14:	e8 fd fd ff ff       	call   c0106b16 <get_pgtable_items>
+c0106d19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106d1c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106d20:	0f 85 c7 fe ff ff    	jne    c0106bed <print_pgdir+0x21>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0106d26:	c7 04 24 38 d3 10 c0 	movl   $0xc010d338,(%esp)
+c0106d2d:	e8 2d 96 ff ff       	call   c010035f <cprintf>
+}
+c0106d32:	83 c4 4c             	add    $0x4c,%esp
+c0106d35:	5b                   	pop    %ebx
+c0106d36:	5e                   	pop    %esi
+c0106d37:	5f                   	pop    %edi
+c0106d38:	5d                   	pop    %ebp
+c0106d39:	c3                   	ret    
+
+c0106d3a <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106d3a:	55                   	push   %ebp
+c0106d3b:	89 e5                	mov    %esp,%ebp
+c0106d3d:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0106d40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d43:	c1 e8 0c             	shr    $0xc,%eax
+c0106d46:	89 c2                	mov    %eax,%edx
+c0106d48:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0106d4d:	39 c2                	cmp    %eax,%edx
+c0106d4f:	72 1c                	jb     c0106d6d <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0106d51:	c7 44 24 08 6c d3 10 	movl   $0xc010d36c,0x8(%esp)
+c0106d58:	c0 
+c0106d59:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0106d60:	00 
+c0106d61:	c7 04 24 8b d3 10 c0 	movl   $0xc010d38b,(%esp)
+c0106d68:	e8 74 a0 ff ff       	call   c0100de1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106d6d:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0106d72:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106d75:	c1 ea 0c             	shr    $0xc,%edx
+c0106d78:	c1 e2 05             	shl    $0x5,%edx
+c0106d7b:	01 d0                	add    %edx,%eax
+}
+c0106d7d:	c9                   	leave  
+c0106d7e:	c3                   	ret    
+
+c0106d7f <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106d7f:	55                   	push   %ebp
+c0106d80:	89 e5                	mov    %esp,%ebp
+c0106d82:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0106d85:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d88:	83 e0 01             	and    $0x1,%eax
+c0106d8b:	85 c0                	test   %eax,%eax
+c0106d8d:	75 1c                	jne    c0106dab <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0106d8f:	c7 44 24 08 9c d3 10 	movl   $0xc010d39c,0x8(%esp)
+c0106d96:	c0 
+c0106d97:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0106d9e:	00 
+c0106d9f:	c7 04 24 8b d3 10 c0 	movl   $0xc010d38b,(%esp)
+c0106da6:	e8 36 a0 ff ff       	call   c0100de1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106dab:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106db3:	89 04 24             	mov    %eax,(%esp)
+c0106db6:	e8 7f ff ff ff       	call   c0106d3a <pa2page>
+}
+c0106dbb:	c9                   	leave  
+c0106dbc:	c3                   	ret    
+
+c0106dbd <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0106dbd:	55                   	push   %ebp
+c0106dbe:	89 e5                	mov    %esp,%ebp
+c0106dc0:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106dc3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dc6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106dcb:	89 04 24             	mov    %eax,(%esp)
+c0106dce:	e8 67 ff ff ff       	call   c0106d3a <pa2page>
+}
+c0106dd3:	c9                   	leave  
+c0106dd4:	c3                   	ret    
+
+c0106dd5 <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c0106dd5:	55                   	push   %ebp
+c0106dd6:	89 e5                	mov    %esp,%ebp
+c0106dd8:	83 ec 28             	sub    $0x28,%esp
+     swapfs_init();
+c0106ddb:	e8 e9 23 00 00       	call   c01091c9 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c0106de0:	a1 3c 11 1a c0       	mov    0xc01a113c,%eax
+c0106de5:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c0106dea:	76 0c                	jbe    c0106df8 <swap_init+0x23>
+c0106dec:	a1 3c 11 1a c0       	mov    0xc01a113c,%eax
+c0106df1:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c0106df6:	76 25                	jbe    c0106e1d <swap_init+0x48>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c0106df8:	a1 3c 11 1a c0       	mov    0xc01a113c,%eax
+c0106dfd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106e01:	c7 44 24 08 bd d3 10 	movl   $0xc010d3bd,0x8(%esp)
+c0106e08:	c0 
+c0106e09:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
+c0106e10:	00 
+c0106e11:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0106e18:	e8 c4 9f ff ff       	call   c0100de1 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0106e1d:	c7 05 34 f0 19 c0 60 	movl   $0xc012aa60,0xc019f034
+c0106e24:	aa 12 c0 
+     int r = sm->init();
+c0106e27:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106e2c:	8b 40 04             	mov    0x4(%eax),%eax
+c0106e2f:	ff d0                	call   *%eax
+c0106e31:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0106e34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106e38:	75 26                	jne    c0106e60 <swap_init+0x8b>
+     {
+          swap_init_ok = 1;
+c0106e3a:	c7 05 2c f0 19 c0 01 	movl   $0x1,0xc019f02c
+c0106e41:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0106e44:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106e49:	8b 00                	mov    (%eax),%eax
+c0106e4b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106e4f:	c7 04 24 e7 d3 10 c0 	movl   $0xc010d3e7,(%esp)
+c0106e56:	e8 04 95 ff ff       	call   c010035f <cprintf>
+          check_swap();
+c0106e5b:	e8 a4 04 00 00       	call   c0107304 <check_swap>
+     }
+
+     return r;
+c0106e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106e63:	c9                   	leave  
+c0106e64:	c3                   	ret    
+
+c0106e65 <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0106e65:	55                   	push   %ebp
+c0106e66:	89 e5                	mov    %esp,%ebp
+c0106e68:	83 ec 18             	sub    $0x18,%esp
+     return sm->init_mm(mm);
+c0106e6b:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106e70:	8b 40 08             	mov    0x8(%eax),%eax
+c0106e73:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106e76:	89 14 24             	mov    %edx,(%esp)
+c0106e79:	ff d0                	call   *%eax
+}
+c0106e7b:	c9                   	leave  
+c0106e7c:	c3                   	ret    
+
+c0106e7d <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0106e7d:	55                   	push   %ebp
+c0106e7e:	89 e5                	mov    %esp,%ebp
+c0106e80:	83 ec 18             	sub    $0x18,%esp
+     return sm->tick_event(mm);
+c0106e83:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106e88:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106e8b:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106e8e:	89 14 24             	mov    %edx,(%esp)
+c0106e91:	ff d0                	call   *%eax
+}
+c0106e93:	c9                   	leave  
+c0106e94:	c3                   	ret    
+
+c0106e95 <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0106e95:	55                   	push   %ebp
+c0106e96:	89 e5                	mov    %esp,%ebp
+c0106e98:	83 ec 18             	sub    $0x18,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c0106e9b:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106ea0:	8b 40 10             	mov    0x10(%eax),%eax
+c0106ea3:	8b 55 14             	mov    0x14(%ebp),%edx
+c0106ea6:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106eaa:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106ead:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106eb1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106eb4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106eb8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106ebb:	89 14 24             	mov    %edx,(%esp)
+c0106ebe:	ff d0                	call   *%eax
+}
+c0106ec0:	c9                   	leave  
+c0106ec1:	c3                   	ret    
+
+c0106ec2 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0106ec2:	55                   	push   %ebp
+c0106ec3:	89 e5                	mov    %esp,%ebp
+c0106ec5:	83 ec 18             	sub    $0x18,%esp
+     return sm->set_unswappable(mm, addr);
+c0106ec8:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106ecd:	8b 40 14             	mov    0x14(%eax),%eax
+c0106ed0:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106ed3:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106ed7:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106eda:	89 14 24             	mov    %edx,(%esp)
+c0106edd:	ff d0                	call   *%eax
+}
+c0106edf:	c9                   	leave  
+c0106ee0:	c3                   	ret    
+
+c0106ee1 <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c0106ee1:	55                   	push   %ebp
+c0106ee2:	89 e5                	mov    %esp,%ebp
+c0106ee4:	83 ec 38             	sub    $0x38,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c0106ee7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106eee:	e9 5a 01 00 00       	jmp    c010704d <swap_out+0x16c>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0106ef3:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106ef8:	8b 40 18             	mov    0x18(%eax),%eax
+c0106efb:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106efe:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106f02:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0106f05:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106f09:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f0c:	89 14 24             	mov    %edx,(%esp)
+c0106f0f:	ff d0                	call   *%eax
+c0106f11:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0106f14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106f18:	74 18                	je     c0106f32 <swap_out+0x51>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0106f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106f1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106f21:	c7 04 24 fc d3 10 c0 	movl   $0xc010d3fc,(%esp)
+c0106f28:	e8 32 94 ff ff       	call   c010035f <cprintf>
+c0106f2d:	e9 27 01 00 00       	jmp    c0107059 <swap_out+0x178>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0106f32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106f35:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0106f38:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c0106f3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106f3e:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106f41:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106f48:	00 
+c0106f49:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0106f4c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106f50:	89 04 24             	mov    %eax,(%esp)
+c0106f53:	e8 f0 e8 ff ff       	call   c0105848 <get_pte>
+c0106f58:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c0106f5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106f5e:	8b 00                	mov    (%eax),%eax
+c0106f60:	83 e0 01             	and    $0x1,%eax
+c0106f63:	85 c0                	test   %eax,%eax
+c0106f65:	75 24                	jne    c0106f8b <swap_out+0xaa>
+c0106f67:	c7 44 24 0c 29 d4 10 	movl   $0xc010d429,0xc(%esp)
+c0106f6e:	c0 
+c0106f6f:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0106f76:	c0 
+c0106f77:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
+c0106f7e:	00 
+c0106f7f:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0106f86:	e8 56 9e ff ff       	call   c0100de1 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c0106f8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106f8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106f91:	8b 52 1c             	mov    0x1c(%edx),%edx
+c0106f94:	c1 ea 0c             	shr    $0xc,%edx
+c0106f97:	83 c2 01             	add    $0x1,%edx
+c0106f9a:	c1 e2 08             	shl    $0x8,%edx
+c0106f9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106fa1:	89 14 24             	mov    %edx,(%esp)
+c0106fa4:	e8 da 22 00 00       	call   c0109283 <swapfs_write>
+c0106fa9:	85 c0                	test   %eax,%eax
+c0106fab:	74 34                	je     c0106fe1 <swap_out+0x100>
+                    cprintf("SWAP: failed to save\n");
+c0106fad:	c7 04 24 53 d4 10 c0 	movl   $0xc010d453,(%esp)
+c0106fb4:	e8 a6 93 ff ff       	call   c010035f <cprintf>
+                    sm->map_swappable(mm, v, page, 0);
+c0106fb9:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c0106fbe:	8b 40 10             	mov    0x10(%eax),%eax
+c0106fc1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106fc4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106fcb:	00 
+c0106fcc:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106fd0:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0106fd3:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106fd7:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106fda:	89 14 24             	mov    %edx,(%esp)
+c0106fdd:	ff d0                	call   *%eax
+c0106fdf:	eb 68                	jmp    c0107049 <swap_out+0x168>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c0106fe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106fe4:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0106fe7:	c1 e8 0c             	shr    $0xc,%eax
+c0106fea:	83 c0 01             	add    $0x1,%eax
+c0106fed:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106ff1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106ff4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ffb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106fff:	c7 04 24 6c d4 10 c0 	movl   $0xc010d46c,(%esp)
+c0107006:	e8 54 93 ff ff       	call   c010035f <cprintf>
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c010700b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010700e:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107011:	c1 e8 0c             	shr    $0xc,%eax
+c0107014:	83 c0 01             	add    $0x1,%eax
+c0107017:	c1 e0 08             	shl    $0x8,%eax
+c010701a:	89 c2                	mov    %eax,%edx
+c010701c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010701f:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c0107021:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107024:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010702b:	00 
+c010702c:	89 04 24             	mov    %eax,(%esp)
+c010702f:	e8 9b e1 ff ff       	call   c01051cf <free_pages>
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c0107034:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107037:	8b 40 0c             	mov    0xc(%eax),%eax
+c010703a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010703d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107041:	89 04 24             	mov    %eax,(%esp)
+c0107044:	e8 0c ef ff ff       	call   c0105f55 <tlb_invalidate>
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c0107049:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010704d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107050:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107053:	0f 85 9a fe ff ff    	jne    c0106ef3 <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c0107059:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010705c:	c9                   	leave  
+c010705d:	c3                   	ret    
+
+c010705e <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c010705e:	55                   	push   %ebp
+c010705f:	89 e5                	mov    %esp,%ebp
+c0107061:	83 ec 28             	sub    $0x28,%esp
+     struct Page *result = alloc_page();
+c0107064:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010706b:	e8 f4 e0 ff ff       	call   c0105164 <alloc_pages>
+c0107070:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c0107073:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107077:	75 24                	jne    c010709d <swap_in+0x3f>
+c0107079:	c7 44 24 0c ac d4 10 	movl   $0xc010d4ac,0xc(%esp)
+c0107080:	c0 
+c0107081:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107088:	c0 
+c0107089:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c0107090:	00 
+c0107091:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107098:	e8 44 9d ff ff       	call   c0100de1 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c010709d:	8b 45 08             	mov    0x8(%ebp),%eax
+c01070a0:	8b 40 0c             	mov    0xc(%eax),%eax
+c01070a3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01070aa:	00 
+c01070ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01070ae:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01070b2:	89 04 24             	mov    %eax,(%esp)
+c01070b5:	e8 8e e7 ff ff       	call   c0105848 <get_pte>
+c01070ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c01070bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070c0:	8b 00                	mov    (%eax),%eax
+c01070c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01070c5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01070c9:	89 04 24             	mov    %eax,(%esp)
+c01070cc:	e8 40 21 00 00       	call   c0109211 <swapfs_read>
+c01070d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01070d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01070d8:	74 2a                	je     c0107104 <swap_in+0xa6>
+     {
+        assert(r!=0);
+c01070da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01070de:	75 24                	jne    c0107104 <swap_in+0xa6>
+c01070e0:	c7 44 24 0c b9 d4 10 	movl   $0xc010d4b9,0xc(%esp)
+c01070e7:	c0 
+c01070e8:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01070ef:	c0 
+c01070f0:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
+c01070f7:	00 
+c01070f8:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01070ff:	e8 dd 9c ff ff       	call   c0100de1 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c0107104:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107107:	8b 00                	mov    (%eax),%eax
+c0107109:	c1 e8 08             	shr    $0x8,%eax
+c010710c:	89 c2                	mov    %eax,%edx
+c010710e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107111:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107115:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107119:	c7 04 24 c0 d4 10 c0 	movl   $0xc010d4c0,(%esp)
+c0107120:	e8 3a 92 ff ff       	call   c010035f <cprintf>
+     *ptr_result=result;
+c0107125:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107128:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010712b:	89 10                	mov    %edx,(%eax)
+     return 0;
+c010712d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107132:	c9                   	leave  
+c0107133:	c3                   	ret    
+
+c0107134 <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c0107134:	55                   	push   %ebp
+c0107135:	89 e5                	mov    %esp,%ebp
+c0107137:	83 ec 18             	sub    $0x18,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c010713a:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010713f:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107142:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107147:	83 f8 01             	cmp    $0x1,%eax
+c010714a:	74 24                	je     c0107170 <check_content_set+0x3c>
+c010714c:	c7 44 24 0c fe d4 10 	movl   $0xc010d4fe,0xc(%esp)
+c0107153:	c0 
+c0107154:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c010715b:	c0 
+c010715c:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
+c0107163:	00 
+c0107164:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c010716b:	e8 71 9c ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c0107170:	b8 10 10 00 00       	mov    $0x1010,%eax
+c0107175:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107178:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c010717d:	83 f8 01             	cmp    $0x1,%eax
+c0107180:	74 24                	je     c01071a6 <check_content_set+0x72>
+c0107182:	c7 44 24 0c fe d4 10 	movl   $0xc010d4fe,0xc(%esp)
+c0107189:	c0 
+c010718a:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107191:	c0 
+c0107192:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c0107199:	00 
+c010719a:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01071a1:	e8 3b 9c ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c01071a6:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01071ab:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071ae:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c01071b3:	83 f8 02             	cmp    $0x2,%eax
+c01071b6:	74 24                	je     c01071dc <check_content_set+0xa8>
+c01071b8:	c7 44 24 0c 0d d5 10 	movl   $0xc010d50d,0xc(%esp)
+c01071bf:	c0 
+c01071c0:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01071c7:	c0 
+c01071c8:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
+c01071cf:	00 
+c01071d0:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01071d7:	e8 05 9c ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01071dc:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01071e1:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071e4:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c01071e9:	83 f8 02             	cmp    $0x2,%eax
+c01071ec:	74 24                	je     c0107212 <check_content_set+0xde>
+c01071ee:	c7 44 24 0c 0d d5 10 	movl   $0xc010d50d,0xc(%esp)
+c01071f5:	c0 
+c01071f6:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01071fd:	c0 
+c01071fe:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
+c0107205:	00 
+c0107206:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c010720d:	e8 cf 9b ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c0107212:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107217:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c010721a:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c010721f:	83 f8 03             	cmp    $0x3,%eax
+c0107222:	74 24                	je     c0107248 <check_content_set+0x114>
+c0107224:	c7 44 24 0c 1c d5 10 	movl   $0xc010d51c,0xc(%esp)
+c010722b:	c0 
+c010722c:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107233:	c0 
+c0107234:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c010723b:	00 
+c010723c:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107243:	e8 99 9b ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c0107248:	b8 10 30 00 00       	mov    $0x3010,%eax
+c010724d:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107250:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107255:	83 f8 03             	cmp    $0x3,%eax
+c0107258:	74 24                	je     c010727e <check_content_set+0x14a>
+c010725a:	c7 44 24 0c 1c d5 10 	movl   $0xc010d51c,0xc(%esp)
+c0107261:	c0 
+c0107262:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107269:	c0 
+c010726a:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c0107271:	00 
+c0107272:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107279:	e8 63 9b ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c010727e:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107283:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0107286:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c010728b:	83 f8 04             	cmp    $0x4,%eax
+c010728e:	74 24                	je     c01072b4 <check_content_set+0x180>
+c0107290:	c7 44 24 0c 2b d5 10 	movl   $0xc010d52b,0xc(%esp)
+c0107297:	c0 
+c0107298:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c010729f:	c0 
+c01072a0:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c01072a7:	00 
+c01072a8:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01072af:	e8 2d 9b ff ff       	call   c0100de1 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c01072b4:	b8 10 40 00 00       	mov    $0x4010,%eax
+c01072b9:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c01072bc:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c01072c1:	83 f8 04             	cmp    $0x4,%eax
+c01072c4:	74 24                	je     c01072ea <check_content_set+0x1b6>
+c01072c6:	c7 44 24 0c 2b d5 10 	movl   $0xc010d52b,0xc(%esp)
+c01072cd:	c0 
+c01072ce:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01072d5:	c0 
+c01072d6:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c01072dd:	00 
+c01072de:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01072e5:	e8 f7 9a ff ff       	call   c0100de1 <__panic>
+}
+c01072ea:	c9                   	leave  
+c01072eb:	c3                   	ret    
+
+c01072ec <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01072ec:	55                   	push   %ebp
+c01072ed:	89 e5                	mov    %esp,%ebp
+c01072ef:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c01072f2:	a1 34 f0 19 c0       	mov    0xc019f034,%eax
+c01072f7:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01072fa:	ff d0                	call   *%eax
+c01072fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c01072ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107302:	c9                   	leave  
+c0107303:	c3                   	ret    
+
+c0107304 <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c0107304:	55                   	push   %ebp
+c0107305:	89 e5                	mov    %esp,%ebp
+c0107307:	53                   	push   %ebx
+c0107308:	83 ec 74             	sub    $0x74,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c010730b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0107312:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c0107319:	c7 45 e8 78 10 1a c0 	movl   $0xc01a1078,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107320:	eb 6b                	jmp    c010738d <check_swap+0x89>
+        struct Page *p = le2page(le, page_link);
+c0107322:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107325:	83 e8 0c             	sub    $0xc,%eax
+c0107328:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c010732b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010732e:	83 c0 04             	add    $0x4,%eax
+c0107331:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0107338:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010733b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010733e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107341:	0f a3 10             	bt     %edx,(%eax)
+c0107344:	19 c0                	sbb    %eax,%eax
+c0107346:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0107349:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c010734d:	0f 95 c0             	setne  %al
+c0107350:	0f b6 c0             	movzbl %al,%eax
+c0107353:	85 c0                	test   %eax,%eax
+c0107355:	75 24                	jne    c010737b <check_swap+0x77>
+c0107357:	c7 44 24 0c 3a d5 10 	movl   $0xc010d53a,0xc(%esp)
+c010735e:	c0 
+c010735f:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107366:	c0 
+c0107367:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
+c010736e:	00 
+c010736f:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107376:	e8 66 9a ff ff       	call   c0100de1 <__panic>
+        count ++, total += p->property;
+c010737b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010737f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107382:	8b 50 08             	mov    0x8(%eax),%edx
+c0107385:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107388:	01 d0                	add    %edx,%eax
+c010738a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010738d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107390:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0107393:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107396:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107399:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010739c:	81 7d e8 78 10 1a c0 	cmpl   $0xc01a1078,-0x18(%ebp)
+c01073a3:	0f 85 79 ff ff ff    	jne    c0107322 <check_swap+0x1e>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c01073a9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c01073ac:	e8 50 de ff ff       	call   c0105201 <nr_free_pages>
+c01073b1:	39 c3                	cmp    %eax,%ebx
+c01073b3:	74 24                	je     c01073d9 <check_swap+0xd5>
+c01073b5:	c7 44 24 0c 4a d5 10 	movl   $0xc010d54a,0xc(%esp)
+c01073bc:	c0 
+c01073bd:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01073c4:	c0 
+c01073c5:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c01073cc:	00 
+c01073cd:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01073d4:	e8 08 9a ff ff       	call   c0100de1 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c01073d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01073dc:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01073e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01073e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01073e7:	c7 04 24 64 d5 10 c0 	movl   $0xc010d564,(%esp)
+c01073ee:	e8 6c 8f ff ff       	call   c010035f <cprintf>
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c01073f3:	e8 74 0b 00 00       	call   c0107f6c <mm_create>
+c01073f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+     assert(mm != NULL);
+c01073fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01073ff:	75 24                	jne    c0107425 <check_swap+0x121>
+c0107401:	c7 44 24 0c 8a d5 10 	movl   $0xc010d58a,0xc(%esp)
+c0107408:	c0 
+c0107409:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107410:	c0 
+c0107411:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
+c0107418:	00 
+c0107419:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107420:	e8 bc 99 ff ff       	call   c0100de1 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c0107425:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c010742a:	85 c0                	test   %eax,%eax
+c010742c:	74 24                	je     c0107452 <check_swap+0x14e>
+c010742e:	c7 44 24 0c 95 d5 10 	movl   $0xc010d595,0xc(%esp)
+c0107435:	c0 
+c0107436:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c010743d:	c0 
+c010743e:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
+c0107445:	00 
+c0107446:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c010744d:	e8 8f 99 ff ff       	call   c0100de1 <__panic>
+
+     check_mm_struct = mm;
+c0107452:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107455:	a3 6c 11 1a c0       	mov    %eax,0xc01a116c
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c010745a:	8b 15 00 aa 12 c0    	mov    0xc012aa00,%edx
+c0107460:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107463:	89 50 0c             	mov    %edx,0xc(%eax)
+c0107466:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107469:	8b 40 0c             	mov    0xc(%eax),%eax
+c010746c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+     assert(pgdir[0] == 0);
+c010746f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107472:	8b 00                	mov    (%eax),%eax
+c0107474:	85 c0                	test   %eax,%eax
+c0107476:	74 24                	je     c010749c <check_swap+0x198>
+c0107478:	c7 44 24 0c ad d5 10 	movl   $0xc010d5ad,0xc(%esp)
+c010747f:	c0 
+c0107480:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107487:	c0 
+c0107488:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c010748f:	00 
+c0107490:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107497:	e8 45 99 ff ff       	call   c0100de1 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c010749c:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
+c01074a3:	00 
+c01074a4:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
+c01074ab:	00 
+c01074ac:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+c01074b3:	e8 4d 0b 00 00       	call   c0108005 <vma_create>
+c01074b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(vma != NULL);
+c01074bb:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01074bf:	75 24                	jne    c01074e5 <check_swap+0x1e1>
+c01074c1:	c7 44 24 0c bb d5 10 	movl   $0xc010d5bb,0xc(%esp)
+c01074c8:	c0 
+c01074c9:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01074d0:	c0 
+c01074d1:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
+c01074d8:	00 
+c01074d9:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01074e0:	e8 fc 98 ff ff       	call   c0100de1 <__panic>
+
+     insert_vma_struct(mm, vma);
+c01074e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01074e8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01074ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01074ef:	89 04 24             	mov    %eax,(%esp)
+c01074f2:	e8 9e 0c 00 00       	call   c0108195 <insert_vma_struct>
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c01074f7:	c7 04 24 c8 d5 10 c0 	movl   $0xc010d5c8,(%esp)
+c01074fe:	e8 5c 8e ff ff       	call   c010035f <cprintf>
+     pte_t *temp_ptep=NULL;
+c0107503:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c010750a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010750d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107510:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0107517:	00 
+c0107518:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c010751f:	00 
+c0107520:	89 04 24             	mov    %eax,(%esp)
+c0107523:	e8 20 e3 ff ff       	call   c0105848 <get_pte>
+c0107528:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(temp_ptep!= NULL);
+c010752b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+c010752f:	75 24                	jne    c0107555 <check_swap+0x251>
+c0107531:	c7 44 24 0c fc d5 10 	movl   $0xc010d5fc,0xc(%esp)
+c0107538:	c0 
+c0107539:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107540:	c0 
+c0107541:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0107548:	00 
+c0107549:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107550:	e8 8c 98 ff ff       	call   c0100de1 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c0107555:	c7 04 24 10 d6 10 c0 	movl   $0xc010d610,(%esp)
+c010755c:	e8 fe 8d ff ff       	call   c010035f <cprintf>
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107561:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107568:	e9 a3 00 00 00       	jmp    c0107610 <check_swap+0x30c>
+          check_rp[i] = alloc_page();
+c010756d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0107574:	e8 eb db ff ff       	call   c0105164 <alloc_pages>
+c0107579:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010757c:	89 04 95 a0 10 1a c0 	mov    %eax,-0x3fe5ef60(,%edx,4)
+          assert(check_rp[i] != NULL );
+c0107583:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107586:	8b 04 85 a0 10 1a c0 	mov    -0x3fe5ef60(,%eax,4),%eax
+c010758d:	85 c0                	test   %eax,%eax
+c010758f:	75 24                	jne    c01075b5 <check_swap+0x2b1>
+c0107591:	c7 44 24 0c 34 d6 10 	movl   $0xc010d634,0xc(%esp)
+c0107598:	c0 
+c0107599:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01075a0:	c0 
+c01075a1:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
+c01075a8:	00 
+c01075a9:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01075b0:	e8 2c 98 ff ff       	call   c0100de1 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c01075b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01075b8:	8b 04 85 a0 10 1a c0 	mov    -0x3fe5ef60(,%eax,4),%eax
+c01075bf:	83 c0 04             	add    $0x4,%eax
+c01075c2:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
+c01075c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01075cc:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01075cf:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01075d2:	0f a3 10             	bt     %edx,(%eax)
+c01075d5:	19 c0                	sbb    %eax,%eax
+c01075d7:	89 45 ac             	mov    %eax,-0x54(%ebp)
+    return oldbit != 0;
+c01075da:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
+c01075de:	0f 95 c0             	setne  %al
+c01075e1:	0f b6 c0             	movzbl %al,%eax
+c01075e4:	85 c0                	test   %eax,%eax
+c01075e6:	74 24                	je     c010760c <check_swap+0x308>
+c01075e8:	c7 44 24 0c 48 d6 10 	movl   $0xc010d648,0xc(%esp)
+c01075ef:	c0 
+c01075f0:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01075f7:	c0 
+c01075f8:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c01075ff:	00 
+c0107600:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107607:	e8 d5 97 ff ff       	call   c0100de1 <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010760c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107610:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107614:	0f 8e 53 ff ff ff    	jle    c010756d <check_swap+0x269>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c010761a:	a1 78 10 1a c0       	mov    0xc01a1078,%eax
+c010761f:	8b 15 7c 10 1a c0    	mov    0xc01a107c,%edx
+c0107625:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107628:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c010762b:	c7 45 a8 78 10 1a c0 	movl   $0xc01a1078,-0x58(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107632:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107635:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107638:	89 50 04             	mov    %edx,0x4(%eax)
+c010763b:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c010763e:	8b 50 04             	mov    0x4(%eax),%edx
+c0107641:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107644:	89 10                	mov    %edx,(%eax)
+c0107646:	c7 45 a4 78 10 1a c0 	movl   $0xc01a1078,-0x5c(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010764d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107650:	8b 40 04             	mov    0x4(%eax),%eax
+c0107653:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+c0107656:	0f 94 c0             	sete   %al
+c0107659:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c010765c:	85 c0                	test   %eax,%eax
+c010765e:	75 24                	jne    c0107684 <check_swap+0x380>
+c0107660:	c7 44 24 0c 63 d6 10 	movl   $0xc010d663,0xc(%esp)
+c0107667:	c0 
+c0107668:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c010766f:	c0 
+c0107670:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
+c0107677:	00 
+c0107678:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c010767f:	e8 5d 97 ff ff       	call   c0100de1 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c0107684:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0107689:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     nr_free = 0;
+c010768c:	c7 05 80 10 1a c0 00 	movl   $0x0,0xc01a1080
+c0107693:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107696:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010769d:	eb 1e                	jmp    c01076bd <check_swap+0x3b9>
+        free_pages(check_rp[i],1);
+c010769f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076a2:	8b 04 85 a0 10 1a c0 	mov    -0x3fe5ef60(,%eax,4),%eax
+c01076a9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01076b0:	00 
+c01076b1:	89 04 24             	mov    %eax,(%esp)
+c01076b4:	e8 16 db ff ff       	call   c01051cf <free_pages>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01076b9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01076bd:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01076c1:	7e dc                	jle    c010769f <check_swap+0x39b>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c01076c3:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c01076c8:	83 f8 04             	cmp    $0x4,%eax
+c01076cb:	74 24                	je     c01076f1 <check_swap+0x3ed>
+c01076cd:	c7 44 24 0c 7c d6 10 	movl   $0xc010d67c,0xc(%esp)
+c01076d4:	c0 
+c01076d5:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01076dc:	c0 
+c01076dd:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c01076e4:	00 
+c01076e5:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01076ec:	e8 f0 96 ff ff       	call   c0100de1 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c01076f1:	c7 04 24 a0 d6 10 c0 	movl   $0xc010d6a0,(%esp)
+c01076f8:	e8 62 8c ff ff       	call   c010035f <cprintf>
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c01076fd:	c7 05 38 f0 19 c0 00 	movl   $0x0,0xc019f038
+c0107704:	00 00 00 
+     
+     check_content_set();
+c0107707:	e8 28 fa ff ff       	call   c0107134 <check_content_set>
+     assert( nr_free == 0);         
+c010770c:	a1 80 10 1a c0       	mov    0xc01a1080,%eax
+c0107711:	85 c0                	test   %eax,%eax
+c0107713:	74 24                	je     c0107739 <check_swap+0x435>
+c0107715:	c7 44 24 0c c7 d6 10 	movl   $0xc010d6c7,0xc(%esp)
+c010771c:	c0 
+c010771d:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107724:	c0 
+c0107725:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
+c010772c:	00 
+c010772d:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107734:	e8 a8 96 ff ff       	call   c0100de1 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107739:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107740:	eb 26                	jmp    c0107768 <check_swap+0x464>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0107742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107745:	c7 04 85 c0 10 1a c0 	movl   $0xffffffff,-0x3fe5ef40(,%eax,4)
+c010774c:	ff ff ff ff 
+c0107750:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107753:	8b 14 85 c0 10 1a c0 	mov    -0x3fe5ef40(,%eax,4),%edx
+c010775a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010775d:	89 14 85 00 11 1a c0 	mov    %edx,-0x3fe5ef00(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107764:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107768:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c010776c:	7e d4                	jle    c0107742 <check_swap+0x43e>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010776e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107775:	e9 eb 00 00 00       	jmp    c0107865 <check_swap+0x561>
+         check_ptep[i]=0;
+c010777a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010777d:	c7 04 85 54 11 1a c0 	movl   $0x0,-0x3fe5eeac(,%eax,4)
+c0107784:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c0107788:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010778b:	83 c0 01             	add    $0x1,%eax
+c010778e:	c1 e0 0c             	shl    $0xc,%eax
+c0107791:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107798:	00 
+c0107799:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010779d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01077a0:	89 04 24             	mov    %eax,(%esp)
+c01077a3:	e8 a0 e0 ff ff       	call   c0105848 <get_pte>
+c01077a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01077ab:	89 04 95 54 11 1a c0 	mov    %eax,-0x3fe5eeac(,%edx,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c01077b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01077b5:	8b 04 85 54 11 1a c0 	mov    -0x3fe5eeac(,%eax,4),%eax
+c01077bc:	85 c0                	test   %eax,%eax
+c01077be:	75 24                	jne    c01077e4 <check_swap+0x4e0>
+c01077c0:	c7 44 24 0c d4 d6 10 	movl   $0xc010d6d4,0xc(%esp)
+c01077c7:	c0 
+c01077c8:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c01077cf:	c0 
+c01077d0:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
+c01077d7:	00 
+c01077d8:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01077df:	e8 fd 95 ff ff       	call   c0100de1 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c01077e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01077e7:	8b 04 85 54 11 1a c0 	mov    -0x3fe5eeac(,%eax,4),%eax
+c01077ee:	8b 00                	mov    (%eax),%eax
+c01077f0:	89 04 24             	mov    %eax,(%esp)
+c01077f3:	e8 87 f5 ff ff       	call   c0106d7f <pte2page>
+c01077f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01077fb:	8b 14 95 a0 10 1a c0 	mov    -0x3fe5ef60(,%edx,4),%edx
+c0107802:	39 d0                	cmp    %edx,%eax
+c0107804:	74 24                	je     c010782a <check_swap+0x526>
+c0107806:	c7 44 24 0c ec d6 10 	movl   $0xc010d6ec,0xc(%esp)
+c010780d:	c0 
+c010780e:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107815:	c0 
+c0107816:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c010781d:	00 
+c010781e:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c0107825:	e8 b7 95 ff ff       	call   c0100de1 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c010782a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010782d:	8b 04 85 54 11 1a c0 	mov    -0x3fe5eeac(,%eax,4),%eax
+c0107834:	8b 00                	mov    (%eax),%eax
+c0107836:	83 e0 01             	and    $0x1,%eax
+c0107839:	85 c0                	test   %eax,%eax
+c010783b:	75 24                	jne    c0107861 <check_swap+0x55d>
+c010783d:	c7 44 24 0c 14 d7 10 	movl   $0xc010d714,0xc(%esp)
+c0107844:	c0 
+c0107845:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c010784c:	c0 
+c010784d:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
+c0107854:	00 
+c0107855:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c010785c:	e8 80 95 ff ff       	call   c0100de1 <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107861:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107865:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107869:	0f 8e 0b ff ff ff    	jle    c010777a <check_swap+0x476>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c010786f:	c7 04 24 30 d7 10 c0 	movl   $0xc010d730,(%esp)
+c0107876:	e8 e4 8a ff ff       	call   c010035f <cprintf>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c010787b:	e8 6c fa ff ff       	call   c01072ec <check_content_access>
+c0107880:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(ret==0);
+c0107883:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0107887:	74 24                	je     c01078ad <check_swap+0x5a9>
+c0107889:	c7 44 24 0c 56 d7 10 	movl   $0xc010d756,0xc(%esp)
+c0107890:	c0 
+c0107891:	c7 44 24 08 3e d4 10 	movl   $0xc010d43e,0x8(%esp)
+c0107898:	c0 
+c0107899:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
+c01078a0:	00 
+c01078a1:	c7 04 24 d8 d3 10 c0 	movl   $0xc010d3d8,(%esp)
+c01078a8:	e8 34 95 ff ff       	call   c0100de1 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01078ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01078b4:	eb 1e                	jmp    c01078d4 <check_swap+0x5d0>
+         free_pages(check_rp[i],1);
+c01078b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01078b9:	8b 04 85 a0 10 1a c0 	mov    -0x3fe5ef60(,%eax,4),%eax
+c01078c0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01078c7:	00 
+c01078c8:	89 04 24             	mov    %eax,(%esp)
+c01078cb:	e8 ff d8 ff ff       	call   c01051cf <free_pages>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01078d0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01078d4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01078d8:	7e dc                	jle    c01078b6 <check_swap+0x5b2>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c01078da:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01078dd:	8b 00                	mov    (%eax),%eax
+c01078df:	89 04 24             	mov    %eax,(%esp)
+c01078e2:	e8 d6 f4 ff ff       	call   c0106dbd <pde2page>
+c01078e7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01078ee:	00 
+c01078ef:	89 04 24             	mov    %eax,(%esp)
+c01078f2:	e8 d8 d8 ff ff       	call   c01051cf <free_pages>
+     pgdir[0] = 0;
+c01078f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01078fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c0107900:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107903:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c010790a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010790d:	89 04 24             	mov    %eax,(%esp)
+c0107910:	e8 b0 09 00 00       	call   c01082c5 <mm_destroy>
+     check_mm_struct = NULL;
+c0107915:	c7 05 6c 11 1a c0 00 	movl   $0x0,0xc01a116c
+c010791c:	00 00 00 
+     
+     nr_free = nr_free_store;
+c010791f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107922:	a3 80 10 1a c0       	mov    %eax,0xc01a1080
+     free_list = free_list_store;
+c0107927:	8b 45 98             	mov    -0x68(%ebp),%eax
+c010792a:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c010792d:	a3 78 10 1a c0       	mov    %eax,0xc01a1078
+c0107932:	89 15 7c 10 1a c0    	mov    %edx,0xc01a107c
+
+     
+     le = &free_list;
+c0107938:	c7 45 e8 78 10 1a c0 	movl   $0xc01a1078,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c010793f:	eb 1d                	jmp    c010795e <check_swap+0x65a>
+         struct Page *p = le2page(le, page_link);
+c0107941:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107944:	83 e8 0c             	sub    $0xc,%eax
+c0107947:	89 45 c8             	mov    %eax,-0x38(%ebp)
+         count --, total -= p->property;
+c010794a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c010794e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107951:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107954:	8b 40 08             	mov    0x8(%eax),%eax
+c0107957:	29 c2                	sub    %eax,%edx
+c0107959:	89 d0                	mov    %edx,%eax
+c010795b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010795e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107961:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107964:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0107967:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c010796a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010796d:	81 7d e8 78 10 1a c0 	cmpl   $0xc01a1078,-0x18(%ebp)
+c0107974:	75 cb                	jne    c0107941 <check_swap+0x63d>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0107976:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107979:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010797d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107980:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107984:	c7 04 24 5d d7 10 c0 	movl   $0xc010d75d,(%esp)
+c010798b:	e8 cf 89 ff ff       	call   c010035f <cprintf>
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c0107990:	c7 04 24 77 d7 10 c0 	movl   $0xc010d777,(%esp)
+c0107997:	e8 c3 89 ff ff       	call   c010035f <cprintf>
+}
+c010799c:	83 c4 74             	add    $0x74,%esp
+c010799f:	5b                   	pop    %ebx
+c01079a0:	5d                   	pop    %ebp
+c01079a1:	c3                   	ret    
+
+c01079a2 <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c01079a2:	55                   	push   %ebp
+c01079a3:	89 e5                	mov    %esp,%ebp
+c01079a5:	83 ec 10             	sub    $0x10,%esp
+c01079a8:	c7 45 fc 64 11 1a c0 	movl   $0xc01a1164,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01079af:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01079b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01079b5:	89 50 04             	mov    %edx,0x4(%eax)
+c01079b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01079bb:	8b 50 04             	mov    0x4(%eax),%edx
+c01079be:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01079c1:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c01079c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079c6:	c7 40 14 64 11 1a c0 	movl   $0xc01a1164,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c01079cd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01079d2:	c9                   	leave  
+c01079d3:	c3                   	ret    
+
+c01079d4 <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c01079d4:	55                   	push   %ebp
+c01079d5:	89 e5                	mov    %esp,%ebp
+c01079d7:	83 ec 48             	sub    $0x48,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c01079da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079dd:	8b 40 14             	mov    0x14(%eax),%eax
+c01079e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c01079e3:	8b 45 10             	mov    0x10(%ebp),%eax
+c01079e6:	83 c0 14             	add    $0x14,%eax
+c01079e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c01079ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01079f0:	74 06                	je     c01079f8 <_fifo_map_swappable+0x24>
+c01079f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01079f6:	75 24                	jne    c0107a1c <_fifo_map_swappable+0x48>
+c01079f8:	c7 44 24 0c 90 d7 10 	movl   $0xc010d790,0xc(%esp)
+c01079ff:	c0 
+c0107a00:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107a07:	c0 
+c0107a08:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
+c0107a0f:	00 
+c0107a10:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107a17:	e8 c5 93 ff ff       	call   c0100de1 <__panic>
+c0107a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107a1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a25:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107a2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0107a2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a31:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0107a34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107a37:	8b 40 04             	mov    0x4(%eax),%eax
+c0107a3a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107a3d:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c0107a40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107a43:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c0107a46:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107a49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107a4c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107a4f:	89 10                	mov    %edx,(%eax)
+c0107a51:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107a54:	8b 10                	mov    (%eax),%edx
+c0107a56:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107a59:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107a5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107a5f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107a62:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107a65:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107a68:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0107a6b:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
+    return 0;
+c0107a6d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107a72:	c9                   	leave  
+c0107a73:	c3                   	ret    
+
+c0107a74 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0107a74:	55                   	push   %ebp
+c0107a75:	89 e5                	mov    %esp,%ebp
+c0107a77:	83 ec 38             	sub    $0x38,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0107a7a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107a7d:	8b 40 14             	mov    0x14(%eax),%eax
+c0107a80:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0107a83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107a87:	75 24                	jne    c0107aad <_fifo_swap_out_victim+0x39>
+c0107a89:	c7 44 24 0c d7 d7 10 	movl   $0xc010d7d7,0xc(%esp)
+c0107a90:	c0 
+c0107a91:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107a98:	c0 
+c0107a99:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
+c0107aa0:	00 
+c0107aa1:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107aa8:	e8 34 93 ff ff       	call   c0100de1 <__panic>
+     assert(in_tick==0);
+c0107aad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107ab1:	74 24                	je     c0107ad7 <_fifo_swap_out_victim+0x63>
+c0107ab3:	c7 44 24 0c e4 d7 10 	movl   $0xc010d7e4,0xc(%esp)
+c0107aba:	c0 
+c0107abb:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107ac2:	c0 
+c0107ac3:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
+c0107aca:	00 
+c0107acb:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107ad2:	e8 0a 93 ff ff       	call   c0100de1 <__panic>
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = head->prev;
+c0107ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ada:	8b 00                	mov    (%eax),%eax
+c0107adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     assert(head!=le);
+c0107adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ae2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0107ae5:	75 24                	jne    c0107b0b <_fifo_swap_out_victim+0x97>
+c0107ae7:	c7 44 24 0c ef d7 10 	movl   $0xc010d7ef,0xc(%esp)
+c0107aee:	c0 
+c0107aef:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107af6:	c0 
+c0107af7:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c0107afe:	00 
+c0107aff:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107b06:	e8 d6 92 ff ff       	call   c0100de1 <__panic>
+     struct Page *p = le2page(le, pra_page_link);
+c0107b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107b0e:	83 e8 14             	sub    $0x14,%eax
+c0107b11:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107b17:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107b1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107b1d:	8b 40 04             	mov    0x4(%eax),%eax
+c0107b20:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0107b23:	8b 12                	mov    (%edx),%edx
+c0107b25:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0107b28:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107b2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107b31:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107b34:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107b3a:	89 10                	mov    %edx,(%eax)
+     list_del(le);
+     assert(p !=NULL);
+c0107b3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107b40:	75 24                	jne    c0107b66 <_fifo_swap_out_victim+0xf2>
+c0107b42:	c7 44 24 0c f8 d7 10 	movl   $0xc010d7f8,0xc(%esp)
+c0107b49:	c0 
+c0107b4a:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107b51:	c0 
+c0107b52:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
+c0107b59:	00 
+c0107b5a:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107b61:	e8 7b 92 ff ff       	call   c0100de1 <__panic>
+     *ptr_page = p;
+c0107b66:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107b69:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107b6c:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0107b6e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107b73:	c9                   	leave  
+c0107b74:	c3                   	ret    
+
+c0107b75 <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c0107b75:	55                   	push   %ebp
+c0107b76:	89 e5                	mov    %esp,%ebp
+c0107b78:	83 ec 18             	sub    $0x18,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107b7b:	c7 04 24 04 d8 10 c0 	movl   $0xc010d804,(%esp)
+c0107b82:	e8 d8 87 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107b87:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107b8c:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0107b8f:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107b94:	83 f8 04             	cmp    $0x4,%eax
+c0107b97:	74 24                	je     c0107bbd <_fifo_check_swap+0x48>
+c0107b99:	c7 44 24 0c 2a d8 10 	movl   $0xc010d82a,0xc(%esp)
+c0107ba0:	c0 
+c0107ba1:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107ba8:	c0 
+c0107ba9:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
+c0107bb0:	00 
+c0107bb1:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107bb8:	e8 24 92 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107bbd:	c7 04 24 3c d8 10 c0 	movl   $0xc010d83c,(%esp)
+c0107bc4:	e8 96 87 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107bc9:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107bce:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c0107bd1:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107bd6:	83 f8 04             	cmp    $0x4,%eax
+c0107bd9:	74 24                	je     c0107bff <_fifo_check_swap+0x8a>
+c0107bdb:	c7 44 24 0c 2a d8 10 	movl   $0xc010d82a,0xc(%esp)
+c0107be2:	c0 
+c0107be3:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107bea:	c0 
+c0107beb:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
+c0107bf2:	00 
+c0107bf3:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107bfa:	e8 e2 91 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107bff:	c7 04 24 64 d8 10 c0 	movl   $0xc010d864,(%esp)
+c0107c06:	e8 54 87 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107c0b:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107c10:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c0107c13:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107c18:	83 f8 04             	cmp    $0x4,%eax
+c0107c1b:	74 24                	je     c0107c41 <_fifo_check_swap+0xcc>
+c0107c1d:	c7 44 24 0c 2a d8 10 	movl   $0xc010d82a,0xc(%esp)
+c0107c24:	c0 
+c0107c25:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107c2c:	c0 
+c0107c2d:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
+c0107c34:	00 
+c0107c35:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107c3c:	e8 a0 91 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107c41:	c7 04 24 8c d8 10 c0 	movl   $0xc010d88c,(%esp)
+c0107c48:	e8 12 87 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107c4d:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107c52:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c0107c55:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107c5a:	83 f8 04             	cmp    $0x4,%eax
+c0107c5d:	74 24                	je     c0107c83 <_fifo_check_swap+0x10e>
+c0107c5f:	c7 44 24 0c 2a d8 10 	movl   $0xc010d82a,0xc(%esp)
+c0107c66:	c0 
+c0107c67:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107c6e:	c0 
+c0107c6f:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
+c0107c76:	00 
+c0107c77:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107c7e:	e8 5e 91 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107c83:	c7 04 24 b4 d8 10 c0 	movl   $0xc010d8b4,(%esp)
+c0107c8a:	e8 d0 86 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107c8f:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107c94:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c0107c97:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107c9c:	83 f8 05             	cmp    $0x5,%eax
+c0107c9f:	74 24                	je     c0107cc5 <_fifo_check_swap+0x150>
+c0107ca1:	c7 44 24 0c da d8 10 	movl   $0xc010d8da,0xc(%esp)
+c0107ca8:	c0 
+c0107ca9:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107cb0:	c0 
+c0107cb1:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
+c0107cb8:	00 
+c0107cb9:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107cc0:	e8 1c 91 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107cc5:	c7 04 24 8c d8 10 c0 	movl   $0xc010d88c,(%esp)
+c0107ccc:	e8 8e 86 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107cd1:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107cd6:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c0107cd9:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107cde:	83 f8 05             	cmp    $0x5,%eax
+c0107ce1:	74 24                	je     c0107d07 <_fifo_check_swap+0x192>
+c0107ce3:	c7 44 24 0c da d8 10 	movl   $0xc010d8da,0xc(%esp)
+c0107cea:	c0 
+c0107ceb:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107cf2:	c0 
+c0107cf3:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
+c0107cfa:	00 
+c0107cfb:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107d02:	e8 da 90 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107d07:	c7 04 24 3c d8 10 c0 	movl   $0xc010d83c,(%esp)
+c0107d0e:	e8 4c 86 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107d13:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107d18:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c0107d1b:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107d20:	83 f8 06             	cmp    $0x6,%eax
+c0107d23:	74 24                	je     c0107d49 <_fifo_check_swap+0x1d4>
+c0107d25:	c7 44 24 0c e9 d8 10 	movl   $0xc010d8e9,0xc(%esp)
+c0107d2c:	c0 
+c0107d2d:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107d34:	c0 
+c0107d35:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
+c0107d3c:	00 
+c0107d3d:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107d44:	e8 98 90 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107d49:	c7 04 24 8c d8 10 c0 	movl   $0xc010d88c,(%esp)
+c0107d50:	e8 0a 86 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107d55:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107d5a:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c0107d5d:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107d62:	83 f8 07             	cmp    $0x7,%eax
+c0107d65:	74 24                	je     c0107d8b <_fifo_check_swap+0x216>
+c0107d67:	c7 44 24 0c f8 d8 10 	movl   $0xc010d8f8,0xc(%esp)
+c0107d6e:	c0 
+c0107d6f:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107d76:	c0 
+c0107d77:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
+c0107d7e:	00 
+c0107d7f:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107d86:	e8 56 90 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107d8b:	c7 04 24 04 d8 10 c0 	movl   $0xc010d804,(%esp)
+c0107d92:	e8 c8 85 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107d97:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107d9c:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c0107d9f:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107da4:	83 f8 08             	cmp    $0x8,%eax
+c0107da7:	74 24                	je     c0107dcd <_fifo_check_swap+0x258>
+c0107da9:	c7 44 24 0c 07 d9 10 	movl   $0xc010d907,0xc(%esp)
+c0107db0:	c0 
+c0107db1:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107db8:	c0 
+c0107db9:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
+c0107dc0:	00 
+c0107dc1:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107dc8:	e8 14 90 ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107dcd:	c7 04 24 64 d8 10 c0 	movl   $0xc010d864,(%esp)
+c0107dd4:	e8 86 85 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107dd9:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107dde:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c0107de1:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107de6:	83 f8 09             	cmp    $0x9,%eax
+c0107de9:	74 24                	je     c0107e0f <_fifo_check_swap+0x29a>
+c0107deb:	c7 44 24 0c 16 d9 10 	movl   $0xc010d916,0xc(%esp)
+c0107df2:	c0 
+c0107df3:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107dfa:	c0 
+c0107dfb:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
+c0107e02:	00 
+c0107e03:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107e0a:	e8 d2 8f ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107e0f:	c7 04 24 b4 d8 10 c0 	movl   $0xc010d8b4,(%esp)
+c0107e16:	e8 44 85 ff ff       	call   c010035f <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107e1b:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107e20:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c0107e23:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107e28:	83 f8 0a             	cmp    $0xa,%eax
+c0107e2b:	74 24                	je     c0107e51 <_fifo_check_swap+0x2dc>
+c0107e2d:	c7 44 24 0c 25 d9 10 	movl   $0xc010d925,0xc(%esp)
+c0107e34:	c0 
+c0107e35:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107e3c:	c0 
+c0107e3d:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
+c0107e44:	00 
+c0107e45:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107e4c:	e8 90 8f ff ff       	call   c0100de1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107e51:	c7 04 24 3c d8 10 c0 	movl   $0xc010d83c,(%esp)
+c0107e58:	e8 02 85 ff ff       	call   c010035f <cprintf>
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0107e5d:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107e62:	0f b6 00             	movzbl (%eax),%eax
+c0107e65:	3c 0a                	cmp    $0xa,%al
+c0107e67:	74 24                	je     c0107e8d <_fifo_check_swap+0x318>
+c0107e69:	c7 44 24 0c 38 d9 10 	movl   $0xc010d938,0xc(%esp)
+c0107e70:	c0 
+c0107e71:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107e78:	c0 
+c0107e79:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
+c0107e80:	00 
+c0107e81:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107e88:	e8 54 8f ff ff       	call   c0100de1 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107e8d:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107e92:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c0107e95:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0107e9a:	83 f8 0b             	cmp    $0xb,%eax
+c0107e9d:	74 24                	je     c0107ec3 <_fifo_check_swap+0x34e>
+c0107e9f:	c7 44 24 0c 59 d9 10 	movl   $0xc010d959,0xc(%esp)
+c0107ea6:	c0 
+c0107ea7:	c7 44 24 08 ae d7 10 	movl   $0xc010d7ae,0x8(%esp)
+c0107eae:	c0 
+c0107eaf:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
+c0107eb6:	00 
+c0107eb7:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
+c0107ebe:	e8 1e 8f ff ff       	call   c0100de1 <__panic>
+    return 0;
+c0107ec3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107ec8:	c9                   	leave  
+c0107ec9:	c3                   	ret    
+
+c0107eca <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c0107eca:	55                   	push   %ebp
+c0107ecb:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107ecd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107ed2:	5d                   	pop    %ebp
+c0107ed3:	c3                   	ret    
+
+c0107ed4 <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0107ed4:	55                   	push   %ebp
+c0107ed5:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107ed7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107edc:	5d                   	pop    %ebp
+c0107edd:	c3                   	ret    
+
+c0107ede <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c0107ede:	55                   	push   %ebp
+c0107edf:	89 e5                	mov    %esp,%ebp
+c0107ee1:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107ee6:	5d                   	pop    %ebp
+c0107ee7:	c3                   	ret    
+
+c0107ee8 <lock_init>:
+#define local_intr_restore(x)   __intr_restore(x);
+
+typedef volatile bool lock_t;
+
+static inline void
+lock_init(lock_t *lock) {
+c0107ee8:	55                   	push   %ebp
+c0107ee9:	89 e5                	mov    %esp,%ebp
+    *lock = 0;
+c0107eeb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107eee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+}
+c0107ef4:	5d                   	pop    %ebp
+c0107ef5:	c3                   	ret    
+
+c0107ef6 <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c0107ef6:	55                   	push   %ebp
+c0107ef7:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c0107ef9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107efc:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0107eff:	5d                   	pop    %ebp
+c0107f00:	c3                   	ret    
+
+c0107f01 <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c0107f01:	55                   	push   %ebp
+c0107f02:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c0107f04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f07:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107f0a:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c0107f0d:	5d                   	pop    %ebp
+c0107f0e:	c3                   	ret    
+
+c0107f0f <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0107f0f:	55                   	push   %ebp
+c0107f10:	89 e5                	mov    %esp,%ebp
+c0107f12:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0107f15:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f18:	c1 e8 0c             	shr    $0xc,%eax
+c0107f1b:	89 c2                	mov    %eax,%edx
+c0107f1d:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0107f22:	39 c2                	cmp    %eax,%edx
+c0107f24:	72 1c                	jb     c0107f42 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0107f26:	c7 44 24 08 7c d9 10 	movl   $0xc010d97c,0x8(%esp)
+c0107f2d:	c0 
+c0107f2e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0107f35:	00 
+c0107f36:	c7 04 24 9b d9 10 c0 	movl   $0xc010d99b,(%esp)
+c0107f3d:	e8 9f 8e ff ff       	call   c0100de1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0107f42:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0107f47:	8b 55 08             	mov    0x8(%ebp),%edx
+c0107f4a:	c1 ea 0c             	shr    $0xc,%edx
+c0107f4d:	c1 e2 05             	shl    $0x5,%edx
+c0107f50:	01 d0                	add    %edx,%eax
+}
+c0107f52:	c9                   	leave  
+c0107f53:	c3                   	ret    
+
+c0107f54 <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0107f54:	55                   	push   %ebp
+c0107f55:	89 e5                	mov    %esp,%ebp
+c0107f57:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0107f5a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0107f62:	89 04 24             	mov    %eax,(%esp)
+c0107f65:	e8 a5 ff ff ff       	call   c0107f0f <pa2page>
+}
+c0107f6a:	c9                   	leave  
+c0107f6b:	c3                   	ret    
+
+c0107f6c <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c0107f6c:	55                   	push   %ebp
+c0107f6d:	89 e5                	mov    %esp,%ebp
+c0107f6f:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c0107f72:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0107f79:	e8 71 cd ff ff       	call   c0104cef <kmalloc>
+c0107f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c0107f81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107f85:	74 79                	je     c0108000 <mm_create+0x94>
+        list_init(&(mm->mmap_list));
+c0107f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107f8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107f8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107f90:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107f93:	89 50 04             	mov    %edx,0x4(%eax)
+c0107f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107f99:	8b 50 04             	mov    0x4(%eax),%edx
+c0107f9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107f9f:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c0107fa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fa4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c0107fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c0107fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fb8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c0107fbf:	a1 2c f0 19 c0       	mov    0xc019f02c,%eax
+c0107fc4:	85 c0                	test   %eax,%eax
+c0107fc6:	74 0d                	je     c0107fd5 <mm_create+0x69>
+c0107fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fcb:	89 04 24             	mov    %eax,(%esp)
+c0107fce:	e8 92 ee ff ff       	call   c0106e65 <swap_init_mm>
+c0107fd3:	eb 0a                	jmp    c0107fdf <mm_create+0x73>
+        else mm->sm_priv = NULL;
+c0107fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fd8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        
+        set_mm_count(mm, 0);
+c0107fdf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0107fe6:	00 
+c0107fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fea:	89 04 24             	mov    %eax,(%esp)
+c0107fed:	e8 0f ff ff ff       	call   c0107f01 <set_mm_count>
+        lock_init(&(mm->mm_lock));
+c0107ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ff5:	83 c0 1c             	add    $0x1c,%eax
+c0107ff8:	89 04 24             	mov    %eax,(%esp)
+c0107ffb:	e8 e8 fe ff ff       	call   c0107ee8 <lock_init>
+    }    
+    return mm;
+c0108000:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108003:	c9                   	leave  
+c0108004:	c3                   	ret    
+
+c0108005 <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c0108005:	55                   	push   %ebp
+c0108006:	89 e5                	mov    %esp,%ebp
+c0108008:	83 ec 28             	sub    $0x28,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c010800b:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
+c0108012:	e8 d8 cc ff ff       	call   c0104cef <kmalloc>
+c0108017:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c010801a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010801e:	74 1b                	je     c010803b <vma_create+0x36>
+        vma->vm_start = vm_start;
+c0108020:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108023:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108026:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c0108029:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010802c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010802f:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c0108032:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108035:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108038:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c010803b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010803e:	c9                   	leave  
+c010803f:	c3                   	ret    
+
+c0108040 <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c0108040:	55                   	push   %ebp
+c0108041:	89 e5                	mov    %esp,%ebp
+c0108043:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c0108046:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c010804d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108051:	0f 84 95 00 00 00    	je     c01080ec <find_vma+0xac>
+        vma = mm->mmap_cache;
+c0108057:	8b 45 08             	mov    0x8(%ebp),%eax
+c010805a:	8b 40 08             	mov    0x8(%eax),%eax
+c010805d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c0108060:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108064:	74 16                	je     c010807c <find_vma+0x3c>
+c0108066:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108069:	8b 40 04             	mov    0x4(%eax),%eax
+c010806c:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010806f:	77 0b                	ja     c010807c <find_vma+0x3c>
+c0108071:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108074:	8b 40 08             	mov    0x8(%eax),%eax
+c0108077:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010807a:	77 61                	ja     c01080dd <find_vma+0x9d>
+                bool found = 0;
+c010807c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c0108083:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108086:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108089:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010808c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c010808f:	eb 28                	jmp    c01080b9 <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c0108091:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108094:	83 e8 10             	sub    $0x10,%eax
+c0108097:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c010809a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010809d:	8b 40 04             	mov    0x4(%eax),%eax
+c01080a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01080a3:	77 14                	ja     c01080b9 <find_vma+0x79>
+c01080a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01080a8:	8b 40 08             	mov    0x8(%eax),%eax
+c01080ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01080ae:	76 09                	jbe    c01080b9 <find_vma+0x79>
+                        found = 1;
+c01080b0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c01080b7:	eb 17                	jmp    c01080d0 <find_vma+0x90>
+c01080b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01080bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01080c2:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c01080c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01080c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01080ce:	75 c1                	jne    c0108091 <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c01080d0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c01080d4:	75 07                	jne    c01080dd <find_vma+0x9d>
+                    vma = NULL;
+c01080d6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c01080dd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c01080e1:	74 09                	je     c01080ec <find_vma+0xac>
+            mm->mmap_cache = vma;
+c01080e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080e6:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01080e9:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c01080ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01080ef:	c9                   	leave  
+c01080f0:	c3                   	ret    
+
+c01080f1 <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c01080f1:	55                   	push   %ebp
+c01080f2:	89 e5                	mov    %esp,%ebp
+c01080f4:	83 ec 18             	sub    $0x18,%esp
+    assert(prev->vm_start < prev->vm_end);
+c01080f7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080fa:	8b 50 04             	mov    0x4(%eax),%edx
+c01080fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108100:	8b 40 08             	mov    0x8(%eax),%eax
+c0108103:	39 c2                	cmp    %eax,%edx
+c0108105:	72 24                	jb     c010812b <check_vma_overlap+0x3a>
+c0108107:	c7 44 24 0c a9 d9 10 	movl   $0xc010d9a9,0xc(%esp)
+c010810e:	c0 
+c010810f:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108116:	c0 
+c0108117:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c010811e:	00 
+c010811f:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108126:	e8 b6 8c ff ff       	call   c0100de1 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c010812b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010812e:	8b 50 08             	mov    0x8(%eax),%edx
+c0108131:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108134:	8b 40 04             	mov    0x4(%eax),%eax
+c0108137:	39 c2                	cmp    %eax,%edx
+c0108139:	76 24                	jbe    c010815f <check_vma_overlap+0x6e>
+c010813b:	c7 44 24 0c ec d9 10 	movl   $0xc010d9ec,0xc(%esp)
+c0108142:	c0 
+c0108143:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c010814a:	c0 
+c010814b:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
+c0108152:	00 
+c0108153:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c010815a:	e8 82 8c ff ff       	call   c0100de1 <__panic>
+    assert(next->vm_start < next->vm_end);
+c010815f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108162:	8b 50 04             	mov    0x4(%eax),%edx
+c0108165:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108168:	8b 40 08             	mov    0x8(%eax),%eax
+c010816b:	39 c2                	cmp    %eax,%edx
+c010816d:	72 24                	jb     c0108193 <check_vma_overlap+0xa2>
+c010816f:	c7 44 24 0c 0b da 10 	movl   $0xc010da0b,0xc(%esp)
+c0108176:	c0 
+c0108177:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c010817e:	c0 
+c010817f:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
+c0108186:	00 
+c0108187:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c010818e:	e8 4e 8c ff ff       	call   c0100de1 <__panic>
+}
+c0108193:	c9                   	leave  
+c0108194:	c3                   	ret    
+
+c0108195 <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c0108195:	55                   	push   %ebp
+c0108196:	89 e5                	mov    %esp,%ebp
+c0108198:	83 ec 48             	sub    $0x48,%esp
+    assert(vma->vm_start < vma->vm_end);
+c010819b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010819e:	8b 50 04             	mov    0x4(%eax),%edx
+c01081a1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01081a4:	8b 40 08             	mov    0x8(%eax),%eax
+c01081a7:	39 c2                	cmp    %eax,%edx
+c01081a9:	72 24                	jb     c01081cf <insert_vma_struct+0x3a>
+c01081ab:	c7 44 24 0c 29 da 10 	movl   $0xc010da29,0xc(%esp)
+c01081b2:	c0 
+c01081b3:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01081ba:	c0 
+c01081bb:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
+c01081c2:	00 
+c01081c3:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01081ca:	e8 12 8c ff ff       	call   c0100de1 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c01081cf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c01081d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01081d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c01081db:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01081de:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c01081e1:	eb 21                	jmp    c0108204 <insert_vma_struct+0x6f>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c01081e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01081e6:	83 e8 10             	sub    $0x10,%eax
+c01081e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c01081ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01081ef:	8b 50 04             	mov    0x4(%eax),%edx
+c01081f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01081f5:	8b 40 04             	mov    0x4(%eax),%eax
+c01081f8:	39 c2                	cmp    %eax,%edx
+c01081fa:	76 02                	jbe    c01081fe <insert_vma_struct+0x69>
+                break;
+c01081fc:	eb 1d                	jmp    c010821b <insert_vma_struct+0x86>
+            }
+            le_prev = le;
+c01081fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108201:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108204:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108207:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010820a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010820d:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c0108210:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108213:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108216:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108219:	75 c8                	jne    c01081e3 <insert_vma_struct+0x4e>
+c010821b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010821e:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108221:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108224:	8b 40 04             	mov    0x4(%eax),%eax
+                break;
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c0108227:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c010822a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010822d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108230:	74 15                	je     c0108247 <insert_vma_struct+0xb2>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c0108232:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108235:	8d 50 f0             	lea    -0x10(%eax),%edx
+c0108238:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010823b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010823f:	89 14 24             	mov    %edx,(%esp)
+c0108242:	e8 aa fe ff ff       	call   c01080f1 <check_vma_overlap>
+    }
+    if (le_next != list) {
+c0108247:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010824a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010824d:	74 15                	je     c0108264 <insert_vma_struct+0xcf>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c010824f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108252:	83 e8 10             	sub    $0x10,%eax
+c0108255:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108259:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010825c:	89 04 24             	mov    %eax,(%esp)
+c010825f:	e8 8d fe ff ff       	call   c01080f1 <check_vma_overlap>
+    }
+
+    vma->vm_mm = mm;
+c0108264:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108267:	8b 55 08             	mov    0x8(%ebp),%edx
+c010826a:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c010826c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010826f:	8d 50 10             	lea    0x10(%eax),%edx
+c0108272:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108275:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108278:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010827b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010827e:	8b 40 04             	mov    0x4(%eax),%eax
+c0108281:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108284:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0108287:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010828a:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c010828d:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0108290:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0108293:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0108296:	89 10                	mov    %edx,(%eax)
+c0108298:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010829b:	8b 10                	mov    (%eax),%edx
+c010829d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01082a0:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01082a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01082a6:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c01082a9:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c01082ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01082af:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01082b2:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c01082b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082b7:	8b 40 10             	mov    0x10(%eax),%eax
+c01082ba:	8d 50 01             	lea    0x1(%eax),%edx
+c01082bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082c0:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c01082c3:	c9                   	leave  
+c01082c4:	c3                   	ret    
+
+c01082c5 <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c01082c5:	55                   	push   %ebp
+c01082c6:	89 e5                	mov    %esp,%ebp
+c01082c8:	83 ec 38             	sub    $0x38,%esp
+    assert(mm_count(mm) == 0);
+c01082cb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082ce:	89 04 24             	mov    %eax,(%esp)
+c01082d1:	e8 20 fc ff ff       	call   c0107ef6 <mm_count>
+c01082d6:	85 c0                	test   %eax,%eax
+c01082d8:	74 24                	je     c01082fe <mm_destroy+0x39>
+c01082da:	c7 44 24 0c 45 da 10 	movl   $0xc010da45,0xc(%esp)
+c01082e1:	c0 
+c01082e2:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01082e9:	c0 
+c01082ea:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c01082f1:	00 
+c01082f2:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01082f9:	e8 e3 8a ff ff       	call   c0100de1 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c01082fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108301:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c0108304:	eb 36                	jmp    c010833c <mm_destroy+0x77>
+c0108306:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108309:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010830c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010830f:	8b 40 04             	mov    0x4(%eax),%eax
+c0108312:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108315:	8b 12                	mov    (%edx),%edx
+c0108317:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010831a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010831d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108320:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108323:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0108326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108329:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010832c:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+c010832e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108331:	83 e8 10             	sub    $0x10,%eax
+c0108334:	89 04 24             	mov    %eax,(%esp)
+c0108337:	e8 ce c9 ff ff       	call   c0104d0a <kfree>
+c010833c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010833f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108342:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108345:	8b 40 04             	mov    0x4(%eax),%eax
+void
+mm_destroy(struct mm_struct *mm) {
+    assert(mm_count(mm) == 0);
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c0108348:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010834b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010834e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0108351:	75 b3                	jne    c0108306 <mm_destroy+0x41>
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+    }
+    kfree(mm); //kfree mm
+c0108353:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108356:	89 04 24             	mov    %eax,(%esp)
+c0108359:	e8 ac c9 ff ff       	call   c0104d0a <kfree>
+    mm=NULL;
+c010835e:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0108365:	c9                   	leave  
+c0108366:	c3                   	ret    
+
+c0108367 <mm_map>:
+
+int
+mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+       struct vma_struct **vma_store) {
+c0108367:	55                   	push   %ebp
+c0108368:	89 e5                	mov    %esp,%ebp
+c010836a:	83 ec 38             	sub    $0x38,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c010836d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108370:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108373:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108376:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010837b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010837e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c0108385:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108388:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010838b:	01 c2                	add    %eax,%edx
+c010838d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108390:	01 d0                	add    %edx,%eax
+c0108392:	83 e8 01             	sub    $0x1,%eax
+c0108395:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010839b:	ba 00 00 00 00       	mov    $0x0,%edx
+c01083a0:	f7 75 e8             	divl   -0x18(%ebp)
+c01083a3:	89 d0                	mov    %edx,%eax
+c01083a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01083a8:	29 c2                	sub    %eax,%edx
+c01083aa:	89 d0                	mov    %edx,%eax
+c01083ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end)) {
+c01083af:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c01083b6:	76 11                	jbe    c01083c9 <mm_map+0x62>
+c01083b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01083bb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01083be:	73 09                	jae    c01083c9 <mm_map+0x62>
+c01083c0:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c01083c7:	76 0a                	jbe    c01083d3 <mm_map+0x6c>
+        return -E_INVAL;
+c01083c9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c01083ce:	e9 ae 00 00 00       	jmp    c0108481 <mm_map+0x11a>
+    }
+
+    assert(mm != NULL);
+c01083d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01083d7:	75 24                	jne    c01083fd <mm_map+0x96>
+c01083d9:	c7 44 24 0c 57 da 10 	movl   $0xc010da57,0xc(%esp)
+c01083e0:	c0 
+c01083e1:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01083e8:	c0 
+c01083e9:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c01083f0:	00 
+c01083f1:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01083f8:	e8 e4 89 ff ff       	call   c0100de1 <__panic>
+
+    int ret = -E_INVAL;
+c01083fd:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+c0108404:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108407:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010840b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010840e:	89 04 24             	mov    %eax,(%esp)
+c0108411:	e8 2a fc ff ff       	call   c0108040 <find_vma>
+c0108416:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108419:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010841d:	74 0d                	je     c010842c <mm_map+0xc5>
+c010841f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108422:	8b 40 04             	mov    0x4(%eax),%eax
+c0108425:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108428:	73 02                	jae    c010842c <mm_map+0xc5>
+        goto out;
+c010842a:	eb 52                	jmp    c010847e <mm_map+0x117>
+    }
+    ret = -E_NO_MEM;
+c010842c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+c0108433:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108436:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010843a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010843d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108441:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108444:	89 04 24             	mov    %eax,(%esp)
+c0108447:	e8 b9 fb ff ff       	call   c0108005 <vma_create>
+c010844c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010844f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0108453:	75 02                	jne    c0108457 <mm_map+0xf0>
+        goto out;
+c0108455:	eb 27                	jmp    c010847e <mm_map+0x117>
+    }
+    insert_vma_struct(mm, vma);
+c0108457:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010845a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010845e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108461:	89 04 24             	mov    %eax,(%esp)
+c0108464:	e8 2c fd ff ff       	call   c0108195 <insert_vma_struct>
+    if (vma_store != NULL) {
+c0108469:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c010846d:	74 08                	je     c0108477 <mm_map+0x110>
+        *vma_store = vma;
+c010846f:	8b 45 18             	mov    0x18(%ebp),%eax
+c0108472:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0108475:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c0108477:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+out:
+    return ret;
+c010847e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108481:	c9                   	leave  
+c0108482:	c3                   	ret    
+
+c0108483 <dup_mmap>:
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+c0108483:	55                   	push   %ebp
+c0108484:	89 e5                	mov    %esp,%ebp
+c0108486:	56                   	push   %esi
+c0108487:	53                   	push   %ebx
+c0108488:	83 ec 40             	sub    $0x40,%esp
+    assert(to != NULL && from != NULL);
+c010848b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010848f:	74 06                	je     c0108497 <dup_mmap+0x14>
+c0108491:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0108495:	75 24                	jne    c01084bb <dup_mmap+0x38>
+c0108497:	c7 44 24 0c 62 da 10 	movl   $0xc010da62,0xc(%esp)
+c010849e:	c0 
+c010849f:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01084a6:	c0 
+c01084a7:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
+c01084ae:	00 
+c01084af:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01084b6:	e8 26 89 ff ff       	call   c0100de1 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c01084bb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01084be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01084c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01084c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list) {
+c01084c7:	e9 92 00 00 00       	jmp    c010855e <dup_mmap+0xdb>
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c01084cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01084cf:	83 e8 10             	sub    $0x10,%eax
+c01084d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c01084d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084d8:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01084db:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084de:	8b 50 08             	mov    0x8(%eax),%edx
+c01084e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084e4:	8b 40 04             	mov    0x4(%eax),%eax
+c01084e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01084eb:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01084ef:	89 04 24             	mov    %eax,(%esp)
+c01084f2:	e8 0e fb ff ff       	call   c0108005 <vma_create>
+c01084f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL) {
+c01084fa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01084fe:	75 07                	jne    c0108507 <dup_mmap+0x84>
+            return -E_NO_MEM;
+c0108500:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0108505:	eb 76                	jmp    c010857d <dup_mmap+0xfa>
+        }
+
+        insert_vma_struct(to, nvma);
+c0108507:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010850a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010850e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108511:	89 04 24             	mov    %eax,(%esp)
+c0108514:	e8 7c fc ff ff       	call   c0108195 <insert_vma_struct>
+
+        bool share = 0;
+c0108519:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+c0108520:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108523:	8b 58 08             	mov    0x8(%eax),%ebx
+c0108526:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108529:	8b 48 04             	mov    0x4(%eax),%ecx
+c010852c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010852f:	8b 50 0c             	mov    0xc(%eax),%edx
+c0108532:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108535:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108538:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+c010853b:	89 74 24 10          	mov    %esi,0x10(%esp)
+c010853f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0108543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0108547:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010854b:	89 04 24             	mov    %eax,(%esp)
+c010854e:	e8 e2 d6 ff ff       	call   c0105c35 <copy_range>
+c0108553:	85 c0                	test   %eax,%eax
+c0108555:	74 07                	je     c010855e <dup_mmap+0xdb>
+            return -E_NO_MEM;
+c0108557:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c010855c:	eb 1f                	jmp    c010857d <dup_mmap+0xfa>
+c010855e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108561:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0108564:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108567:	8b 00                	mov    (%eax),%eax
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+    assert(to != NULL && from != NULL);
+    list_entry_t *list = &(from->mmap_list), *le = list;
+    while ((le = list_prev(le)) != list) {
+c0108569:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010856c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010856f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108572:	0f 85 54 ff ff ff    	jne    c01084cc <dup_mmap+0x49>
+        bool share = 0;
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+            return -E_NO_MEM;
+        }
+    }
+    return 0;
+c0108578:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010857d:	83 c4 40             	add    $0x40,%esp
+c0108580:	5b                   	pop    %ebx
+c0108581:	5e                   	pop    %esi
+c0108582:	5d                   	pop    %ebp
+c0108583:	c3                   	ret    
+
+c0108584 <exit_mmap>:
+
+void
+exit_mmap(struct mm_struct *mm) {
+c0108584:	55                   	push   %ebp
+c0108585:	89 e5                	mov    %esp,%ebp
+c0108587:	83 ec 38             	sub    $0x38,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c010858a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010858e:	74 0f                	je     c010859f <exit_mmap+0x1b>
+c0108590:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108593:	89 04 24             	mov    %eax,(%esp)
+c0108596:	e8 5b f9 ff ff       	call   c0107ef6 <mm_count>
+c010859b:	85 c0                	test   %eax,%eax
+c010859d:	74 24                	je     c01085c3 <exit_mmap+0x3f>
+c010859f:	c7 44 24 0c 80 da 10 	movl   $0xc010da80,0xc(%esp)
+c01085a6:	c0 
+c01085a7:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01085ae:	c0 
+c01085af:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c01085b6:	00 
+c01085b7:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01085be:	e8 1e 88 ff ff       	call   c0100de1 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c01085c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085c6:	8b 40 0c             	mov    0xc(%eax),%eax
+c01085c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c01085cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01085d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01085d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list) {
+c01085d8:	eb 28                	jmp    c0108602 <exit_mmap+0x7e>
+        struct vma_struct *vma = le2vma(le, list_link);
+c01085da:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085dd:	83 e8 10             	sub    $0x10,%eax
+c01085e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c01085e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01085e6:	8b 50 08             	mov    0x8(%eax),%edx
+c01085e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01085ec:	8b 40 04             	mov    0x4(%eax),%eax
+c01085ef:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01085f3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01085f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01085fa:	89 04 24             	mov    %eax,(%esp)
+c01085fd:	e8 38 d4 ff ff       	call   c0105a3a <unmap_range>
+c0108602:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108605:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108608:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010860b:	8b 40 04             	mov    0x4(%eax),%eax
+void
+exit_mmap(struct mm_struct *mm) {
+    assert(mm != NULL && mm_count(mm) == 0);
+    pde_t *pgdir = mm->pgdir;
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+c010860e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108611:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108614:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108617:	75 c1                	jne    c01085da <exit_mmap+0x56>
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0108619:	eb 28                	jmp    c0108643 <exit_mmap+0xbf>
+        struct vma_struct *vma = le2vma(le, list_link);
+c010861b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010861e:	83 e8 10             	sub    $0x10,%eax
+c0108621:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c0108624:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108627:	8b 50 08             	mov    0x8(%eax),%edx
+c010862a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010862d:	8b 40 04             	mov    0x4(%eax),%eax
+c0108630:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108634:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108638:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010863b:	89 04 24             	mov    %eax,(%esp)
+c010863e:	e8 eb d4 ff ff       	call   c0105b2e <exit_range>
+c0108643:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108646:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108649:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010864c:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c010864f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108652:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108655:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108658:	75 c1                	jne    c010861b <exit_mmap+0x97>
+        struct vma_struct *vma = le2vma(le, list_link);
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+}
+c010865a:	c9                   	leave  
+c010865b:	c3                   	ret    
+
+c010865c <copy_from_user>:
+
+bool
+copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
+c010865c:	55                   	push   %ebp
+c010865d:	89 e5                	mov    %esp,%ebp
+c010865f:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+c0108662:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108665:	8b 55 18             	mov    0x18(%ebp),%edx
+c0108668:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010866c:	8b 55 14             	mov    0x14(%ebp),%edx
+c010866f:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108673:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108677:	8b 45 08             	mov    0x8(%ebp),%eax
+c010867a:	89 04 24             	mov    %eax,(%esp)
+c010867d:	e8 a6 09 00 00       	call   c0109028 <user_mem_check>
+c0108682:	85 c0                	test   %eax,%eax
+c0108684:	75 07                	jne    c010868d <copy_from_user+0x31>
+        return 0;
+c0108686:	b8 00 00 00 00       	mov    $0x0,%eax
+c010868b:	eb 1e                	jmp    c01086ab <copy_from_user+0x4f>
+    }
+    memcpy(dst, src, len);
+c010868d:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108690:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108694:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108697:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010869b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010869e:	89 04 24             	mov    %eax,(%esp)
+c01086a1:	e8 46 37 00 00       	call   c010bdec <memcpy>
+    return 1;
+c01086a6:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01086ab:	c9                   	leave  
+c01086ac:	c3                   	ret    
+
+c01086ad <copy_to_user>:
+
+bool
+copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
+c01086ad:	55                   	push   %ebp
+c01086ae:	89 e5                	mov    %esp,%ebp
+c01086b0:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+c01086b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01086b6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c01086bd:	00 
+c01086be:	8b 55 14             	mov    0x14(%ebp),%edx
+c01086c1:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01086c5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01086c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01086cc:	89 04 24             	mov    %eax,(%esp)
+c01086cf:	e8 54 09 00 00       	call   c0109028 <user_mem_check>
+c01086d4:	85 c0                	test   %eax,%eax
+c01086d6:	75 07                	jne    c01086df <copy_to_user+0x32>
+        return 0;
+c01086d8:	b8 00 00 00 00       	mov    $0x0,%eax
+c01086dd:	eb 1e                	jmp    c01086fd <copy_to_user+0x50>
+    }
+    memcpy(dst, src, len);
+c01086df:	8b 45 14             	mov    0x14(%ebp),%eax
+c01086e2:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01086e6:	8b 45 10             	mov    0x10(%ebp),%eax
+c01086e9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01086ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01086f0:	89 04 24             	mov    %eax,(%esp)
+c01086f3:	e8 f4 36 00 00       	call   c010bdec <memcpy>
+    return 1;
+c01086f8:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01086fd:	c9                   	leave  
+c01086fe:	c3                   	ret    
+
+c01086ff <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c01086ff:	55                   	push   %ebp
+c0108700:	89 e5                	mov    %esp,%ebp
+c0108702:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c0108705:	e8 02 00 00 00       	call   c010870c <check_vmm>
+}
+c010870a:	c9                   	leave  
+c010870b:	c3                   	ret    
+
+c010870c <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c010870c:	55                   	push   %ebp
+c010870d:	89 e5                	mov    %esp,%ebp
+c010870f:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0108712:	e8 ea ca ff ff       	call   c0105201 <nr_free_pages>
+c0108717:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c010871a:	e8 13 00 00 00       	call   c0108732 <check_vma_struct>
+    check_pgfault();
+c010871f:	e8 a7 04 00 00       	call   c0108bcb <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c0108724:	c7 04 24 a0 da 10 c0 	movl   $0xc010daa0,(%esp)
+c010872b:	e8 2f 7c ff ff       	call   c010035f <cprintf>
+}
+c0108730:	c9                   	leave  
+c0108731:	c3                   	ret    
+
+c0108732 <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c0108732:	55                   	push   %ebp
+c0108733:	89 e5                	mov    %esp,%ebp
+c0108735:	83 ec 68             	sub    $0x68,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0108738:	e8 c4 ca ff ff       	call   c0105201 <nr_free_pages>
+c010873d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c0108740:	e8 27 f8 ff ff       	call   c0107f6c <mm_create>
+c0108745:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c0108748:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010874c:	75 24                	jne    c0108772 <check_vma_struct+0x40>
+c010874e:	c7 44 24 0c 57 da 10 	movl   $0xc010da57,0xc(%esp)
+c0108755:	c0 
+c0108756:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c010875d:	c0 
+c010875e:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
+c0108765:	00 
+c0108766:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c010876d:	e8 6f 86 ff ff       	call   c0100de1 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c0108772:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c0108779:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010877c:	89 d0                	mov    %edx,%eax
+c010877e:	c1 e0 02             	shl    $0x2,%eax
+c0108781:	01 d0                	add    %edx,%eax
+c0108783:	01 c0                	add    %eax,%eax
+c0108785:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0108788:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010878b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010878e:	eb 70                	jmp    c0108800 <check_vma_struct+0xce>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0108790:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108793:	89 d0                	mov    %edx,%eax
+c0108795:	c1 e0 02             	shl    $0x2,%eax
+c0108798:	01 d0                	add    %edx,%eax
+c010879a:	83 c0 02             	add    $0x2,%eax
+c010879d:	89 c1                	mov    %eax,%ecx
+c010879f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01087a2:	89 d0                	mov    %edx,%eax
+c01087a4:	c1 e0 02             	shl    $0x2,%eax
+c01087a7:	01 d0                	add    %edx,%eax
+c01087a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01087b0:	00 
+c01087b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c01087b5:	89 04 24             	mov    %eax,(%esp)
+c01087b8:	e8 48 f8 ff ff       	call   c0108005 <vma_create>
+c01087bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c01087c0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01087c4:	75 24                	jne    c01087ea <check_vma_struct+0xb8>
+c01087c6:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
+c01087cd:	c0 
+c01087ce:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01087d5:	c0 
+c01087d6:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
+c01087dd:	00 
+c01087de:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01087e5:	e8 f7 85 ff ff       	call   c0100de1 <__panic>
+        insert_vma_struct(mm, vma);
+c01087ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01087ed:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01087f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01087f4:	89 04 24             	mov    %eax,(%esp)
+c01087f7:	e8 99 f9 ff ff       	call   c0108195 <insert_vma_struct>
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c01087fc:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0108800:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108804:	7f 8a                	jg     c0108790 <check_vma_struct+0x5e>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0108806:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108809:	83 c0 01             	add    $0x1,%eax
+c010880c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010880f:	eb 70                	jmp    c0108881 <check_vma_struct+0x14f>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0108811:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108814:	89 d0                	mov    %edx,%eax
+c0108816:	c1 e0 02             	shl    $0x2,%eax
+c0108819:	01 d0                	add    %edx,%eax
+c010881b:	83 c0 02             	add    $0x2,%eax
+c010881e:	89 c1                	mov    %eax,%ecx
+c0108820:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108823:	89 d0                	mov    %edx,%eax
+c0108825:	c1 e0 02             	shl    $0x2,%eax
+c0108828:	01 d0                	add    %edx,%eax
+c010882a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0108831:	00 
+c0108832:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0108836:	89 04 24             	mov    %eax,(%esp)
+c0108839:	e8 c7 f7 ff ff       	call   c0108005 <vma_create>
+c010883e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c0108841:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0108845:	75 24                	jne    c010886b <check_vma_struct+0x139>
+c0108847:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
+c010884e:	c0 
+c010884f:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108856:	c0 
+c0108857:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
+c010885e:	00 
+c010885f:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108866:	e8 76 85 ff ff       	call   c0100de1 <__panic>
+        insert_vma_struct(mm, vma);
+c010886b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010886e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108872:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108875:	89 04 24             	mov    %eax,(%esp)
+c0108878:	e8 18 f9 ff ff       	call   c0108195 <insert_vma_struct>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c010887d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108881:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108884:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108887:	7e 88                	jle    c0108811 <check_vma_struct+0xdf>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c0108889:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010888c:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c010888f:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0108892:	8b 40 04             	mov    0x4(%eax),%eax
+c0108895:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c0108898:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c010889f:	e9 97 00 00 00       	jmp    c010893b <check_vma_struct+0x209>
+        assert(le != &(mm->mmap_list));
+c01088a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01088a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01088aa:	75 24                	jne    c01088d0 <check_vma_struct+0x19e>
+c01088ac:	c7 44 24 0c c4 da 10 	movl   $0xc010dac4,0xc(%esp)
+c01088b3:	c0 
+c01088b4:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01088bb:	c0 
+c01088bc:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
+c01088c3:	00 
+c01088c4:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01088cb:	e8 11 85 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c01088d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01088d3:	83 e8 10             	sub    $0x10,%eax
+c01088d6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c01088d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01088dc:	8b 48 04             	mov    0x4(%eax),%ecx
+c01088df:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088e2:	89 d0                	mov    %edx,%eax
+c01088e4:	c1 e0 02             	shl    $0x2,%eax
+c01088e7:	01 d0                	add    %edx,%eax
+c01088e9:	39 c1                	cmp    %eax,%ecx
+c01088eb:	75 17                	jne    c0108904 <check_vma_struct+0x1d2>
+c01088ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01088f0:	8b 48 08             	mov    0x8(%eax),%ecx
+c01088f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088f6:	89 d0                	mov    %edx,%eax
+c01088f8:	c1 e0 02             	shl    $0x2,%eax
+c01088fb:	01 d0                	add    %edx,%eax
+c01088fd:	83 c0 02             	add    $0x2,%eax
+c0108900:	39 c1                	cmp    %eax,%ecx
+c0108902:	74 24                	je     c0108928 <check_vma_struct+0x1f6>
+c0108904:	c7 44 24 0c dc da 10 	movl   $0xc010dadc,0xc(%esp)
+c010890b:	c0 
+c010890c:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108913:	c0 
+c0108914:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
+c010891b:	00 
+c010891c:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108923:	e8 b9 84 ff ff       	call   c0100de1 <__panic>
+c0108928:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010892b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c010892e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0108931:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0108934:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c0108937:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010893b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010893e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108941:	0f 8e 5d ff ff ff    	jle    c01088a4 <check_vma_struct+0x172>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0108947:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c010894e:	e9 cd 01 00 00       	jmp    c0108b20 <check_vma_struct+0x3ee>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c0108953:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108956:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010895a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010895d:	89 04 24             	mov    %eax,(%esp)
+c0108960:	e8 db f6 ff ff       	call   c0108040 <find_vma>
+c0108965:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(vma1 != NULL);
+c0108968:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010896c:	75 24                	jne    c0108992 <check_vma_struct+0x260>
+c010896e:	c7 44 24 0c 11 db 10 	movl   $0xc010db11,0xc(%esp)
+c0108975:	c0 
+c0108976:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c010897d:	c0 
+c010897e:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
+c0108985:	00 
+c0108986:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c010898d:	e8 4f 84 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c0108992:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108995:	83 c0 01             	add    $0x1,%eax
+c0108998:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010899c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010899f:	89 04 24             	mov    %eax,(%esp)
+c01089a2:	e8 99 f6 ff ff       	call   c0108040 <find_vma>
+c01089a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma2 != NULL);
+c01089aa:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c01089ae:	75 24                	jne    c01089d4 <check_vma_struct+0x2a2>
+c01089b0:	c7 44 24 0c 1e db 10 	movl   $0xc010db1e,0xc(%esp)
+c01089b7:	c0 
+c01089b8:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c01089bf:	c0 
+c01089c0:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
+c01089c7:	00 
+c01089c8:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c01089cf:	e8 0d 84 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c01089d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089d7:	83 c0 02             	add    $0x2,%eax
+c01089da:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01089de:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01089e1:	89 04 24             	mov    %eax,(%esp)
+c01089e4:	e8 57 f6 ff ff       	call   c0108040 <find_vma>
+c01089e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma3 == NULL);
+c01089ec:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c01089f0:	74 24                	je     c0108a16 <check_vma_struct+0x2e4>
+c01089f2:	c7 44 24 0c 2b db 10 	movl   $0xc010db2b,0xc(%esp)
+c01089f9:	c0 
+c01089fa:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108a01:	c0 
+c0108a02:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
+c0108a09:	00 
+c0108a0a:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108a11:	e8 cb 83 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c0108a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a19:	83 c0 03             	add    $0x3,%eax
+c0108a1c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a20:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a23:	89 04 24             	mov    %eax,(%esp)
+c0108a26:	e8 15 f6 ff ff       	call   c0108040 <find_vma>
+c0108a2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma4 == NULL);
+c0108a2e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0108a32:	74 24                	je     c0108a58 <check_vma_struct+0x326>
+c0108a34:	c7 44 24 0c 38 db 10 	movl   $0xc010db38,0xc(%esp)
+c0108a3b:	c0 
+c0108a3c:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108a43:	c0 
+c0108a44:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
+c0108a4b:	00 
+c0108a4c:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108a53:	e8 89 83 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0108a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a5b:	83 c0 04             	add    $0x4,%eax
+c0108a5e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a65:	89 04 24             	mov    %eax,(%esp)
+c0108a68:	e8 d3 f5 ff ff       	call   c0108040 <find_vma>
+c0108a6d:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma5 == NULL);
+c0108a70:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c0108a74:	74 24                	je     c0108a9a <check_vma_struct+0x368>
+c0108a76:	c7 44 24 0c 45 db 10 	movl   $0xc010db45,0xc(%esp)
+c0108a7d:	c0 
+c0108a7e:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108a85:	c0 
+c0108a86:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
+c0108a8d:	00 
+c0108a8e:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108a95:	e8 47 83 ff ff       	call   c0100de1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0108a9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108a9d:	8b 50 04             	mov    0x4(%eax),%edx
+c0108aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108aa3:	39 c2                	cmp    %eax,%edx
+c0108aa5:	75 10                	jne    c0108ab7 <check_vma_struct+0x385>
+c0108aa7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108aaa:	8b 50 08             	mov    0x8(%eax),%edx
+c0108aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ab0:	83 c0 02             	add    $0x2,%eax
+c0108ab3:	39 c2                	cmp    %eax,%edx
+c0108ab5:	74 24                	je     c0108adb <check_vma_struct+0x3a9>
+c0108ab7:	c7 44 24 0c 54 db 10 	movl   $0xc010db54,0xc(%esp)
+c0108abe:	c0 
+c0108abf:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108ac6:	c0 
+c0108ac7:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
+c0108ace:	00 
+c0108acf:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108ad6:	e8 06 83 ff ff       	call   c0100de1 <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c0108adb:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108ade:	8b 50 04             	mov    0x4(%eax),%edx
+c0108ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ae4:	39 c2                	cmp    %eax,%edx
+c0108ae6:	75 10                	jne    c0108af8 <check_vma_struct+0x3c6>
+c0108ae8:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108aeb:	8b 50 08             	mov    0x8(%eax),%edx
+c0108aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108af1:	83 c0 02             	add    $0x2,%eax
+c0108af4:	39 c2                	cmp    %eax,%edx
+c0108af6:	74 24                	je     c0108b1c <check_vma_struct+0x3ea>
+c0108af8:	c7 44 24 0c 84 db 10 	movl   $0xc010db84,0xc(%esp)
+c0108aff:	c0 
+c0108b00:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108b07:	c0 
+c0108b08:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
+c0108b0f:	00 
+c0108b10:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108b17:	e8 c5 82 ff ff       	call   c0100de1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0108b1c:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c0108b20:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108b23:	89 d0                	mov    %edx,%eax
+c0108b25:	c1 e0 02             	shl    $0x2,%eax
+c0108b28:	01 d0                	add    %edx,%eax
+c0108b2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0108b2d:	0f 8d 20 fe ff ff    	jge    c0108953 <check_vma_struct+0x221>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108b33:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c0108b3a:	eb 70                	jmp    c0108bac <check_vma_struct+0x47a>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c0108b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b3f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108b46:	89 04 24             	mov    %eax,(%esp)
+c0108b49:	e8 f2 f4 ff ff       	call   c0108040 <find_vma>
+c0108b4e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        if (vma_below_5 != NULL ) {
+c0108b51:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108b55:	74 27                	je     c0108b7e <check_vma_struct+0x44c>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0108b57:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108b5a:	8b 50 08             	mov    0x8(%eax),%edx
+c0108b5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108b60:	8b 40 04             	mov    0x4(%eax),%eax
+c0108b63:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0108b67:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b6e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108b72:	c7 04 24 b4 db 10 c0 	movl   $0xc010dbb4,(%esp)
+c0108b79:	e8 e1 77 ff ff       	call   c010035f <cprintf>
+        }
+        assert(vma_below_5 == NULL);
+c0108b7e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108b82:	74 24                	je     c0108ba8 <check_vma_struct+0x476>
+c0108b84:	c7 44 24 0c d9 db 10 	movl   $0xc010dbd9,0xc(%esp)
+c0108b8b:	c0 
+c0108b8c:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108b93:	c0 
+c0108b94:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
+c0108b9b:	00 
+c0108b9c:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108ba3:	e8 39 82 ff ff       	call   c0100de1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108ba8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0108bac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108bb0:	79 8a                	jns    c0108b3c <check_vma_struct+0x40a>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c0108bb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108bb5:	89 04 24             	mov    %eax,(%esp)
+c0108bb8:	e8 08 f7 ff ff       	call   c01082c5 <mm_destroy>
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0108bbd:	c7 04 24 f0 db 10 c0 	movl   $0xc010dbf0,(%esp)
+c0108bc4:	e8 96 77 ff ff       	call   c010035f <cprintf>
+}
+c0108bc9:	c9                   	leave  
+c0108bca:	c3                   	ret    
+
+c0108bcb <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c0108bcb:	55                   	push   %ebp
+c0108bcc:	89 e5                	mov    %esp,%ebp
+c0108bce:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0108bd1:	e8 2b c6 ff ff       	call   c0105201 <nr_free_pages>
+c0108bd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c0108bd9:	e8 8e f3 ff ff       	call   c0107f6c <mm_create>
+c0108bde:	a3 6c 11 1a c0       	mov    %eax,0xc01a116c
+    assert(check_mm_struct != NULL);
+c0108be3:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c0108be8:	85 c0                	test   %eax,%eax
+c0108bea:	75 24                	jne    c0108c10 <check_pgfault+0x45>
+c0108bec:	c7 44 24 0c 0f dc 10 	movl   $0xc010dc0f,0xc(%esp)
+c0108bf3:	c0 
+c0108bf4:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108bfb:	c0 
+c0108bfc:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
+c0108c03:	00 
+c0108c04:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108c0b:	e8 d1 81 ff ff       	call   c0100de1 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c0108c10:	a1 6c 11 1a c0       	mov    0xc01a116c,%eax
+c0108c15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0108c18:	8b 15 00 aa 12 c0    	mov    0xc012aa00,%edx
+c0108c1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108c21:	89 50 0c             	mov    %edx,0xc(%eax)
+c0108c24:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108c27:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c0108c2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108c30:	8b 00                	mov    (%eax),%eax
+c0108c32:	85 c0                	test   %eax,%eax
+c0108c34:	74 24                	je     c0108c5a <check_pgfault+0x8f>
+c0108c36:	c7 44 24 0c 27 dc 10 	movl   $0xc010dc27,0xc(%esp)
+c0108c3d:	c0 
+c0108c3e:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108c45:	c0 
+c0108c46:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
+c0108c4d:	00 
+c0108c4e:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108c55:	e8 87 81 ff ff       	call   c0100de1 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0108c5a:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+c0108c61:	00 
+c0108c62:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
+c0108c69:	00 
+c0108c6a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0108c71:	e8 8f f3 ff ff       	call   c0108005 <vma_create>
+c0108c76:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c0108c79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0108c7d:	75 24                	jne    c0108ca3 <check_pgfault+0xd8>
+c0108c7f:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
+c0108c86:	c0 
+c0108c87:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108c8e:	c0 
+c0108c8f:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
+c0108c96:	00 
+c0108c97:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108c9e:	e8 3e 81 ff ff       	call   c0100de1 <__panic>
+
+    insert_vma_struct(mm, vma);
+c0108ca3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108ca6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108caa:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cad:	89 04 24             	mov    %eax,(%esp)
+c0108cb0:	e8 e0 f4 ff ff       	call   c0108195 <insert_vma_struct>
+
+    uintptr_t addr = 0x100;
+c0108cb5:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0108cbc:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108cbf:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cc6:	89 04 24             	mov    %eax,(%esp)
+c0108cc9:	e8 72 f3 ff ff       	call   c0108040 <find_vma>
+c0108cce:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108cd1:	74 24                	je     c0108cf7 <check_pgfault+0x12c>
+c0108cd3:	c7 44 24 0c 35 dc 10 	movl   $0xc010dc35,0xc(%esp)
+c0108cda:	c0 
+c0108cdb:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108ce2:	c0 
+c0108ce3:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
+c0108cea:	00 
+c0108ceb:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108cf2:	e8 ea 80 ff ff       	call   c0100de1 <__panic>
+
+    int i, sum = 0;
+c0108cf7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c0108cfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108d05:	eb 17                	jmp    c0108d1e <check_pgfault+0x153>
+        *(char *)(addr + i) = i;
+c0108d07:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108d0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108d0d:	01 d0                	add    %edx,%eax
+c0108d0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108d12:	88 10                	mov    %dl,(%eax)
+        sum += i;
+c0108d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d17:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c0108d1a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108d1e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108d22:	7e e3                	jle    c0108d07 <check_pgfault+0x13c>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108d24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108d2b:	eb 15                	jmp    c0108d42 <check_pgfault+0x177>
+        sum -= *(char *)(addr + i);
+c0108d2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108d30:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108d33:	01 d0                	add    %edx,%eax
+c0108d35:	0f b6 00             	movzbl (%eax),%eax
+c0108d38:	0f be c0             	movsbl %al,%eax
+c0108d3b:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108d3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108d42:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108d46:	7e e5                	jle    c0108d2d <check_pgfault+0x162>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c0108d48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108d4c:	74 24                	je     c0108d72 <check_pgfault+0x1a7>
+c0108d4e:	c7 44 24 0c 4f dc 10 	movl   $0xc010dc4f,0xc(%esp)
+c0108d55:	c0 
+c0108d56:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108d5d:	c0 
+c0108d5e:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
+c0108d65:	00 
+c0108d66:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108d6d:	e8 6f 80 ff ff       	call   c0100de1 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0108d72:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108d75:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108d78:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108d7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108d80:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108d84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108d87:	89 04 24             	mov    %eax,(%esp)
+c0108d8a:	e8 c9 d0 ff ff       	call   c0105e58 <page_remove>
+    free_page(pde2page(pgdir[0]));
+c0108d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108d92:	8b 00                	mov    (%eax),%eax
+c0108d94:	89 04 24             	mov    %eax,(%esp)
+c0108d97:	e8 b8 f1 ff ff       	call   c0107f54 <pde2page>
+c0108d9c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108da3:	00 
+c0108da4:	89 04 24             	mov    %eax,(%esp)
+c0108da7:	e8 23 c4 ff ff       	call   c01051cf <free_pages>
+    pgdir[0] = 0;
+c0108dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108daf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0108db5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108db8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0108dbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108dc2:	89 04 24             	mov    %eax,(%esp)
+c0108dc5:	e8 fb f4 ff ff       	call   c01082c5 <mm_destroy>
+    check_mm_struct = NULL;
+c0108dca:	c7 05 6c 11 1a c0 00 	movl   $0x0,0xc01a116c
+c0108dd1:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0108dd4:	e8 28 c4 ff ff       	call   c0105201 <nr_free_pages>
+c0108dd9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108ddc:	74 24                	je     c0108e02 <check_pgfault+0x237>
+c0108dde:	c7 44 24 0c 58 dc 10 	movl   $0xc010dc58,0xc(%esp)
+c0108de5:	c0 
+c0108de6:	c7 44 24 08 c7 d9 10 	movl   $0xc010d9c7,0x8(%esp)
+c0108ded:	c0 
+c0108dee:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
+c0108df5:	00 
+c0108df6:	c7 04 24 dc d9 10 c0 	movl   $0xc010d9dc,(%esp)
+c0108dfd:	e8 df 7f ff ff       	call   c0100de1 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c0108e02:	c7 04 24 7f dc 10 c0 	movl   $0xc010dc7f,(%esp)
+c0108e09:	e8 51 75 ff ff       	call   c010035f <cprintf>
+}
+c0108e0e:	c9                   	leave  
+c0108e0f:	c3                   	ret    
+
+c0108e10 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c0108e10:	55                   	push   %ebp
+c0108e11:	89 e5                	mov    %esp,%ebp
+c0108e13:	83 ec 38             	sub    $0x38,%esp
+    int ret = -E_INVAL;
+c0108e16:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c0108e1d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108e20:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108e24:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108e27:	89 04 24             	mov    %eax,(%esp)
+c0108e2a:	e8 11 f2 ff ff       	call   c0108040 <find_vma>
+c0108e2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c0108e32:	a1 38 f0 19 c0       	mov    0xc019f038,%eax
+c0108e37:	83 c0 01             	add    $0x1,%eax
+c0108e3a:	a3 38 f0 19 c0       	mov    %eax,0xc019f038
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c0108e3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0108e43:	74 0b                	je     c0108e50 <do_pgfault+0x40>
+c0108e45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108e48:	8b 40 04             	mov    0x4(%eax),%eax
+c0108e4b:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0108e4e:	76 18                	jbe    c0108e68 <do_pgfault+0x58>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c0108e50:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108e53:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108e57:	c7 04 24 9c dc 10 c0 	movl   $0xc010dc9c,(%esp)
+c0108e5e:	e8 fc 74 ff ff       	call   c010035f <cprintf>
+        goto failed;
+c0108e63:	e9 bb 01 00 00       	jmp    c0109023 <do_pgfault+0x213>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c0108e68:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108e6b:	83 e0 03             	and    $0x3,%eax
+c0108e6e:	85 c0                	test   %eax,%eax
+c0108e70:	74 36                	je     c0108ea8 <do_pgfault+0x98>
+c0108e72:	83 f8 01             	cmp    $0x1,%eax
+c0108e75:	74 20                	je     c0108e97 <do_pgfault+0x87>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c0108e77:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108e7a:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108e7d:	83 e0 02             	and    $0x2,%eax
+c0108e80:	85 c0                	test   %eax,%eax
+c0108e82:	75 11                	jne    c0108e95 <do_pgfault+0x85>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c0108e84:	c7 04 24 cc dc 10 c0 	movl   $0xc010dccc,(%esp)
+c0108e8b:	e8 cf 74 ff ff       	call   c010035f <cprintf>
+            goto failed;
+c0108e90:	e9 8e 01 00 00       	jmp    c0109023 <do_pgfault+0x213>
+        }
+        break;
+c0108e95:	eb 2f                	jmp    c0108ec6 <do_pgfault+0xb6>
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0108e97:	c7 04 24 2c dd 10 c0 	movl   $0xc010dd2c,(%esp)
+c0108e9e:	e8 bc 74 ff ff       	call   c010035f <cprintf>
+        goto failed;
+c0108ea3:	e9 7b 01 00 00       	jmp    c0109023 <do_pgfault+0x213>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c0108ea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108eab:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108eae:	83 e0 05             	and    $0x5,%eax
+c0108eb1:	85 c0                	test   %eax,%eax
+c0108eb3:	75 11                	jne    c0108ec6 <do_pgfault+0xb6>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0108eb5:	c7 04 24 64 dd 10 c0 	movl   $0xc010dd64,(%esp)
+c0108ebc:	e8 9e 74 ff ff       	call   c010035f <cprintf>
+            goto failed;
+c0108ec1:	e9 5d 01 00 00       	jmp    c0109023 <do_pgfault+0x213>
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0108ec6:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0108ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108ed0:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108ed3:	83 e0 02             	and    $0x2,%eax
+c0108ed6:	85 c0                	test   %eax,%eax
+c0108ed8:	74 04                	je     c0108ede <do_pgfault+0xce>
+        perm |= PTE_W;
+c0108eda:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0108ede:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108ee1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108ee4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108ee7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108eec:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0108eef:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c0108ef6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        }
+   }
+#endif
+    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    // (notice the 3th parameter '1')
+    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
+c0108efd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f00:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f03:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0108f0a:	00 
+c0108f0b:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108f0e:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108f12:	89 04 24             	mov    %eax,(%esp)
+c0108f15:	e8 2e c9 ff ff       	call   c0105848 <get_pte>
+c0108f1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108f1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0108f21:	75 11                	jne    c0108f34 <do_pgfault+0x124>
+        cprintf("get_pte in do_pgfault failed\n");
+c0108f23:	c7 04 24 c7 dd 10 c0 	movl   $0xc010ddc7,(%esp)
+c0108f2a:	e8 30 74 ff ff       	call   c010035f <cprintf>
+        goto failed;
+c0108f2f:	e9 ef 00 00 00       	jmp    c0109023 <do_pgfault+0x213>
+    }
+    
+    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+c0108f34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108f37:	8b 00                	mov    (%eax),%eax
+c0108f39:	85 c0                	test   %eax,%eax
+c0108f3b:	75 35                	jne    c0108f72 <do_pgfault+0x162>
+        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
+c0108f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f40:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f43:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108f46:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108f4a:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108f4d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108f51:	89 04 24             	mov    %eax,(%esp)
+c0108f54:	e8 59 d0 ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c0108f59:	85 c0                	test   %eax,%eax
+c0108f5b:	0f 85 bb 00 00 00    	jne    c010901c <do_pgfault+0x20c>
+            cprintf("pgdir_alloc_page in do_pgfault failed\n");
+c0108f61:	c7 04 24 e8 dd 10 c0 	movl   $0xc010dde8,(%esp)
+c0108f68:	e8 f2 73 ff ff       	call   c010035f <cprintf>
+            goto failed;
+c0108f6d:	e9 b1 00 00 00       	jmp    c0109023 <do_pgfault+0x213>
+        }
+    }
+    else { // if this pte is a swap entry, then load data from disk to a page with phy addr
+           // and call page_insert to map the phy addr with logical addr
+        if(swap_init_ok) {
+c0108f72:	a1 2c f0 19 c0       	mov    0xc019f02c,%eax
+c0108f77:	85 c0                	test   %eax,%eax
+c0108f79:	0f 84 86 00 00 00    	je     c0109005 <do_pgfault+0x1f5>
+            struct Page *page=NULL;
+c0108f7f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+c0108f86:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c0108f89:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108f8d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108f90:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108f94:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f97:	89 04 24             	mov    %eax,(%esp)
+c0108f9a:	e8 bf e0 ff ff       	call   c010705e <swap_in>
+c0108f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108fa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108fa6:	74 0e                	je     c0108fb6 <do_pgfault+0x1a6>
+                cprintf("swap_in in do_pgfault failed\n");
+c0108fa8:	c7 04 24 0f de 10 c0 	movl   $0xc010de0f,(%esp)
+c0108faf:	e8 ab 73 ff ff       	call   c010035f <cprintf>
+c0108fb4:	eb 6d                	jmp    c0109023 <do_pgfault+0x213>
+                goto failed;
+            }    
+            page_insert(mm->pgdir, page, addr, perm);
+c0108fb6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108fb9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108fbc:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108fbf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0108fc2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0108fc6:	8b 4d 10             	mov    0x10(%ebp),%ecx
+c0108fc9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0108fcd:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108fd1:	89 04 24             	mov    %eax,(%esp)
+c0108fd4:	e8 c3 ce ff ff       	call   c0105e9c <page_insert>
+            swap_map_swappable(mm, addr, page, 1);
+c0108fd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108fdc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0108fe3:	00 
+c0108fe4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108fe8:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108feb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108fef:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ff2:	89 04 24             	mov    %eax,(%esp)
+c0108ff5:	e8 9b de ff ff       	call   c0106e95 <swap_map_swappable>
+            page->pra_vaddr = addr;
+c0108ffa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108ffd:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109000:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0109003:	eb 17                	jmp    c010901c <do_pgfault+0x20c>
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0109005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109008:	8b 00                	mov    (%eax),%eax
+c010900a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010900e:	c7 04 24 30 de 10 c0 	movl   $0xc010de30,(%esp)
+c0109015:	e8 45 73 ff ff       	call   c010035f <cprintf>
+            goto failed;
+c010901a:	eb 07                	jmp    c0109023 <do_pgfault+0x213>
+        }
+   }
+   ret = 0;
+c010901c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c0109023:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0109026:	c9                   	leave  
+c0109027:	c3                   	ret    
+
+c0109028 <user_mem_check>:
+
+bool
+user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
+c0109028:	55                   	push   %ebp
+c0109029:	89 e5                	mov    %esp,%ebp
+c010902b:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c010902e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109032:	0f 84 e0 00 00 00    	je     c0109118 <user_mem_check+0xf0>
+        if (!USER_ACCESS(addr, addr + len)) {
+c0109038:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c010903f:	76 1c                	jbe    c010905d <user_mem_check+0x35>
+c0109041:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109044:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109047:	01 d0                	add    %edx,%eax
+c0109049:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010904c:	76 0f                	jbe    c010905d <user_mem_check+0x35>
+c010904e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109051:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109054:	01 d0                	add    %edx,%eax
+c0109056:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c010905b:	76 0a                	jbe    c0109067 <user_mem_check+0x3f>
+            return 0;
+c010905d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109062:	e9 e2 00 00 00       	jmp    c0109149 <user_mem_check+0x121>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c0109067:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010906a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010906d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109070:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109073:	01 d0                	add    %edx,%eax
+c0109075:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end) {
+c0109078:	e9 88 00 00 00       	jmp    c0109105 <user_mem_check+0xdd>
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+c010907d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109080:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109084:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109087:	89 04 24             	mov    %eax,(%esp)
+c010908a:	e8 b1 ef ff ff       	call   c0108040 <find_vma>
+c010908f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109092:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109096:	74 0b                	je     c01090a3 <user_mem_check+0x7b>
+c0109098:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010909b:	8b 40 04             	mov    0x4(%eax),%eax
+c010909e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01090a1:	76 0a                	jbe    c01090ad <user_mem_check+0x85>
+                return 0;
+c01090a3:	b8 00 00 00 00       	mov    $0x0,%eax
+c01090a8:	e9 9c 00 00 00       	jmp    c0109149 <user_mem_check+0x121>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+c01090ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090b0:	8b 50 0c             	mov    0xc(%eax),%edx
+c01090b3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01090b7:	74 07                	je     c01090c0 <user_mem_check+0x98>
+c01090b9:	b8 02 00 00 00       	mov    $0x2,%eax
+c01090be:	eb 05                	jmp    c01090c5 <user_mem_check+0x9d>
+c01090c0:	b8 01 00 00 00       	mov    $0x1,%eax
+c01090c5:	21 d0                	and    %edx,%eax
+c01090c7:	85 c0                	test   %eax,%eax
+c01090c9:	75 07                	jne    c01090d2 <user_mem_check+0xaa>
+                return 0;
+c01090cb:	b8 00 00 00 00       	mov    $0x0,%eax
+c01090d0:	eb 77                	jmp    c0109149 <user_mem_check+0x121>
+            }
+            if (write && (vma->vm_flags & VM_STACK)) {
+c01090d2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01090d6:	74 24                	je     c01090fc <user_mem_check+0xd4>
+c01090d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090db:	8b 40 0c             	mov    0xc(%eax),%eax
+c01090de:	83 e0 08             	and    $0x8,%eax
+c01090e1:	85 c0                	test   %eax,%eax
+c01090e3:	74 17                	je     c01090fc <user_mem_check+0xd4>
+                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+c01090e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090e8:	8b 40 04             	mov    0x4(%eax),%eax
+c01090eb:	05 00 10 00 00       	add    $0x1000,%eax
+c01090f0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01090f3:	76 07                	jbe    c01090fc <user_mem_check+0xd4>
+                    return 0;
+c01090f5:	b8 00 00 00 00       	mov    $0x0,%eax
+c01090fa:	eb 4d                	jmp    c0109149 <user_mem_check+0x121>
+                }
+            }
+            start = vma->vm_end;
+c01090fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090ff:	8b 40 08             	mov    0x8(%eax),%eax
+c0109102:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!USER_ACCESS(addr, addr + len)) {
+            return 0;
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+        while (start < end) {
+c0109105:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109108:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c010910b:	0f 82 6c ff ff ff    	jb     c010907d <user_mem_check+0x55>
+                    return 0;
+                }
+            }
+            start = vma->vm_end;
+        }
+        return 1;
+c0109111:	b8 01 00 00 00       	mov    $0x1,%eax
+c0109116:	eb 31                	jmp    c0109149 <user_mem_check+0x121>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c0109118:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c010911f:	76 23                	jbe    c0109144 <user_mem_check+0x11c>
+c0109121:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109124:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109127:	01 d0                	add    %edx,%eax
+c0109129:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010912c:	76 16                	jbe    c0109144 <user_mem_check+0x11c>
+c010912e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109131:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109134:	01 d0                	add    %edx,%eax
+c0109136:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c010913b:	77 07                	ja     c0109144 <user_mem_check+0x11c>
+c010913d:	b8 01 00 00 00       	mov    $0x1,%eax
+c0109142:	eb 05                	jmp    c0109149 <user_mem_check+0x121>
+c0109144:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109149:	c9                   	leave  
+c010914a:	c3                   	ret    
+
+c010914b <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c010914b:	55                   	push   %ebp
+c010914c:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010914e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109151:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0109156:	29 c2                	sub    %eax,%edx
+c0109158:	89 d0                	mov    %edx,%eax
+c010915a:	c1 f8 05             	sar    $0x5,%eax
+}
+c010915d:	5d                   	pop    %ebp
+c010915e:	c3                   	ret    
+
+c010915f <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010915f:	55                   	push   %ebp
+c0109160:	89 e5                	mov    %esp,%ebp
+c0109162:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0109165:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109168:	89 04 24             	mov    %eax,(%esp)
+c010916b:	e8 db ff ff ff       	call   c010914b <page2ppn>
+c0109170:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0109173:	c9                   	leave  
+c0109174:	c3                   	ret    
+
+c0109175 <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c0109175:	55                   	push   %ebp
+c0109176:	89 e5                	mov    %esp,%ebp
+c0109178:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c010917b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010917e:	89 04 24             	mov    %eax,(%esp)
+c0109181:	e8 d9 ff ff ff       	call   c010915f <page2pa>
+c0109186:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109189:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010918c:	c1 e8 0c             	shr    $0xc,%eax
+c010918f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109192:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0109197:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010919a:	72 23                	jb     c01091bf <page2kva+0x4a>
+c010919c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010919f:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01091a3:	c7 44 24 08 58 de 10 	movl   $0xc010de58,0x8(%esp)
+c01091aa:	c0 
+c01091ab:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01091b2:	00 
+c01091b3:	c7 04 24 7b de 10 c0 	movl   $0xc010de7b,(%esp)
+c01091ba:	e8 22 7c ff ff       	call   c0100de1 <__panic>
+c01091bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01091c2:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01091c7:	c9                   	leave  
+c01091c8:	c3                   	ret    
+
+c01091c9 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c01091c9:	55                   	push   %ebp
+c01091ca:	89 e5                	mov    %esp,%ebp
+c01091cc:	83 ec 18             	sub    $0x18,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c01091cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01091d6:	e8 67 89 ff ff       	call   c0101b42 <ide_device_valid>
+c01091db:	85 c0                	test   %eax,%eax
+c01091dd:	75 1c                	jne    c01091fb <swapfs_init+0x32>
+        panic("swap fs isn't available.\n");
+c01091df:	c7 44 24 08 89 de 10 	movl   $0xc010de89,0x8(%esp)
+c01091e6:	c0 
+c01091e7:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
+c01091ee:	00 
+c01091ef:	c7 04 24 a3 de 10 c0 	movl   $0xc010dea3,(%esp)
+c01091f6:	e8 e6 7b ff ff       	call   c0100de1 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c01091fb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109202:	e8 7a 89 ff ff       	call   c0101b81 <ide_device_size>
+c0109207:	c1 e8 03             	shr    $0x3,%eax
+c010920a:	a3 3c 11 1a c0       	mov    %eax,0xc01a113c
+}
+c010920f:	c9                   	leave  
+c0109210:	c3                   	ret    
+
+c0109211 <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c0109211:	55                   	push   %ebp
+c0109212:	89 e5                	mov    %esp,%ebp
+c0109214:	83 ec 28             	sub    $0x28,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109217:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010921a:	89 04 24             	mov    %eax,(%esp)
+c010921d:	e8 53 ff ff ff       	call   c0109175 <page2kva>
+c0109222:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109225:	c1 ea 08             	shr    $0x8,%edx
+c0109228:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010922b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010922f:	74 0b                	je     c010923c <swapfs_read+0x2b>
+c0109231:	8b 15 3c 11 1a c0    	mov    0xc01a113c,%edx
+c0109237:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c010923a:	72 23                	jb     c010925f <swapfs_read+0x4e>
+c010923c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010923f:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109243:	c7 44 24 08 b4 de 10 	movl   $0xc010deb4,0x8(%esp)
+c010924a:	c0 
+c010924b:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+c0109252:	00 
+c0109253:	c7 04 24 a3 de 10 c0 	movl   $0xc010dea3,(%esp)
+c010925a:	e8 82 7b ff ff       	call   c0100de1 <__panic>
+c010925f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109262:	c1 e2 03             	shl    $0x3,%edx
+c0109265:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c010926c:	00 
+c010926d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109271:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109275:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010927c:	e8 3f 89 ff ff       	call   c0101bc0 <ide_read_secs>
+}
+c0109281:	c9                   	leave  
+c0109282:	c3                   	ret    
+
+c0109283 <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c0109283:	55                   	push   %ebp
+c0109284:	89 e5                	mov    %esp,%ebp
+c0109286:	83 ec 28             	sub    $0x28,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109289:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010928c:	89 04 24             	mov    %eax,(%esp)
+c010928f:	e8 e1 fe ff ff       	call   c0109175 <page2kva>
+c0109294:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109297:	c1 ea 08             	shr    $0x8,%edx
+c010929a:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010929d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01092a1:	74 0b                	je     c01092ae <swapfs_write+0x2b>
+c01092a3:	8b 15 3c 11 1a c0    	mov    0xc01a113c,%edx
+c01092a9:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c01092ac:	72 23                	jb     c01092d1 <swapfs_write+0x4e>
+c01092ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01092b5:	c7 44 24 08 b4 de 10 	movl   $0xc010deb4,0x8(%esp)
+c01092bc:	c0 
+c01092bd:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c01092c4:	00 
+c01092c5:	c7 04 24 a3 de 10 c0 	movl   $0xc010dea3,(%esp)
+c01092cc:	e8 10 7b ff ff       	call   c0100de1 <__panic>
+c01092d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01092d4:	c1 e2 03             	shl    $0x3,%edx
+c01092d7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c01092de:	00 
+c01092df:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01092e3:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01092e7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01092ee:	e8 0f 8b ff ff       	call   c0101e02 <ide_write_secs>
+}
+c01092f3:	c9                   	leave  
+c01092f4:	c3                   	ret    
+
+c01092f5 <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c01092f5:	52                   	push   %edx
+    call *%ebx              # call fn
+c01092f6:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c01092f8:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c01092f9:	e8 3c 0c 00 00       	call   c0109f3a <do_exit>
+
+c01092fe <test_and_set_bit>:
+ * test_and_set_bit - Atomically set a bit and return its old value
+ * @nr:     the bit to set
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_set_bit(int nr, volatile void *addr) {
+c01092fe:	55                   	push   %ebp
+c01092ff:	89 e5                	mov    %esp,%ebp
+c0109301:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0109304:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109307:	8b 45 08             	mov    0x8(%ebp),%eax
+c010930a:	0f ab 02             	bts    %eax,(%edx)
+c010930d:	19 c0                	sbb    %eax,%eax
+c010930f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0109312:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0109316:	0f 95 c0             	setne  %al
+c0109319:	0f b6 c0             	movzbl %al,%eax
+}
+c010931c:	c9                   	leave  
+c010931d:	c3                   	ret    
+
+c010931e <test_and_clear_bit>:
+ * test_and_clear_bit - Atomically clear a bit and return its old value
+ * @nr:     the bit to clear
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_clear_bit(int nr, volatile void *addr) {
+c010931e:	55                   	push   %ebp
+c010931f:	89 e5                	mov    %esp,%ebp
+c0109321:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0109324:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109327:	8b 45 08             	mov    0x8(%ebp),%eax
+c010932a:	0f b3 02             	btr    %eax,(%edx)
+c010932d:	19 c0                	sbb    %eax,%eax
+c010932f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0109332:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0109336:	0f 95 c0             	setne  %al
+c0109339:	0f b6 c0             	movzbl %al,%eax
+}
+c010933c:	c9                   	leave  
+c010933d:	c3                   	ret    
+
+c010933e <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010933e:	55                   	push   %ebp
+c010933f:	89 e5                	mov    %esp,%ebp
+c0109341:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0109344:	9c                   	pushf  
+c0109345:	58                   	pop    %eax
+c0109346:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0109349:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010934c:	25 00 02 00 00       	and    $0x200,%eax
+c0109351:	85 c0                	test   %eax,%eax
+c0109353:	74 0c                	je     c0109361 <__intr_save+0x23>
+        intr_disable();
+c0109355:	e8 f0 8c ff ff       	call   c010204a <intr_disable>
+        return 1;
+c010935a:	b8 01 00 00 00       	mov    $0x1,%eax
+c010935f:	eb 05                	jmp    c0109366 <__intr_save+0x28>
+    }
+    return 0;
+c0109361:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109366:	c9                   	leave  
+c0109367:	c3                   	ret    
+
+c0109368 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0109368:	55                   	push   %ebp
+c0109369:	89 e5                	mov    %esp,%ebp
+c010936b:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010936e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109372:	74 05                	je     c0109379 <__intr_restore+0x11>
+        intr_enable();
+c0109374:	e8 cb 8c ff ff       	call   c0102044 <intr_enable>
+    }
+}
+c0109379:	c9                   	leave  
+c010937a:	c3                   	ret    
+
+c010937b <try_lock>:
+lock_init(lock_t *lock) {
+    *lock = 0;
+}
+
+static inline bool
+try_lock(lock_t *lock) {
+c010937b:	55                   	push   %ebp
+c010937c:	89 e5                	mov    %esp,%ebp
+c010937e:	83 ec 08             	sub    $0x8,%esp
+    return !test_and_set_bit(0, lock);
+c0109381:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109384:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109388:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010938f:	e8 6a ff ff ff       	call   c01092fe <test_and_set_bit>
+c0109394:	85 c0                	test   %eax,%eax
+c0109396:	0f 94 c0             	sete   %al
+c0109399:	0f b6 c0             	movzbl %al,%eax
+}
+c010939c:	c9                   	leave  
+c010939d:	c3                   	ret    
+
+c010939e <lock>:
+
+static inline void
+lock(lock_t *lock) {
+c010939e:	55                   	push   %ebp
+c010939f:	89 e5                	mov    %esp,%ebp
+c01093a1:	83 ec 18             	sub    $0x18,%esp
+    while (!try_lock(lock)) {
+c01093a4:	eb 05                	jmp    c01093ab <lock+0xd>
+        schedule();
+c01093a6:	e8 f4 1b 00 00       	call   c010af9f <schedule>
+    return !test_and_set_bit(0, lock);
+}
+
+static inline void
+lock(lock_t *lock) {
+    while (!try_lock(lock)) {
+c01093ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093ae:	89 04 24             	mov    %eax,(%esp)
+c01093b1:	e8 c5 ff ff ff       	call   c010937b <try_lock>
+c01093b6:	85 c0                	test   %eax,%eax
+c01093b8:	74 ec                	je     c01093a6 <lock+0x8>
+        schedule();
+    }
+}
+c01093ba:	c9                   	leave  
+c01093bb:	c3                   	ret    
+
+c01093bc <unlock>:
+
+static inline void
+unlock(lock_t *lock) {
+c01093bc:	55                   	push   %ebp
+c01093bd:	89 e5                	mov    %esp,%ebp
+c01093bf:	83 ec 18             	sub    $0x18,%esp
+    if (!test_and_clear_bit(0, lock)) {
+c01093c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093c5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01093c9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01093d0:	e8 49 ff ff ff       	call   c010931e <test_and_clear_bit>
+c01093d5:	85 c0                	test   %eax,%eax
+c01093d7:	75 1c                	jne    c01093f5 <unlock+0x39>
+        panic("Unlock failed.\n");
+c01093d9:	c7 44 24 08 d4 de 10 	movl   $0xc010ded4,0x8(%esp)
+c01093e0:	c0 
+c01093e1:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+c01093e8:	00 
+c01093e9:	c7 04 24 e4 de 10 c0 	movl   $0xc010dee4,(%esp)
+c01093f0:	e8 ec 79 ff ff       	call   c0100de1 <__panic>
+    }
+}
+c01093f5:	c9                   	leave  
+c01093f6:	c3                   	ret    
+
+c01093f7 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01093f7:	55                   	push   %ebp
+c01093f8:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01093fa:	8b 55 08             	mov    0x8(%ebp),%edx
+c01093fd:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0109402:	29 c2                	sub    %eax,%edx
+c0109404:	89 d0                	mov    %edx,%eax
+c0109406:	c1 f8 05             	sar    $0x5,%eax
+}
+c0109409:	5d                   	pop    %ebp
+c010940a:	c3                   	ret    
+
+c010940b <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010940b:	55                   	push   %ebp
+c010940c:	89 e5                	mov    %esp,%ebp
+c010940e:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0109411:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109414:	89 04 24             	mov    %eax,(%esp)
+c0109417:	e8 db ff ff ff       	call   c01093f7 <page2ppn>
+c010941c:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010941f:	c9                   	leave  
+c0109420:	c3                   	ret    
+
+c0109421 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0109421:	55                   	push   %ebp
+c0109422:	89 e5                	mov    %esp,%ebp
+c0109424:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0109427:	8b 45 08             	mov    0x8(%ebp),%eax
+c010942a:	c1 e8 0c             	shr    $0xc,%eax
+c010942d:	89 c2                	mov    %eax,%edx
+c010942f:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0109434:	39 c2                	cmp    %eax,%edx
+c0109436:	72 1c                	jb     c0109454 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0109438:	c7 44 24 08 f8 de 10 	movl   $0xc010def8,0x8(%esp)
+c010943f:	c0 
+c0109440:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0109447:	00 
+c0109448:	c7 04 24 17 df 10 c0 	movl   $0xc010df17,(%esp)
+c010944f:	e8 8d 79 ff ff       	call   c0100de1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0109454:	a1 8c 10 1a c0       	mov    0xc01a108c,%eax
+c0109459:	8b 55 08             	mov    0x8(%ebp),%edx
+c010945c:	c1 ea 0c             	shr    $0xc,%edx
+c010945f:	c1 e2 05             	shl    $0x5,%edx
+c0109462:	01 d0                	add    %edx,%eax
+}
+c0109464:	c9                   	leave  
+c0109465:	c3                   	ret    
+
+c0109466 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0109466:	55                   	push   %ebp
+c0109467:	89 e5                	mov    %esp,%ebp
+c0109469:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c010946c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010946f:	89 04 24             	mov    %eax,(%esp)
+c0109472:	e8 94 ff ff ff       	call   c010940b <page2pa>
+c0109477:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010947a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010947d:	c1 e8 0c             	shr    $0xc,%eax
+c0109480:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109483:	a1 a0 ef 19 c0       	mov    0xc019efa0,%eax
+c0109488:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010948b:	72 23                	jb     c01094b0 <page2kva+0x4a>
+c010948d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109490:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109494:	c7 44 24 08 28 df 10 	movl   $0xc010df28,0x8(%esp)
+c010949b:	c0 
+c010949c:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01094a3:	00 
+c01094a4:	c7 04 24 17 df 10 c0 	movl   $0xc010df17,(%esp)
+c01094ab:	e8 31 79 ff ff       	call   c0100de1 <__panic>
+c01094b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01094b3:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01094b8:	c9                   	leave  
+c01094b9:	c3                   	ret    
+
+c01094ba <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c01094ba:	55                   	push   %ebp
+c01094bb:	89 e5                	mov    %esp,%ebp
+c01094bd:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c01094c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01094c6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c01094cd:	77 23                	ja     c01094f2 <kva2page+0x38>
+c01094cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01094d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01094d6:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c01094dd:	c0 
+c01094de:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c01094e5:	00 
+c01094e6:	c7 04 24 17 df 10 c0 	movl   $0xc010df17,(%esp)
+c01094ed:	e8 ef 78 ff ff       	call   c0100de1 <__panic>
+c01094f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01094f5:	05 00 00 00 40       	add    $0x40000000,%eax
+c01094fa:	89 04 24             	mov    %eax,(%esp)
+c01094fd:	e8 1f ff ff ff       	call   c0109421 <pa2page>
+}
+c0109502:	c9                   	leave  
+c0109503:	c3                   	ret    
+
+c0109504 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c0109504:	55                   	push   %ebp
+c0109505:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c0109507:	8b 45 08             	mov    0x8(%ebp),%eax
+c010950a:	8b 40 18             	mov    0x18(%eax),%eax
+c010950d:	8d 50 01             	lea    0x1(%eax),%edx
+c0109510:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109513:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109516:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109519:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c010951c:	5d                   	pop    %ebp
+c010951d:	c3                   	ret    
+
+c010951e <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c010951e:	55                   	push   %ebp
+c010951f:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c0109521:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109524:	8b 40 18             	mov    0x18(%eax),%eax
+c0109527:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010952a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010952d:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109530:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109533:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0109536:	5d                   	pop    %ebp
+c0109537:	c3                   	ret    
+
+c0109538 <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c0109538:	55                   	push   %ebp
+c0109539:	89 e5                	mov    %esp,%ebp
+c010953b:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c010953e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109542:	74 0e                	je     c0109552 <lock_mm+0x1a>
+        lock(&(mm->mm_lock));
+c0109544:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109547:	83 c0 1c             	add    $0x1c,%eax
+c010954a:	89 04 24             	mov    %eax,(%esp)
+c010954d:	e8 4c fe ff ff       	call   c010939e <lock>
+    }
+}
+c0109552:	c9                   	leave  
+c0109553:	c3                   	ret    
+
+c0109554 <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c0109554:	55                   	push   %ebp
+c0109555:	89 e5                	mov    %esp,%ebp
+c0109557:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c010955a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010955e:	74 0e                	je     c010956e <unlock_mm+0x1a>
+        unlock(&(mm->mm_lock));
+c0109560:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109563:	83 c0 1c             	add    $0x1c,%eax
+c0109566:	89 04 24             	mov    %eax,(%esp)
+c0109569:	e8 4e fe ff ff       	call   c01093bc <unlock>
+    }
+}
+c010956e:	c9                   	leave  
+c010956f:	c3                   	ret    
+
+c0109570 <alloc_proc>:
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+c0109570:	55                   	push   %ebp
+c0109571:	89 e5                	mov    %esp,%ebp
+c0109573:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c0109576:	c7 04 24 7c 00 00 00 	movl   $0x7c,(%esp)
+c010957d:	e8 6d b7 ff ff       	call   c0104cef <kmalloc>
+c0109582:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (proc != NULL) {
+c0109585:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109589:	0f 84 cd 00 00 00    	je     c010965c <alloc_proc+0xec>
+    /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+        proc->state = PROC_UNINIT;
+c010958f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109592:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        proc->pid = -1;
+c0109598:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010959b:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+        proc->runs = 0;
+c01095a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095a5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        proc->kstack = 0;
+c01095ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        proc->need_resched = 0;
+c01095b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095b9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        proc->parent = NULL;
+c01095c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        proc->mm = NULL;
+c01095ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095cd:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+        memset(&(proc->context), 0, sizeof(struct context));
+c01095d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095d7:	83 c0 1c             	add    $0x1c,%eax
+c01095da:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
+c01095e1:	00 
+c01095e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01095e9:	00 
+c01095ea:	89 04 24             	mov    %eax,(%esp)
+c01095ed:	e8 18 27 00 00       	call   c010bd0a <memset>
+        proc->tf = NULL;
+c01095f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095f5:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+        proc->cr3 = boot_cr3;
+c01095fc:	8b 15 88 10 1a c0    	mov    0xc01a1088,%edx
+c0109602:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109605:	89 50 40             	mov    %edx,0x40(%eax)
+        proc->flags = 0;
+c0109608:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010960b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+        memset(proc->name, 0, PROC_NAME_LEN);
+c0109612:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109615:	83 c0 48             	add    $0x48,%eax
+c0109618:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c010961f:	00 
+c0109620:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109627:	00 
+c0109628:	89 04 24             	mov    %eax,(%esp)
+c010962b:	e8 da 26 00 00       	call   c010bd0a <memset>
+        proc->wait_state = 0;
+c0109630:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109633:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+        proc->cptr = proc->optr = proc->yptr = NULL;
+c010963a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010963d:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+c0109644:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109647:	8b 50 74             	mov    0x74(%eax),%edx
+c010964a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010964d:	89 50 78             	mov    %edx,0x78(%eax)
+c0109650:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109653:	8b 50 78             	mov    0x78(%eax),%edx
+c0109656:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109659:	89 50 70             	mov    %edx,0x70(%eax)
+    }
+    return proc;
+c010965c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010965f:	c9                   	leave  
+c0109660:	c3                   	ret    
+
+c0109661 <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+c0109661:	55                   	push   %ebp
+c0109662:	89 e5                	mov    %esp,%ebp
+c0109664:	83 ec 18             	sub    $0x18,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c0109667:	8b 45 08             	mov    0x8(%ebp),%eax
+c010966a:	83 c0 48             	add    $0x48,%eax
+c010966d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c0109674:	00 
+c0109675:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010967c:	00 
+c010967d:	89 04 24             	mov    %eax,(%esp)
+c0109680:	e8 85 26 00 00       	call   c010bd0a <memset>
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c0109685:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109688:	8d 50 48             	lea    0x48(%eax),%edx
+c010968b:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c0109692:	00 
+c0109693:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109696:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010969a:	89 14 24             	mov    %edx,(%esp)
+c010969d:	e8 4a 27 00 00       	call   c010bdec <memcpy>
+}
+c01096a2:	c9                   	leave  
+c01096a3:	c3                   	ret    
+
+c01096a4 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+c01096a4:	55                   	push   %ebp
+c01096a5:	89 e5                	mov    %esp,%ebp
+c01096a7:	83 ec 18             	sub    $0x18,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c01096aa:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01096b1:	00 
+c01096b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01096b9:	00 
+c01096ba:	c7 04 24 64 10 1a c0 	movl   $0xc01a1064,(%esp)
+c01096c1:	e8 44 26 00 00       	call   c010bd0a <memset>
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c01096c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096c9:	83 c0 48             	add    $0x48,%eax
+c01096cc:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c01096d3:	00 
+c01096d4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01096d8:	c7 04 24 64 10 1a c0 	movl   $0xc01a1064,(%esp)
+c01096df:	e8 08 27 00 00       	call   c010bdec <memcpy>
+}
+c01096e4:	c9                   	leave  
+c01096e5:	c3                   	ret    
+
+c01096e6 <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+c01096e6:	55                   	push   %ebp
+c01096e7:	89 e5                	mov    %esp,%ebp
+c01096e9:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c01096ec:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096ef:	83 c0 58             	add    $0x58,%eax
+c01096f2:	c7 45 fc 70 11 1a c0 	movl   $0xc01a1170,-0x4(%ebp)
+c01096f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01096fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01096ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109702:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109705:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0109708:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010970b:	8b 40 04             	mov    0x4(%eax),%eax
+c010970e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109711:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0109714:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109717:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010971a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010971d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109720:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109723:	89 10                	mov    %edx,(%eax)
+c0109725:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109728:	8b 10                	mov    (%eax),%edx
+c010972a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010972d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109730:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109733:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109736:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109739:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010973c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010973f:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c0109741:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109744:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+c010974b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010974e:	8b 40 14             	mov    0x14(%eax),%eax
+c0109751:	8b 50 70             	mov    0x70(%eax),%edx
+c0109754:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109757:	89 50 78             	mov    %edx,0x78(%eax)
+c010975a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010975d:	8b 40 78             	mov    0x78(%eax),%eax
+c0109760:	85 c0                	test   %eax,%eax
+c0109762:	74 0c                	je     c0109770 <set_links+0x8a>
+        proc->optr->yptr = proc;
+c0109764:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109767:	8b 40 78             	mov    0x78(%eax),%eax
+c010976a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010976d:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    proc->parent->cptr = proc;
+c0109770:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109773:	8b 40 14             	mov    0x14(%eax),%eax
+c0109776:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109779:	89 50 70             	mov    %edx,0x70(%eax)
+    nr_process ++;
+c010977c:	a1 60 10 1a c0       	mov    0xc01a1060,%eax
+c0109781:	83 c0 01             	add    $0x1,%eax
+c0109784:	a3 60 10 1a c0       	mov    %eax,0xc01a1060
+}
+c0109789:	c9                   	leave  
+c010978a:	c3                   	ret    
+
+c010978b <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+c010978b:	55                   	push   %ebp
+c010978c:	89 e5                	mov    %esp,%ebp
+c010978e:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c0109791:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109794:	83 c0 58             	add    $0x58,%eax
+c0109797:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010979a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010979d:	8b 40 04             	mov    0x4(%eax),%eax
+c01097a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01097a3:	8b 12                	mov    (%edx),%edx
+c01097a5:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c01097a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01097ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01097ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01097b1:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01097b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097b7:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c01097ba:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL) {
+c01097bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097bf:	8b 40 78             	mov    0x78(%eax),%eax
+c01097c2:	85 c0                	test   %eax,%eax
+c01097c4:	74 0f                	je     c01097d5 <remove_links+0x4a>
+        proc->optr->yptr = proc->yptr;
+c01097c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097c9:	8b 40 78             	mov    0x78(%eax),%eax
+c01097cc:	8b 55 08             	mov    0x8(%ebp),%edx
+c01097cf:	8b 52 74             	mov    0x74(%edx),%edx
+c01097d2:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    if (proc->yptr != NULL) {
+c01097d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097d8:	8b 40 74             	mov    0x74(%eax),%eax
+c01097db:	85 c0                	test   %eax,%eax
+c01097dd:	74 11                	je     c01097f0 <remove_links+0x65>
+        proc->yptr->optr = proc->optr;
+c01097df:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097e2:	8b 40 74             	mov    0x74(%eax),%eax
+c01097e5:	8b 55 08             	mov    0x8(%ebp),%edx
+c01097e8:	8b 52 78             	mov    0x78(%edx),%edx
+c01097eb:	89 50 78             	mov    %edx,0x78(%eax)
+c01097ee:	eb 0f                	jmp    c01097ff <remove_links+0x74>
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+c01097f0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097f3:	8b 40 14             	mov    0x14(%eax),%eax
+c01097f6:	8b 55 08             	mov    0x8(%ebp),%edx
+c01097f9:	8b 52 78             	mov    0x78(%edx),%edx
+c01097fc:	89 50 70             	mov    %edx,0x70(%eax)
+    }
+    nr_process --;
+c01097ff:	a1 60 10 1a c0       	mov    0xc01a1060,%eax
+c0109804:	83 e8 01             	sub    $0x1,%eax
+c0109807:	a3 60 10 1a c0       	mov    %eax,0xc01a1060
+}
+c010980c:	c9                   	leave  
+c010980d:	c3                   	ret    
+
+c010980e <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+c010980e:	55                   	push   %ebp
+c010980f:	89 e5                	mov    %esp,%ebp
+c0109811:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c0109814:	c7 45 f8 70 11 1a c0 	movl   $0xc01a1170,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+c010981b:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c0109820:	83 c0 01             	add    $0x1,%eax
+c0109823:	a3 80 aa 12 c0       	mov    %eax,0xc012aa80
+c0109828:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c010982d:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0109832:	7e 0c                	jle    c0109840 <get_pid+0x32>
+        last_pid = 1;
+c0109834:	c7 05 80 aa 12 c0 01 	movl   $0x1,0xc012aa80
+c010983b:	00 00 00 
+        goto inside;
+c010983e:	eb 13                	jmp    c0109853 <get_pid+0x45>
+    }
+    if (last_pid >= next_safe) {
+c0109840:	8b 15 80 aa 12 c0    	mov    0xc012aa80,%edx
+c0109846:	a1 84 aa 12 c0       	mov    0xc012aa84,%eax
+c010984b:	39 c2                	cmp    %eax,%edx
+c010984d:	0f 8c ac 00 00 00    	jl     c01098ff <get_pid+0xf1>
+    inside:
+        next_safe = MAX_PID;
+c0109853:	c7 05 84 aa 12 c0 00 	movl   $0x2000,0xc012aa84
+c010985a:	20 00 00 
+    repeat:
+        le = list;
+c010985d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109860:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list) {
+c0109863:	eb 7f                	jmp    c01098e4 <get_pid+0xd6>
+            proc = le2proc(le, list_link);
+c0109865:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109868:	83 e8 58             	sub    $0x58,%eax
+c010986b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid) {
+c010986e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109871:	8b 50 04             	mov    0x4(%eax),%edx
+c0109874:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c0109879:	39 c2                	cmp    %eax,%edx
+c010987b:	75 3e                	jne    c01098bb <get_pid+0xad>
+                if (++ last_pid >= next_safe) {
+c010987d:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c0109882:	83 c0 01             	add    $0x1,%eax
+c0109885:	a3 80 aa 12 c0       	mov    %eax,0xc012aa80
+c010988a:	8b 15 80 aa 12 c0    	mov    0xc012aa80,%edx
+c0109890:	a1 84 aa 12 c0       	mov    0xc012aa84,%eax
+c0109895:	39 c2                	cmp    %eax,%edx
+c0109897:	7c 4b                	jl     c01098e4 <get_pid+0xd6>
+                    if (last_pid >= MAX_PID) {
+c0109899:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c010989e:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c01098a3:	7e 0a                	jle    c01098af <get_pid+0xa1>
+                        last_pid = 1;
+c01098a5:	c7 05 80 aa 12 c0 01 	movl   $0x1,0xc012aa80
+c01098ac:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c01098af:	c7 05 84 aa 12 c0 00 	movl   $0x2000,0xc012aa84
+c01098b6:	20 00 00 
+                    goto repeat;
+c01098b9:	eb a2                	jmp    c010985d <get_pid+0x4f>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+c01098bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098be:	8b 50 04             	mov    0x4(%eax),%edx
+c01098c1:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+c01098c6:	39 c2                	cmp    %eax,%edx
+c01098c8:	7e 1a                	jle    c01098e4 <get_pid+0xd6>
+c01098ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098cd:	8b 50 04             	mov    0x4(%eax),%edx
+c01098d0:	a1 84 aa 12 c0       	mov    0xc012aa84,%eax
+c01098d5:	39 c2                	cmp    %eax,%edx
+c01098d7:	7d 0b                	jge    c01098e4 <get_pid+0xd6>
+                next_safe = proc->pid;
+c01098d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098dc:	8b 40 04             	mov    0x4(%eax),%eax
+c01098df:	a3 84 aa 12 c0       	mov    %eax,0xc012aa84
+c01098e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01098e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01098ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01098ed:	8b 40 04             	mov    0x4(%eax),%eax
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+c01098f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01098f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01098f6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01098f9:	0f 85 66 ff ff ff    	jne    c0109865 <get_pid+0x57>
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+c01098ff:	a1 80 aa 12 c0       	mov    0xc012aa80,%eax
+}
+c0109904:	c9                   	leave  
+c0109905:	c3                   	ret    
+
+c0109906 <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+c0109906:	55                   	push   %ebp
+c0109907:	89 e5                	mov    %esp,%ebp
+c0109909:	83 ec 28             	sub    $0x28,%esp
+    if (proc != current) {
+c010990c:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109911:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0109914:	74 63                	je     c0109979 <proc_run+0x73>
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c0109916:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010991b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010991e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109921:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c0109924:	e8 15 fa ff ff       	call   c010933e <__intr_save>
+c0109929:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c010992c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010992f:	a3 48 f0 19 c0       	mov    %eax,0xc019f048
+            load_esp0(next->kstack + KSTACKSIZE);
+c0109934:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109937:	8b 40 0c             	mov    0xc(%eax),%eax
+c010993a:	05 00 20 00 00       	add    $0x2000,%eax
+c010993f:	89 04 24             	mov    %eax,(%esp)
+c0109942:	e8 cf b6 ff ff       	call   c0105016 <load_esp0>
+            lcr3(next->cr3);
+c0109947:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010994a:	8b 40 40             	mov    0x40(%eax),%eax
+c010994d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0109950:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109953:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c0109956:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109959:	8d 50 1c             	lea    0x1c(%eax),%edx
+c010995c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010995f:	83 c0 1c             	add    $0x1c,%eax
+c0109962:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109966:	89 04 24             	mov    %eax,(%esp)
+c0109969:	e8 39 15 00 00       	call   c010aea7 <switch_to>
+        }
+        local_intr_restore(intr_flag);
+c010996e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109971:	89 04 24             	mov    %eax,(%esp)
+c0109974:	e8 ef f9 ff ff       	call   c0109368 <__intr_restore>
+    }
+}
+c0109979:	c9                   	leave  
+c010997a:	c3                   	ret    
+
+c010997b <forkret>:
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+c010997b:	55                   	push   %ebp
+c010997c:	89 e5                	mov    %esp,%ebp
+c010997e:	83 ec 18             	sub    $0x18,%esp
+    forkrets(current->tf);
+c0109981:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109986:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109989:	89 04 24             	mov    %eax,(%esp)
+c010998c:	e8 11 91 ff ff       	call   c0102aa2 <forkrets>
+}
+c0109991:	c9                   	leave  
+c0109992:	c3                   	ret    
+
+c0109993 <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+c0109993:	55                   	push   %ebp
+c0109994:	89 e5                	mov    %esp,%ebp
+c0109996:	53                   	push   %ebx
+c0109997:	83 ec 34             	sub    $0x34,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c010999a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010999d:	8d 58 60             	lea    0x60(%eax),%ebx
+c01099a0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099a3:	8b 40 04             	mov    0x4(%eax),%eax
+c01099a6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c01099ad:	00 
+c01099ae:	89 04 24             	mov    %eax,(%esp)
+c01099b1:	e8 a7 18 00 00       	call   c010b25d <hash32>
+c01099b6:	c1 e0 03             	shl    $0x3,%eax
+c01099b9:	05 60 f0 19 c0       	add    $0xc019f060,%eax
+c01099be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01099c1:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c01099c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01099c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01099ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01099cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c01099d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099d3:	8b 40 04             	mov    0x4(%eax),%eax
+c01099d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01099d9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01099dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01099df:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c01099e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c01099e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01099e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01099eb:	89 10                	mov    %edx,(%eax)
+c01099ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01099f0:	8b 10                	mov    (%eax),%edx
+c01099f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01099f5:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01099f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01099fb:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01099fe:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109a01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109a04:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109a07:	89 10                	mov    %edx,(%eax)
+}
+c0109a09:	83 c4 34             	add    $0x34,%esp
+c0109a0c:	5b                   	pop    %ebx
+c0109a0d:	5d                   	pop    %ebp
+c0109a0e:	c3                   	ret    
+
+c0109a0f <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+c0109a0f:	55                   	push   %ebp
+c0109a10:	89 e5                	mov    %esp,%ebp
+c0109a12:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c0109a15:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a18:	83 c0 60             	add    $0x60,%eax
+c0109a1b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0109a1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109a21:	8b 40 04             	mov    0x4(%eax),%eax
+c0109a24:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109a27:	8b 12                	mov    (%edx),%edx
+c0109a29:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0109a2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0109a2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109a32:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109a35:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a3b:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0109a3e:	89 10                	mov    %edx,(%eax)
+}
+c0109a40:	c9                   	leave  
+c0109a41:	c3                   	ret    
+
+c0109a42 <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+c0109a42:	55                   	push   %ebp
+c0109a43:	89 e5                	mov    %esp,%ebp
+c0109a45:	83 ec 28             	sub    $0x28,%esp
+    if (0 < pid && pid < MAX_PID) {
+c0109a48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109a4c:	7e 5f                	jle    c0109aad <find_proc+0x6b>
+c0109a4e:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c0109a55:	7f 56                	jg     c0109aad <find_proc+0x6b>
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c0109a57:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a5a:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c0109a61:	00 
+c0109a62:	89 04 24             	mov    %eax,(%esp)
+c0109a65:	e8 f3 17 00 00       	call   c010b25d <hash32>
+c0109a6a:	c1 e0 03             	shl    $0x3,%eax
+c0109a6d:	05 60 f0 19 c0       	add    $0xc019f060,%eax
+c0109a72:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109a78:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list) {
+c0109a7b:	eb 19                	jmp    c0109a96 <find_proc+0x54>
+            struct proc_struct *proc = le2proc(le, hash_link);
+c0109a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a80:	83 e8 60             	sub    $0x60,%eax
+c0109a83:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid) {
+c0109a86:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109a89:	8b 40 04             	mov    0x4(%eax),%eax
+c0109a8c:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109a8f:	75 05                	jne    c0109a96 <find_proc+0x54>
+                return proc;
+c0109a91:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109a94:	eb 1c                	jmp    c0109ab2 <find_proc+0x70>
+c0109a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a99:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109a9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109a9f:	8b 40 04             	mov    0x4(%eax),%eax
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+c0109aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109aa8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0109aab:	75 d0                	jne    c0109a7d <find_proc+0x3b>
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+c0109aad:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109ab2:	c9                   	leave  
+c0109ab3:	c3                   	ret    
+
+c0109ab4 <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+c0109ab4:	55                   	push   %ebp
+c0109ab5:	89 e5                	mov    %esp,%ebp
+c0109ab7:	83 ec 68             	sub    $0x68,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c0109aba:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c0109ac1:	00 
+c0109ac2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109ac9:	00 
+c0109aca:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109acd:	89 04 24             	mov    %eax,(%esp)
+c0109ad0:	e8 35 22 00 00       	call   c010bd0a <memset>
+    tf.tf_cs = KERNEL_CS;
+c0109ad5:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c0109adb:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c0109ae1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0109ae5:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c0109ae9:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c0109aed:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c0109af1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109af4:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c0109af7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109afa:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c0109afd:	b8 f5 92 10 c0       	mov    $0xc01092f5,%eax
+c0109b02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c0109b05:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109b08:	80 cc 01             	or     $0x1,%ah
+c0109b0b:	89 c2                	mov    %eax,%edx
+c0109b0d:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109b10:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109b14:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109b1b:	00 
+c0109b1c:	89 14 24             	mov    %edx,(%esp)
+c0109b1f:	e8 25 03 00 00       	call   c0109e49 <do_fork>
+}
+c0109b24:	c9                   	leave  
+c0109b25:	c3                   	ret    
+
+c0109b26 <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+c0109b26:	55                   	push   %ebp
+c0109b27:	89 e5                	mov    %esp,%ebp
+c0109b29:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c0109b2c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c0109b33:	e8 2c b6 ff ff       	call   c0105164 <alloc_pages>
+c0109b38:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c0109b3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109b3f:	74 1a                	je     c0109b5b <setup_kstack+0x35>
+        proc->kstack = (uintptr_t)page2kva(page);
+c0109b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b44:	89 04 24             	mov    %eax,(%esp)
+c0109b47:	e8 1a f9 ff ff       	call   c0109466 <page2kva>
+c0109b4c:	89 c2                	mov    %eax,%edx
+c0109b4e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b51:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c0109b54:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109b59:	eb 05                	jmp    c0109b60 <setup_kstack+0x3a>
+    }
+    return -E_NO_MEM;
+c0109b5b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c0109b60:	c9                   	leave  
+c0109b61:	c3                   	ret    
+
+c0109b62 <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+c0109b62:	55                   	push   %ebp
+c0109b63:	89 e5                	mov    %esp,%ebp
+c0109b65:	83 ec 18             	sub    $0x18,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c0109b68:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b6b:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109b6e:	89 04 24             	mov    %eax,(%esp)
+c0109b71:	e8 44 f9 ff ff       	call   c01094ba <kva2page>
+c0109b76:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c0109b7d:	00 
+c0109b7e:	89 04 24             	mov    %eax,(%esp)
+c0109b81:	e8 49 b6 ff ff       	call   c01051cf <free_pages>
+}
+c0109b86:	c9                   	leave  
+c0109b87:	c3                   	ret    
+
+c0109b88 <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+c0109b88:	55                   	push   %ebp
+c0109b89:	89 e5                	mov    %esp,%ebp
+c0109b8b:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+c0109b8e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109b95:	e8 ca b5 ff ff       	call   c0105164 <alloc_pages>
+c0109b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109b9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109ba1:	75 0a                	jne    c0109bad <setup_pgdir+0x25>
+        return -E_NO_MEM;
+c0109ba3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0109ba8:	e9 80 00 00 00       	jmp    c0109c2d <setup_pgdir+0xa5>
+    }
+    pde_t *pgdir = page2kva(page);
+c0109bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bb0:	89 04 24             	mov    %eax,(%esp)
+c0109bb3:	e8 ae f8 ff ff       	call   c0109466 <page2kva>
+c0109bb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c0109bbb:	a1 00 aa 12 c0       	mov    0xc012aa00,%eax
+c0109bc0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0109bc7:	00 
+c0109bc8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109bcf:	89 04 24             	mov    %eax,(%esp)
+c0109bd2:	e8 15 22 00 00       	call   c010bdec <memcpy>
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c0109bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109bda:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0109be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109be3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109be6:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c0109bed:	77 23                	ja     c0109c12 <setup_pgdir+0x8a>
+c0109bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109bf2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109bf6:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c0109bfd:	c0 
+c0109bfe:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
+c0109c05:	00 
+c0109c06:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c0109c0d:	e8 cf 71 ff ff       	call   c0100de1 <__panic>
+c0109c12:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109c15:	05 00 00 00 40       	add    $0x40000000,%eax
+c0109c1a:	83 c8 03             	or     $0x3,%eax
+c0109c1d:	89 02                	mov    %eax,(%edx)
+    mm->pgdir = pgdir;
+c0109c1f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c22:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109c25:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c0109c28:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109c2d:	c9                   	leave  
+c0109c2e:	c3                   	ret    
+
+c0109c2f <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+c0109c2f:	55                   	push   %ebp
+c0109c30:	89 e5                	mov    %esp,%ebp
+c0109c32:	83 ec 18             	sub    $0x18,%esp
+    free_page(kva2page(mm->pgdir));
+c0109c35:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c38:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109c3b:	89 04 24             	mov    %eax,(%esp)
+c0109c3e:	e8 77 f8 ff ff       	call   c01094ba <kva2page>
+c0109c43:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0109c4a:	00 
+c0109c4b:	89 04 24             	mov    %eax,(%esp)
+c0109c4e:	e8 7c b5 ff ff       	call   c01051cf <free_pages>
+}
+c0109c53:	c9                   	leave  
+c0109c54:	c3                   	ret    
+
+c0109c55 <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+c0109c55:	55                   	push   %ebp
+c0109c56:	89 e5                	mov    %esp,%ebp
+c0109c58:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c0109c5b:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109c60:	8b 40 18             	mov    0x18(%eax),%eax
+c0109c63:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+c0109c66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0109c6a:	75 0a                	jne    c0109c76 <copy_mm+0x21>
+        return 0;
+c0109c6c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109c71:	e9 f9 00 00 00       	jmp    c0109d6f <copy_mm+0x11a>
+    }
+    if (clone_flags & CLONE_VM) {
+c0109c76:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c79:	25 00 01 00 00       	and    $0x100,%eax
+c0109c7e:	85 c0                	test   %eax,%eax
+c0109c80:	74 08                	je     c0109c8a <copy_mm+0x35>
+        mm = oldmm;
+c0109c82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109c85:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c0109c88:	eb 78                	jmp    c0109d02 <copy_mm+0xad>
+    }
+
+    int ret = -E_NO_MEM;
+c0109c8a:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL) {
+c0109c91:	e8 d6 e2 ff ff       	call   c0107f6c <mm_create>
+c0109c96:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109c99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109c9d:	75 05                	jne    c0109ca4 <copy_mm+0x4f>
+        goto bad_mm;
+c0109c9f:	e9 c8 00 00 00       	jmp    c0109d6c <copy_mm+0x117>
+    }
+    if (setup_pgdir(mm) != 0) {
+c0109ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ca7:	89 04 24             	mov    %eax,(%esp)
+c0109caa:	e8 d9 fe ff ff       	call   c0109b88 <setup_pgdir>
+c0109caf:	85 c0                	test   %eax,%eax
+c0109cb1:	74 05                	je     c0109cb8 <copy_mm+0x63>
+        goto bad_pgdir_cleanup_mm;
+c0109cb3:	e9 a9 00 00 00       	jmp    c0109d61 <copy_mm+0x10c>
+    }
+
+    lock_mm(oldmm);
+c0109cb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109cbb:	89 04 24             	mov    %eax,(%esp)
+c0109cbe:	e8 75 f8 ff ff       	call   c0109538 <lock_mm>
+    {
+        ret = dup_mmap(mm, oldmm);
+c0109cc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109cc6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ccd:	89 04 24             	mov    %eax,(%esp)
+c0109cd0:	e8 ae e7 ff ff       	call   c0108483 <dup_mmap>
+c0109cd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c0109cd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109cdb:	89 04 24             	mov    %eax,(%esp)
+c0109cde:	e8 71 f8 ff ff       	call   c0109554 <unlock_mm>
+
+    if (ret != 0) {
+c0109ce3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109ce7:	74 19                	je     c0109d02 <copy_mm+0xad>
+        goto bad_dup_cleanup_mmap;
+c0109ce9:	90                   	nop
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c0109cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ced:	89 04 24             	mov    %eax,(%esp)
+c0109cf0:	e8 8f e8 ff ff       	call   c0108584 <exit_mmap>
+    put_pgdir(mm);
+c0109cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cf8:	89 04 24             	mov    %eax,(%esp)
+c0109cfb:	e8 2f ff ff ff       	call   c0109c2f <put_pgdir>
+c0109d00:	eb 5f                	jmp    c0109d61 <copy_mm+0x10c>
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+c0109d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d05:	89 04 24             	mov    %eax,(%esp)
+c0109d08:	e8 f7 f7 ff ff       	call   c0109504 <mm_count_inc>
+    proc->mm = mm;
+c0109d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109d10:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109d13:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c0109d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d19:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109d1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109d1f:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c0109d26:	77 23                	ja     c0109d4b <copy_mm+0xf6>
+c0109d28:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109d2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109d2f:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c0109d36:	c0 
+c0109d37:	c7 44 24 04 5d 01 00 	movl   $0x15d,0x4(%esp)
+c0109d3e:	00 
+c0109d3f:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c0109d46:	e8 96 70 ff ff       	call   c0100de1 <__panic>
+c0109d4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109d4e:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c0109d54:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109d57:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c0109d5a:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109d5f:	eb 0e                	jmp    c0109d6f <copy_mm+0x11a>
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c0109d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d64:	89 04 24             	mov    %eax,(%esp)
+c0109d67:	e8 59 e5 ff ff       	call   c01082c5 <mm_destroy>
+bad_mm:
+    return ret;
+c0109d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0109d6f:	c9                   	leave  
+c0109d70:	c3                   	ret    
+
+c0109d71 <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+c0109d71:	55                   	push   %ebp
+c0109d72:	89 e5                	mov    %esp,%ebp
+c0109d74:	57                   	push   %edi
+c0109d75:	56                   	push   %esi
+c0109d76:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c0109d77:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d7a:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109d7d:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c0109d82:	89 c2                	mov    %eax,%edx
+c0109d84:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d87:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c0109d8a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d8d:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109d90:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109d93:	bb 4c 00 00 00       	mov    $0x4c,%ebx
+c0109d98:	89 c1                	mov    %eax,%ecx
+c0109d9a:	83 e1 01             	and    $0x1,%ecx
+c0109d9d:	85 c9                	test   %ecx,%ecx
+c0109d9f:	74 0e                	je     c0109daf <copy_thread+0x3e>
+c0109da1:	0f b6 0a             	movzbl (%edx),%ecx
+c0109da4:	88 08                	mov    %cl,(%eax)
+c0109da6:	83 c0 01             	add    $0x1,%eax
+c0109da9:	83 c2 01             	add    $0x1,%edx
+c0109dac:	83 eb 01             	sub    $0x1,%ebx
+c0109daf:	89 c1                	mov    %eax,%ecx
+c0109db1:	83 e1 02             	and    $0x2,%ecx
+c0109db4:	85 c9                	test   %ecx,%ecx
+c0109db6:	74 0f                	je     c0109dc7 <copy_thread+0x56>
+c0109db8:	0f b7 0a             	movzwl (%edx),%ecx
+c0109dbb:	66 89 08             	mov    %cx,(%eax)
+c0109dbe:	83 c0 02             	add    $0x2,%eax
+c0109dc1:	83 c2 02             	add    $0x2,%edx
+c0109dc4:	83 eb 02             	sub    $0x2,%ebx
+c0109dc7:	89 d9                	mov    %ebx,%ecx
+c0109dc9:	c1 e9 02             	shr    $0x2,%ecx
+c0109dcc:	89 c7                	mov    %eax,%edi
+c0109dce:	89 d6                	mov    %edx,%esi
+c0109dd0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c0109dd2:	89 f2                	mov    %esi,%edx
+c0109dd4:	89 f8                	mov    %edi,%eax
+c0109dd6:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0109ddb:	89 de                	mov    %ebx,%esi
+c0109ddd:	83 e6 02             	and    $0x2,%esi
+c0109de0:	85 f6                	test   %esi,%esi
+c0109de2:	74 0b                	je     c0109def <copy_thread+0x7e>
+c0109de4:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
+c0109de8:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
+c0109dec:	83 c1 02             	add    $0x2,%ecx
+c0109def:	83 e3 01             	and    $0x1,%ebx
+c0109df2:	85 db                	test   %ebx,%ebx
+c0109df4:	74 07                	je     c0109dfd <copy_thread+0x8c>
+c0109df6:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
+c0109dfa:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+    proc->tf->tf_regs.reg_eax = 0;
+c0109dfd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e00:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109e03:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c0109e0a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e0d:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109e10:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109e13:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c0109e16:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e19:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109e1c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109e1f:	8b 52 3c             	mov    0x3c(%edx),%edx
+c0109e22:	8b 52 40             	mov    0x40(%edx),%edx
+c0109e25:	80 ce 02             	or     $0x2,%dh
+c0109e28:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c0109e2b:	ba 7b 99 10 c0       	mov    $0xc010997b,%edx
+c0109e30:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e33:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c0109e36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e39:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109e3c:	89 c2                	mov    %eax,%edx
+c0109e3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e41:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c0109e44:	5b                   	pop    %ebx
+c0109e45:	5e                   	pop    %esi
+c0109e46:	5f                   	pop    %edi
+c0109e47:	5d                   	pop    %ebp
+c0109e48:	c3                   	ret    
+
+c0109e49 <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+c0109e49:	55                   	push   %ebp
+c0109e4a:	89 e5                	mov    %esp,%ebp
+c0109e4c:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_NO_FREE_PROC;
+c0109e4f:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+c0109e56:	a1 60 10 1a c0       	mov    0xc01a1060,%eax
+c0109e5b:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0109e60:	7e 05                	jle    c0109e67 <do_fork+0x1e>
+        goto fork_out;
+c0109e62:	e9 bf 00 00 00       	jmp    c0109f26 <do_fork+0xdd>
+    }
+    ret = -E_NO_MEM;
+c0109e67:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) {
+c0109e6e:	e8 fd f6 ff ff       	call   c0109570 <alloc_proc>
+c0109e73:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109e76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109e7a:	75 05                	jne    c0109e81 <do_fork+0x38>
+        goto fork_out;
+c0109e7c:	e9 a5 00 00 00       	jmp    c0109f26 <do_fork+0xdd>
+    }
+
+    proc->parent = current;
+c0109e81:	8b 15 48 f0 19 c0    	mov    0xc019f048,%edx
+c0109e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109e8a:	89 50 14             	mov    %edx,0x14(%eax)
+
+    if (setup_kstack(proc) != 0) {
+c0109e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109e90:	89 04 24             	mov    %eax,(%esp)
+c0109e93:	e8 8e fc ff ff       	call   c0109b26 <setup_kstack>
+c0109e98:	85 c0                	test   %eax,%eax
+c0109e9a:	74 05                	je     c0109ea1 <do_fork+0x58>
+        goto bad_fork_cleanup_proc;
+c0109e9c:	e9 8a 00 00 00       	jmp    c0109f2b <do_fork+0xe2>
+    }
+    if (copy_mm(clone_flags, proc) != 0) {
+c0109ea1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109ea8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109eab:	89 04 24             	mov    %eax,(%esp)
+c0109eae:	e8 a2 fd ff ff       	call   c0109c55 <copy_mm>
+c0109eb3:	85 c0                	test   %eax,%eax
+c0109eb5:	74 0e                	je     c0109ec5 <do_fork+0x7c>
+        goto bad_fork_cleanup_kstack;
+c0109eb7:	90                   	nop
+    ret = proc->pid;	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c0109eb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ebb:	89 04 24             	mov    %eax,(%esp)
+c0109ebe:	e8 9f fc ff ff       	call   c0109b62 <put_kstack>
+c0109ec3:	eb 66                	jmp    c0109f2b <do_fork+0xe2>
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0) {
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack, tf);
+c0109ec5:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109ec8:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109ecf:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109ed3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ed6:	89 04 24             	mov    %eax,(%esp)
+c0109ed9:	e8 93 fe ff ff       	call   c0109d71 <copy_thread>
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0109ede:	e8 5b f4 ff ff       	call   c010933e <__intr_save>
+c0109ee3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        proc->pid = get_pid();
+c0109ee6:	e8 23 f9 ff ff       	call   c010980e <get_pid>
+c0109eeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109eee:	89 42 04             	mov    %eax,0x4(%edx)
+        hash_proc(proc);
+c0109ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ef4:	89 04 24             	mov    %eax,(%esp)
+c0109ef7:	e8 97 fa ff ff       	call   c0109993 <hash_proc>
+        set_links(proc);
+c0109efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109eff:	89 04 24             	mov    %eax,(%esp)
+c0109f02:	e8 df f7 ff ff       	call   c01096e6 <set_links>
+    }
+    local_intr_restore(intr_flag);
+c0109f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109f0a:	89 04 24             	mov    %eax,(%esp)
+c0109f0d:	e8 56 f4 ff ff       	call   c0109368 <__intr_restore>
+
+    wakeup_proc(proc);
+c0109f12:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109f15:	89 04 24             	mov    %eax,(%esp)
+c0109f18:	e8 fe 0f 00 00       	call   c010af1b <wakeup_proc>
+
+    ret = proc->pid;	
+c0109f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109f20:	8b 40 04             	mov    0x4(%eax),%eax
+c0109f23:	89 45 f4             	mov    %eax,-0xc(%ebp)
+fork_out:
+    return ret;
+c0109f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f29:	eb 0d                	jmp    c0109f38 <do_fork+0xef>
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+c0109f2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109f2e:	89 04 24             	mov    %eax,(%esp)
+c0109f31:	e8 d4 ad ff ff       	call   c0104d0a <kfree>
+    goto fork_out;
+c0109f36:	eb ee                	jmp    c0109f26 <do_fork+0xdd>
+}
+c0109f38:	c9                   	leave  
+c0109f39:	c3                   	ret    
+
+c0109f3a <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+c0109f3a:	55                   	push   %ebp
+c0109f3b:	89 e5                	mov    %esp,%ebp
+c0109f3d:	83 ec 28             	sub    $0x28,%esp
+    if (current == idleproc) {
+c0109f40:	8b 15 48 f0 19 c0    	mov    0xc019f048,%edx
+c0109f46:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c0109f4b:	39 c2                	cmp    %eax,%edx
+c0109f4d:	75 1c                	jne    c0109f6b <do_exit+0x31>
+        panic("idleproc exit.\n");
+c0109f4f:	c7 44 24 08 84 df 10 	movl   $0xc010df84,0x8(%esp)
+c0109f56:	c0 
+c0109f57:	c7 44 24 04 cf 01 00 	movl   $0x1cf,0x4(%esp)
+c0109f5e:	00 
+c0109f5f:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c0109f66:	e8 76 6e ff ff       	call   c0100de1 <__panic>
+    }
+    if (current == initproc) {
+c0109f6b:	8b 15 48 f0 19 c0    	mov    0xc019f048,%edx
+c0109f71:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c0109f76:	39 c2                	cmp    %eax,%edx
+c0109f78:	75 1c                	jne    c0109f96 <do_exit+0x5c>
+        panic("initproc exit.\n");
+c0109f7a:	c7 44 24 08 94 df 10 	movl   $0xc010df94,0x8(%esp)
+c0109f81:	c0 
+c0109f82:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
+c0109f89:	00 
+c0109f8a:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c0109f91:	e8 4b 6e ff ff       	call   c0100de1 <__panic>
+    }
+    
+    struct mm_struct *mm = current->mm;
+c0109f96:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109f9b:	8b 40 18             	mov    0x18(%eax),%eax
+c0109f9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL) {
+c0109fa1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109fa5:	74 4a                	je     c0109ff1 <do_exit+0xb7>
+        lcr3(boot_cr3);
+c0109fa7:	a1 88 10 1a c0       	mov    0xc01a1088,%eax
+c0109fac:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109faf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109fb2:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c0109fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fb8:	89 04 24             	mov    %eax,(%esp)
+c0109fbb:	e8 5e f5 ff ff       	call   c010951e <mm_count_dec>
+c0109fc0:	85 c0                	test   %eax,%eax
+c0109fc2:	75 21                	jne    c0109fe5 <do_exit+0xab>
+            exit_mmap(mm);
+c0109fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fc7:	89 04 24             	mov    %eax,(%esp)
+c0109fca:	e8 b5 e5 ff ff       	call   c0108584 <exit_mmap>
+            put_pgdir(mm);
+c0109fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fd2:	89 04 24             	mov    %eax,(%esp)
+c0109fd5:	e8 55 fc ff ff       	call   c0109c2f <put_pgdir>
+            mm_destroy(mm);
+c0109fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fdd:	89 04 24             	mov    %eax,(%esp)
+c0109fe0:	e8 e0 e2 ff ff       	call   c01082c5 <mm_destroy>
+        }
+        current->mm = NULL;
+c0109fe5:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109fea:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c0109ff1:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c0109ff6:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c0109ffc:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a001:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a004:	89 50 68             	mov    %edx,0x68(%eax)
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c010a007:	e8 32 f3 ff ff       	call   c010933e <__intr_save>
+c010a00c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010a00f:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a014:	8b 40 14             	mov    0x14(%eax),%eax
+c010a017:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD) {
+c010a01a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a01d:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a020:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a025:	75 10                	jne    c010a037 <do_exit+0xfd>
+            wakeup_proc(proc);
+c010a027:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a02a:	89 04 24             	mov    %eax,(%esp)
+c010a02d:	e8 e9 0e 00 00       	call   c010af1b <wakeup_proc>
+        }
+        while (current->cptr != NULL) {
+c010a032:	e9 8b 00 00 00       	jmp    c010a0c2 <do_exit+0x188>
+c010a037:	e9 86 00 00 00       	jmp    c010a0c2 <do_exit+0x188>
+            proc = current->cptr;
+c010a03c:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a041:	8b 40 70             	mov    0x70(%eax),%eax
+c010a044:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c010a047:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a04c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a04f:	8b 52 78             	mov    0x78(%edx),%edx
+c010a052:	89 50 70             	mov    %edx,0x70(%eax)
+    
+            proc->yptr = NULL;
+c010a055:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a058:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+            if ((proc->optr = initproc->cptr) != NULL) {
+c010a05f:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a064:	8b 50 70             	mov    0x70(%eax),%edx
+c010a067:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a06a:	89 50 78             	mov    %edx,0x78(%eax)
+c010a06d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a070:	8b 40 78             	mov    0x78(%eax),%eax
+c010a073:	85 c0                	test   %eax,%eax
+c010a075:	74 0e                	je     c010a085 <do_exit+0x14b>
+                initproc->cptr->yptr = proc;
+c010a077:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a07c:	8b 40 70             	mov    0x70(%eax),%eax
+c010a07f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a082:	89 50 74             	mov    %edx,0x74(%eax)
+            }
+            proc->parent = initproc;
+c010a085:	8b 15 44 f0 19 c0    	mov    0xc019f044,%edx
+c010a08b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a08e:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c010a091:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a096:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a099:	89 50 70             	mov    %edx,0x70(%eax)
+            if (proc->state == PROC_ZOMBIE) {
+c010a09c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a09f:	8b 00                	mov    (%eax),%eax
+c010a0a1:	83 f8 03             	cmp    $0x3,%eax
+c010a0a4:	75 1c                	jne    c010a0c2 <do_exit+0x188>
+                if (initproc->wait_state == WT_CHILD) {
+c010a0a6:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a0ab:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a0ae:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a0b3:	75 0d                	jne    c010a0c2 <do_exit+0x188>
+                    wakeup_proc(initproc);
+c010a0b5:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a0ba:	89 04 24             	mov    %eax,(%esp)
+c010a0bd:	e8 59 0e 00 00       	call   c010af1b <wakeup_proc>
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+c010a0c2:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a0c7:	8b 40 70             	mov    0x70(%eax),%eax
+c010a0ca:	85 c0                	test   %eax,%eax
+c010a0cc:	0f 85 6a ff ff ff    	jne    c010a03c <do_exit+0x102>
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a0d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0d5:	89 04 24             	mov    %eax,(%esp)
+c010a0d8:	e8 8b f2 ff ff       	call   c0109368 <__intr_restore>
+    
+    schedule();
+c010a0dd:	e8 bd 0e 00 00       	call   c010af9f <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c010a0e2:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a0e7:	8b 40 04             	mov    0x4(%eax),%eax
+c010a0ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a0ee:	c7 44 24 08 a4 df 10 	movl   $0xc010dfa4,0x8(%esp)
+c010a0f5:	c0 
+c010a0f6:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
+c010a0fd:	00 
+c010a0fe:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a105:	e8 d7 6c ff ff       	call   c0100de1 <__panic>
+
+c010a10a <load_icode>:
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+c010a10a:	55                   	push   %ebp
+c010a10b:	89 e5                	mov    %esp,%ebp
+c010a10d:	83 ec 78             	sub    $0x78,%esp
+    if (current->mm != NULL) {
+c010a110:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a115:	8b 40 18             	mov    0x18(%eax),%eax
+c010a118:	85 c0                	test   %eax,%eax
+c010a11a:	74 1c                	je     c010a138 <load_icode+0x2e>
+        panic("load_icode: current->mm must be empty.\n");
+c010a11c:	c7 44 24 08 c4 df 10 	movl   $0xc010dfc4,0x8(%esp)
+c010a123:	c0 
+c010a124:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
+c010a12b:	00 
+c010a12c:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a133:	e8 a9 6c ff ff       	call   c0100de1 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010a138:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+c010a13f:	e8 28 de ff ff       	call   c0107f6c <mm_create>
+c010a144:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010a147:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010a14b:	75 06                	jne    c010a153 <load_icode+0x49>
+        goto bad_mm;
+c010a14d:	90                   	nop
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+c010a14e:	e9 ef 05 00 00       	jmp    c010a742 <load_icode+0x638>
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+c010a153:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a156:	89 04 24             	mov    %eax,(%esp)
+c010a159:	e8 2a fa ff ff       	call   c0109b88 <setup_pgdir>
+c010a15e:	85 c0                	test   %eax,%eax
+c010a160:	74 05                	je     c010a167 <load_icode+0x5d>
+        goto bad_pgdir_cleanup_mm;
+c010a162:	e9 f6 05 00 00       	jmp    c010a75d <load_icode+0x653>
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c010a167:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a16a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c010a16d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a170:	8b 50 1c             	mov    0x1c(%eax),%edx
+c010a173:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a176:	01 d0                	add    %edx,%eax
+c010a178:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+c010a17b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a17e:	8b 00                	mov    (%eax),%eax
+c010a180:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c010a185:	74 0c                	je     c010a193 <load_icode+0x89>
+        ret = -E_INVAL_ELF;
+c010a187:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c010a18e:	e9 bf 05 00 00       	jmp    c010a752 <load_icode+0x648>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c010a193:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a196:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c010a19a:	0f b7 c0             	movzwl %ax,%eax
+c010a19d:	c1 e0 05             	shl    $0x5,%eax
+c010a1a0:	89 c2                	mov    %eax,%edx
+c010a1a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1a5:	01 d0                	add    %edx,%eax
+c010a1a7:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph ++) {
+c010a1aa:	e9 13 03 00 00       	jmp    c010a4c2 <load_icode+0x3b8>
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+c010a1af:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1b2:	8b 00                	mov    (%eax),%eax
+c010a1b4:	83 f8 01             	cmp    $0x1,%eax
+c010a1b7:	74 05                	je     c010a1be <load_icode+0xb4>
+            continue ;
+c010a1b9:	e9 00 03 00 00       	jmp    c010a4be <load_icode+0x3b4>
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+c010a1be:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1c1:	8b 50 10             	mov    0x10(%eax),%edx
+c010a1c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1c7:	8b 40 14             	mov    0x14(%eax),%eax
+c010a1ca:	39 c2                	cmp    %eax,%edx
+c010a1cc:	76 0c                	jbe    c010a1da <load_icode+0xd0>
+            ret = -E_INVAL_ELF;
+c010a1ce:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010a1d5:	e9 6d 05 00 00       	jmp    c010a747 <load_icode+0x63d>
+        }
+        if (ph->p_filesz == 0) {
+c010a1da:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1dd:	8b 40 10             	mov    0x10(%eax),%eax
+c010a1e0:	85 c0                	test   %eax,%eax
+c010a1e2:	75 05                	jne    c010a1e9 <load_icode+0xdf>
+            continue ;
+c010a1e4:	e9 d5 02 00 00       	jmp    c010a4be <load_icode+0x3b4>
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010a1e9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010a1f0:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+c010a1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1fa:	8b 40 18             	mov    0x18(%eax),%eax
+c010a1fd:	83 e0 01             	and    $0x1,%eax
+c010a200:	85 c0                	test   %eax,%eax
+c010a202:	74 04                	je     c010a208 <load_icode+0xfe>
+c010a204:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+c010a208:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a20b:	8b 40 18             	mov    0x18(%eax),%eax
+c010a20e:	83 e0 02             	and    $0x2,%eax
+c010a211:	85 c0                	test   %eax,%eax
+c010a213:	74 04                	je     c010a219 <load_icode+0x10f>
+c010a215:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+c010a219:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a21c:	8b 40 18             	mov    0x18(%eax),%eax
+c010a21f:	83 e0 04             	and    $0x4,%eax
+c010a222:	85 c0                	test   %eax,%eax
+c010a224:	74 04                	je     c010a22a <load_icode+0x120>
+c010a226:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+c010a22a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a22d:	83 e0 02             	and    $0x2,%eax
+c010a230:	85 c0                	test   %eax,%eax
+c010a232:	74 04                	je     c010a238 <load_icode+0x12e>
+c010a234:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+c010a238:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a23b:	8b 50 14             	mov    0x14(%eax),%edx
+c010a23e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a241:	8b 40 08             	mov    0x8(%eax),%eax
+c010a244:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a24b:	00 
+c010a24c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c010a24f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010a253:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a257:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a25b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a25e:	89 04 24             	mov    %eax,(%esp)
+c010a261:	e8 01 e1 ff ff       	call   c0108367 <mm_map>
+c010a266:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a269:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a26d:	74 05                	je     c010a274 <load_icode+0x16a>
+            goto bad_cleanup_mmap;
+c010a26f:	e9 d3 04 00 00       	jmp    c010a747 <load_icode+0x63d>
+        }
+        unsigned char *from = binary + ph->p_offset;
+c010a274:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a277:	8b 50 04             	mov    0x4(%eax),%edx
+c010a27a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a27d:	01 d0                	add    %edx,%eax
+c010a27f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c010a282:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a285:	8b 40 08             	mov    0x8(%eax),%eax
+c010a288:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010a28b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a28e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010a291:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010a294:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010a299:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c010a29c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c010a2a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2a6:	8b 50 08             	mov    0x8(%eax),%edx
+c010a2a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2ac:	8b 40 10             	mov    0x10(%eax),%eax
+c010a2af:	01 d0                	add    %edx,%eax
+c010a2b1:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010a2b4:	e9 90 00 00 00       	jmp    c010a349 <load_icode+0x23f>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010a2b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a2bc:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a2bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a2c2:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a2c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a2c9:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a2cd:	89 04 24             	mov    %eax,(%esp)
+c010a2d0:	e8 dd bc ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a2d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a2d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a2dc:	75 05                	jne    c010a2e3 <load_icode+0x1d9>
+                goto bad_cleanup_mmap;
+c010a2de:	e9 64 04 00 00       	jmp    c010a747 <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a2e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a2e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a2e9:	29 c2                	sub    %eax,%edx
+c010a2eb:	89 d0                	mov    %edx,%eax
+c010a2ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a2f0:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a2f5:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a2f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a2fb:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010a302:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a305:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a308:	73 0d                	jae    c010a317 <load_icode+0x20d>
+                size -= la - end;
+c010a30a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a30d:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a310:	29 c2                	sub    %eax,%edx
+c010a312:	89 d0                	mov    %edx,%eax
+c010a314:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c010a317:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a31a:	89 04 24             	mov    %eax,(%esp)
+c010a31d:	e8 44 f1 ff ff       	call   c0109466 <page2kva>
+c010a322:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a325:	01 c2                	add    %eax,%edx
+c010a327:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a32a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a32e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010a331:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a335:	89 14 24             	mov    %edx,(%esp)
+c010a338:	e8 af 1a 00 00       	call   c010bdec <memcpy>
+            start += size, from += size;
+c010a33d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a340:	01 45 d8             	add    %eax,-0x28(%ebp)
+c010a343:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a346:	01 45 e0             	add    %eax,-0x20(%ebp)
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010a349:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a34c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a34f:	0f 82 64 ff ff ff    	jb     c010a2b9 <load_icode+0x1af>
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c010a355:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a358:	8b 50 08             	mov    0x8(%eax),%edx
+c010a35b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a35e:	8b 40 14             	mov    0x14(%eax),%eax
+c010a361:	01 d0                	add    %edx,%eax
+c010a363:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        if (start < la) {
+c010a366:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a369:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a36c:	0f 83 b0 00 00 00    	jae    c010a422 <load_icode+0x318>
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+c010a372:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a375:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a378:	75 05                	jne    c010a37f <load_icode+0x275>
+                continue ;
+c010a37a:	e9 3f 01 00 00       	jmp    c010a4be <load_icode+0x3b4>
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c010a37f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a382:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a385:	29 c2                	sub    %eax,%edx
+c010a387:	89 d0                	mov    %edx,%eax
+c010a389:	05 00 10 00 00       	add    $0x1000,%eax
+c010a38e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a391:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a396:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a399:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la) {
+c010a39c:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a39f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a3a2:	73 0d                	jae    c010a3b1 <load_icode+0x2a7>
+                size -= la - end;
+c010a3a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a3a7:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a3aa:	29 c2                	sub    %eax,%edx
+c010a3ac:	89 d0                	mov    %edx,%eax
+c010a3ae:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a3b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a3b4:	89 04 24             	mov    %eax,(%esp)
+c010a3b7:	e8 aa f0 ff ff       	call   c0109466 <page2kva>
+c010a3bc:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a3bf:	01 c2                	add    %eax,%edx
+c010a3c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a3c4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a3c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a3cf:	00 
+c010a3d0:	89 14 24             	mov    %edx,(%esp)
+c010a3d3:	e8 32 19 00 00       	call   c010bd0a <memset>
+            start += size;
+c010a3d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a3db:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c010a3de:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a3e1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a3e4:	73 08                	jae    c010a3ee <load_icode+0x2e4>
+c010a3e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a3e9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a3ec:	74 34                	je     c010a422 <load_icode+0x318>
+c010a3ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a3f1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a3f4:	72 08                	jb     c010a3fe <load_icode+0x2f4>
+c010a3f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a3f9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a3fc:	74 24                	je     c010a422 <load_icode+0x318>
+c010a3fe:	c7 44 24 0c ec df 10 	movl   $0xc010dfec,0xc(%esp)
+c010a405:	c0 
+c010a406:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010a40d:	c0 
+c010a40e:	c7 44 24 04 5a 02 00 	movl   $0x25a,0x4(%esp)
+c010a415:	00 
+c010a416:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a41d:	e8 bf 69 ff ff       	call   c0100de1 <__panic>
+        }
+        while (start < end) {
+c010a422:	e9 8b 00 00 00       	jmp    c010a4b2 <load_icode+0x3a8>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010a427:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a42a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a42d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a430:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a434:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a437:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a43b:	89 04 24             	mov    %eax,(%esp)
+c010a43e:	e8 6f bb ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a443:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a446:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a44a:	75 05                	jne    c010a451 <load_icode+0x347>
+                goto bad_cleanup_mmap;
+c010a44c:	e9 f6 02 00 00       	jmp    c010a747 <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a451:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a454:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a457:	29 c2                	sub    %eax,%edx
+c010a459:	89 d0                	mov    %edx,%eax
+c010a45b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a45e:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a463:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a466:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a469:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010a470:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a473:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a476:	73 0d                	jae    c010a485 <load_icode+0x37b>
+                size -= la - end;
+c010a478:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a47b:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a47e:	29 c2                	sub    %eax,%edx
+c010a480:	89 d0                	mov    %edx,%eax
+c010a482:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a485:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a488:	89 04 24             	mov    %eax,(%esp)
+c010a48b:	e8 d6 ef ff ff       	call   c0109466 <page2kva>
+c010a490:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a493:	01 c2                	add    %eax,%edx
+c010a495:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a498:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a49c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a4a3:	00 
+c010a4a4:	89 14 24             	mov    %edx,(%esp)
+c010a4a7:	e8 5e 18 00 00       	call   c010bd0a <memset>
+            start += size;
+c010a4ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a4af:	01 45 d8             	add    %eax,-0x28(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+c010a4b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a4b5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a4b8:	0f 82 69 ff ff ff    	jb     c010a427 <load_icode+0x31d>
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+c010a4be:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c010a4c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a4c5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010a4c8:	0f 82 e1 fc ff ff    	jb     c010a1af <load_icode+0xa5>
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c010a4ce:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+c010a4d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a4dc:	00 
+c010a4dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a4e0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a4e4:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
+c010a4eb:	00 
+c010a4ec:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
+c010a4f3:	af 
+c010a4f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a4f7:	89 04 24             	mov    %eax,(%esp)
+c010a4fa:	e8 68 de ff ff       	call   c0108367 <mm_map>
+c010a4ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a502:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a506:	74 05                	je     c010a50d <load_icode+0x403>
+        goto bad_cleanup_mmap;
+c010a508:	e9 3a 02 00 00       	jmp    c010a747 <load_icode+0x63d>
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+c010a50d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a510:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a513:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a51a:	00 
+c010a51b:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
+c010a522:	af 
+c010a523:	89 04 24             	mov    %eax,(%esp)
+c010a526:	e8 87 ba ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a52b:	85 c0                	test   %eax,%eax
+c010a52d:	75 24                	jne    c010a553 <load_icode+0x449>
+c010a52f:	c7 44 24 0c 3c e0 10 	movl   $0xc010e03c,0xc(%esp)
+c010a536:	c0 
+c010a537:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010a53e:	c0 
+c010a53f:	c7 44 24 04 6d 02 00 	movl   $0x26d,0x4(%esp)
+c010a546:	00 
+c010a547:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a54e:	e8 8e 68 ff ff       	call   c0100de1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+c010a553:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a556:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a559:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a560:	00 
+c010a561:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
+c010a568:	af 
+c010a569:	89 04 24             	mov    %eax,(%esp)
+c010a56c:	e8 41 ba ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a571:	85 c0                	test   %eax,%eax
+c010a573:	75 24                	jne    c010a599 <load_icode+0x48f>
+c010a575:	c7 44 24 0c 80 e0 10 	movl   $0xc010e080,0xc(%esp)
+c010a57c:	c0 
+c010a57d:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010a584:	c0 
+c010a585:	c7 44 24 04 6e 02 00 	movl   $0x26e,0x4(%esp)
+c010a58c:	00 
+c010a58d:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a594:	e8 48 68 ff ff       	call   c0100de1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+c010a599:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a59c:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a59f:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a5a6:	00 
+c010a5a7:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
+c010a5ae:	af 
+c010a5af:	89 04 24             	mov    %eax,(%esp)
+c010a5b2:	e8 fb b9 ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a5b7:	85 c0                	test   %eax,%eax
+c010a5b9:	75 24                	jne    c010a5df <load_icode+0x4d5>
+c010a5bb:	c7 44 24 0c c4 e0 10 	movl   $0xc010e0c4,0xc(%esp)
+c010a5c2:	c0 
+c010a5c3:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010a5ca:	c0 
+c010a5cb:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
+c010a5d2:	00 
+c010a5d3:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a5da:	e8 02 68 ff ff       	call   c0100de1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+c010a5df:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a5e2:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a5e5:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a5ec:	00 
+c010a5ed:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
+c010a5f4:	af 
+c010a5f5:	89 04 24             	mov    %eax,(%esp)
+c010a5f8:	e8 b5 b9 ff ff       	call   c0105fb2 <pgdir_alloc_page>
+c010a5fd:	85 c0                	test   %eax,%eax
+c010a5ff:	75 24                	jne    c010a625 <load_icode+0x51b>
+c010a601:	c7 44 24 0c 08 e1 10 	movl   $0xc010e108,0xc(%esp)
+c010a608:	c0 
+c010a609:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010a610:	c0 
+c010a611:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
+c010a618:	00 
+c010a619:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a620:	e8 bc 67 ff ff       	call   c0100de1 <__panic>
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c010a625:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a628:	89 04 24             	mov    %eax,(%esp)
+c010a62b:	e8 d4 ee ff ff       	call   c0109504 <mm_count_inc>
+    current->mm = mm;
+c010a630:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a635:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010a638:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c010a63b:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a640:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010a643:	8b 52 0c             	mov    0xc(%edx),%edx
+c010a646:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c010a649:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c010a650:	77 23                	ja     c010a675 <load_icode+0x56b>
+c010a652:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010a655:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a659:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c010a660:	c0 
+c010a661:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
+c010a668:	00 
+c010a669:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a670:	e8 6c 67 ff ff       	call   c0100de1 <__panic>
+c010a675:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010a678:	81 c2 00 00 00 40    	add    $0x40000000,%edx
+c010a67e:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c010a681:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a684:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a687:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c010a68a:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
+c010a691:	77 23                	ja     c010a6b6 <load_icode+0x5ac>
+c010a693:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a696:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a69a:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c010a6a1:	c0 
+c010a6a2:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c010a6a9:	00 
+c010a6aa:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a6b1:	e8 2b 67 ff ff       	call   c0100de1 <__panic>
+c010a6b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a6b9:	05 00 00 00 40       	add    $0x40000000,%eax
+c010a6be:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c010a6c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010a6c4:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c010a6c7:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a6cc:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a6cf:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c010a6d2:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c010a6d9:	00 
+c010a6da:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a6e1:	00 
+c010a6e2:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a6e5:	89 04 24             	mov    %eax,(%esp)
+c010a6e8:	e8 1d 16 00 00       	call   c010bd0a <memset>
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c010a6ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a6f0:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010a6f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a6f9:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c010a6ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a702:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010a706:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a709:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010a70d:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a710:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c010a714:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a717:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c010a71b:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a71e:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c010a725:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a728:	8b 50 18             	mov    0x18(%eax),%edx
+c010a72b:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a72e:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags = FL_IF;
+c010a731:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a734:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+    ret = 0;
+c010a73b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c010a742:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a745:	eb 23                	jmp    c010a76a <load_icode+0x660>
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c010a747:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a74a:	89 04 24             	mov    %eax,(%esp)
+c010a74d:	e8 32 de ff ff       	call   c0108584 <exit_mmap>
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c010a752:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a755:	89 04 24             	mov    %eax,(%esp)
+c010a758:	e8 d2 f4 ff ff       	call   c0109c2f <put_pgdir>
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010a75d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a760:	89 04 24             	mov    %eax,(%esp)
+c010a763:	e8 5d db ff ff       	call   c01082c5 <mm_destroy>
+bad_mm:
+    goto out;
+c010a768:	eb d8                	jmp    c010a742 <load_icode+0x638>
+}
+c010a76a:	c9                   	leave  
+c010a76b:	c3                   	ret    
+
+c010a76c <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+c010a76c:	55                   	push   %ebp
+c010a76d:	89 e5                	mov    %esp,%ebp
+c010a76f:	83 ec 38             	sub    $0x38,%esp
+    struct mm_struct *mm = current->mm;
+c010a772:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a777:	8b 40 18             	mov    0x18(%eax),%eax
+c010a77a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+c010a77d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a780:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010a787:	00 
+c010a788:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a78b:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a78f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a793:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a796:	89 04 24             	mov    %eax,(%esp)
+c010a799:	e8 8a e8 ff ff       	call   c0109028 <user_mem_check>
+c010a79e:	85 c0                	test   %eax,%eax
+c010a7a0:	75 0a                	jne    c010a7ac <do_execve+0x40>
+        return -E_INVAL;
+c010a7a2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010a7a7:	e9 f4 00 00 00       	jmp    c010a8a0 <do_execve+0x134>
+    }
+    if (len > PROC_NAME_LEN) {
+c010a7ac:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
+c010a7b0:	76 07                	jbe    c010a7b9 <do_execve+0x4d>
+        len = PROC_NAME_LEN;
+c010a7b2:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c010a7b9:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c010a7c0:	00 
+c010a7c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a7c8:	00 
+c010a7c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010a7cc:	89 04 24             	mov    %eax,(%esp)
+c010a7cf:	e8 36 15 00 00       	call   c010bd0a <memset>
+    memcpy(local_name, name, len);
+c010a7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a7d7:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a7db:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7de:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a7e2:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010a7e5:	89 04 24             	mov    %eax,(%esp)
+c010a7e8:	e8 ff 15 00 00       	call   c010bdec <memcpy>
+
+    if (mm != NULL) {
+c010a7ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a7f1:	74 4a                	je     c010a83d <do_execve+0xd1>
+        lcr3(boot_cr3);
+c010a7f3:	a1 88 10 1a c0       	mov    0xc01a1088,%eax
+c010a7f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010a7fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a7fe:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010a801:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a804:	89 04 24             	mov    %eax,(%esp)
+c010a807:	e8 12 ed ff ff       	call   c010951e <mm_count_dec>
+c010a80c:	85 c0                	test   %eax,%eax
+c010a80e:	75 21                	jne    c010a831 <do_execve+0xc5>
+            exit_mmap(mm);
+c010a810:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a813:	89 04 24             	mov    %eax,(%esp)
+c010a816:	e8 69 dd ff ff       	call   c0108584 <exit_mmap>
+            put_pgdir(mm);
+c010a81b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a81e:	89 04 24             	mov    %eax,(%esp)
+c010a821:	e8 09 f4 ff ff       	call   c0109c2f <put_pgdir>
+            mm_destroy(mm);
+c010a826:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a829:	89 04 24             	mov    %eax,(%esp)
+c010a82c:	e8 94 da ff ff       	call   c01082c5 <mm_destroy>
+        }
+        current->mm = NULL;
+c010a831:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a836:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+c010a83d:	8b 45 14             	mov    0x14(%ebp),%eax
+c010a840:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a844:	8b 45 10             	mov    0x10(%ebp),%eax
+c010a847:	89 04 24             	mov    %eax,(%esp)
+c010a84a:	e8 bb f8 ff ff       	call   c010a10a <load_icode>
+c010a84f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a852:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a856:	74 2f                	je     c010a887 <do_execve+0x11b>
+        goto execve_exit;
+c010a858:	90                   	nop
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+c010a859:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a85c:	89 04 24             	mov    %eax,(%esp)
+c010a85f:	e8 d6 f6 ff ff       	call   c0109f3a <do_exit>
+    panic("already exit: %e.\n", ret);
+c010a864:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a867:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a86b:	c7 44 24 08 4b e1 10 	movl   $0xc010e14b,0x8(%esp)
+c010a872:	c0 
+c010a873:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
+c010a87a:	00 
+c010a87b:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a882:	e8 5a 65 ff ff       	call   c0100de1 <__panic>
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c010a887:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a88c:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010a88f:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a893:	89 04 24             	mov    %eax,(%esp)
+c010a896:	e8 c6 ed ff ff       	call   c0109661 <set_proc_name>
+    return 0;
+c010a89b:	b8 00 00 00 00       	mov    $0x0,%eax
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+c010a8a0:	c9                   	leave  
+c010a8a1:	c3                   	ret    
+
+c010a8a2 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+c010a8a2:	55                   	push   %ebp
+c010a8a3:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c010a8a5:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a8aa:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c010a8b1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a8b6:	5d                   	pop    %ebp
+c010a8b7:	c3                   	ret    
+
+c010a8b8 <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+c010a8b8:	55                   	push   %ebp
+c010a8b9:	89 e5                	mov    %esp,%ebp
+c010a8bb:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = current->mm;
+c010a8be:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a8c3:	8b 40 18             	mov    0x18(%eax),%eax
+c010a8c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL) {
+c010a8c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010a8cd:	74 30                	je     c010a8ff <do_wait+0x47>
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+c010a8cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a8d2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c010a8d9:	00 
+c010a8da:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+c010a8e1:	00 
+c010a8e2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a8e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8e9:	89 04 24             	mov    %eax,(%esp)
+c010a8ec:	e8 37 e7 ff ff       	call   c0109028 <user_mem_check>
+c010a8f1:	85 c0                	test   %eax,%eax
+c010a8f3:	75 0a                	jne    c010a8ff <do_wait+0x47>
+            return -E_INVAL;
+c010a8f5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010a8fa:	e9 4b 01 00 00       	jmp    c010aa4a <do_wait+0x192>
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+c010a8ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0) {
+c010a906:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a90a:	74 39                	je     c010a945 <do_wait+0x8d>
+        proc = find_proc(pid);
+c010a90c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a90f:	89 04 24             	mov    %eax,(%esp)
+c010a912:	e8 2b f1 ff ff       	call   c0109a42 <find_proc>
+c010a917:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current) {
+c010a91a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a91e:	74 54                	je     c010a974 <do_wait+0xbc>
+c010a920:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a923:	8b 50 14             	mov    0x14(%eax),%edx
+c010a926:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a92b:	39 c2                	cmp    %eax,%edx
+c010a92d:	75 45                	jne    c010a974 <do_wait+0xbc>
+            haskid = 1;
+c010a92f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010a936:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a939:	8b 00                	mov    (%eax),%eax
+c010a93b:	83 f8 03             	cmp    $0x3,%eax
+c010a93e:	75 34                	jne    c010a974 <do_wait+0xbc>
+                goto found;
+c010a940:	e9 80 00 00 00       	jmp    c010a9c5 <do_wait+0x10d>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+c010a945:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a94a:	8b 40 70             	mov    0x70(%eax),%eax
+c010a94d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr) {
+c010a950:	eb 1c                	jmp    c010a96e <do_wait+0xb6>
+            haskid = 1;
+c010a952:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010a959:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a95c:	8b 00                	mov    (%eax),%eax
+c010a95e:	83 f8 03             	cmp    $0x3,%eax
+c010a961:	75 02                	jne    c010a965 <do_wait+0xad>
+                goto found;
+c010a963:	eb 60                	jmp    c010a9c5 <do_wait+0x10d>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+c010a965:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a968:	8b 40 78             	mov    0x78(%eax),%eax
+c010a96b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a96e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a972:	75 de                	jne    c010a952 <do_wait+0x9a>
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+c010a974:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a978:	74 41                	je     c010a9bb <do_wait+0x103>
+        current->state = PROC_SLEEPING;
+c010a97a:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a97f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010a985:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a98a:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
+        schedule();
+c010a991:	e8 09 06 00 00       	call   c010af9f <schedule>
+        if (current->flags & PF_EXITING) {
+c010a996:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010a99b:	8b 40 44             	mov    0x44(%eax),%eax
+c010a99e:	83 e0 01             	and    $0x1,%eax
+c010a9a1:	85 c0                	test   %eax,%eax
+c010a9a3:	74 11                	je     c010a9b6 <do_wait+0xfe>
+            do_exit(-E_KILLED);
+c010a9a5:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c010a9ac:	e8 89 f5 ff ff       	call   c0109f3a <do_exit>
+        }
+        goto repeat;
+c010a9b1:	e9 49 ff ff ff       	jmp    c010a8ff <do_wait+0x47>
+c010a9b6:	e9 44 ff ff ff       	jmp    c010a8ff <do_wait+0x47>
+    }
+    return -E_BAD_PROC;
+c010a9bb:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010a9c0:	e9 85 00 00 00       	jmp    c010aa4a <do_wait+0x192>
+
+found:
+    if (proc == idleproc || proc == initproc) {
+c010a9c5:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010a9ca:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010a9cd:	74 0a                	je     c010a9d9 <do_wait+0x121>
+c010a9cf:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010a9d4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010a9d7:	75 1c                	jne    c010a9f5 <do_wait+0x13d>
+        panic("wait idleproc or initproc.\n");
+c010a9d9:	c7 44 24 08 5e e1 10 	movl   $0xc010e15e,0x8(%esp)
+c010a9e0:	c0 
+c010a9e1:	c7 44 24 04 f1 02 00 	movl   $0x2f1,0x4(%esp)
+c010a9e8:	00 
+c010a9e9:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010a9f0:	e8 ec 63 ff ff       	call   c0100de1 <__panic>
+    }
+    if (code_store != NULL) {
+c010a9f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010a9f9:	74 0b                	je     c010aa06 <do_wait+0x14e>
+        *code_store = proc->exit_code;
+c010a9fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a9fe:	8b 50 68             	mov    0x68(%eax),%edx
+c010aa01:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aa04:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010aa06:	e8 33 e9 ff ff       	call   c010933e <__intr_save>
+c010aa0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010aa0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa11:	89 04 24             	mov    %eax,(%esp)
+c010aa14:	e8 f6 ef ff ff       	call   c0109a0f <unhash_proc>
+        remove_links(proc);
+c010aa19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa1c:	89 04 24             	mov    %eax,(%esp)
+c010aa1f:	e8 67 ed ff ff       	call   c010978b <remove_links>
+    }
+    local_intr_restore(intr_flag);
+c010aa24:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010aa27:	89 04 24             	mov    %eax,(%esp)
+c010aa2a:	e8 39 e9 ff ff       	call   c0109368 <__intr_restore>
+    put_kstack(proc);
+c010aa2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa32:	89 04 24             	mov    %eax,(%esp)
+c010aa35:	e8 28 f1 ff ff       	call   c0109b62 <put_kstack>
+    kfree(proc);
+c010aa3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa3d:	89 04 24             	mov    %eax,(%esp)
+c010aa40:	e8 c5 a2 ff ff       	call   c0104d0a <kfree>
+    return 0;
+c010aa45:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aa4a:	c9                   	leave  
+c010aa4b:	c3                   	ret    
+
+c010aa4c <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+c010aa4c:	55                   	push   %ebp
+c010aa4d:	89 e5                	mov    %esp,%ebp
+c010aa4f:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+c010aa52:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa55:	89 04 24             	mov    %eax,(%esp)
+c010aa58:	e8 e5 ef ff ff       	call   c0109a42 <find_proc>
+c010aa5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010aa60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010aa64:	74 41                	je     c010aaa7 <do_kill+0x5b>
+        if (!(proc->flags & PF_EXITING)) {
+c010aa66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa69:	8b 40 44             	mov    0x44(%eax),%eax
+c010aa6c:	83 e0 01             	and    $0x1,%eax
+c010aa6f:	85 c0                	test   %eax,%eax
+c010aa71:	75 2d                	jne    c010aaa0 <do_kill+0x54>
+            proc->flags |= PF_EXITING;
+c010aa73:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa76:	8b 40 44             	mov    0x44(%eax),%eax
+c010aa79:	83 c8 01             	or     $0x1,%eax
+c010aa7c:	89 c2                	mov    %eax,%edx
+c010aa7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa81:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED) {
+c010aa84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa87:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010aa8a:	85 c0                	test   %eax,%eax
+c010aa8c:	79 0b                	jns    c010aa99 <do_kill+0x4d>
+                wakeup_proc(proc);
+c010aa8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa91:	89 04 24             	mov    %eax,(%esp)
+c010aa94:	e8 82 04 00 00       	call   c010af1b <wakeup_proc>
+            }
+            return 0;
+c010aa99:	b8 00 00 00 00       	mov    $0x0,%eax
+c010aa9e:	eb 0c                	jmp    c010aaac <do_kill+0x60>
+        }
+        return -E_KILLED;
+c010aaa0:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010aaa5:	eb 05                	jmp    c010aaac <do_kill+0x60>
+    }
+    return -E_INVAL;
+c010aaa7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010aaac:	c9                   	leave  
+c010aaad:	c3                   	ret    
+
+c010aaae <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+c010aaae:	55                   	push   %ebp
+c010aaaf:	89 e5                	mov    %esp,%ebp
+c010aab1:	57                   	push   %edi
+c010aab2:	56                   	push   %esi
+c010aab3:	53                   	push   %ebx
+c010aab4:	83 ec 2c             	sub    $0x2c,%esp
+    int ret, len = strlen(name);
+c010aab7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aaba:	89 04 24             	mov    %eax,(%esp)
+c010aabd:	e8 19 0f 00 00       	call   c010b9db <strlen>
+c010aac2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile (
+c010aac5:	b8 04 00 00 00       	mov    $0x4,%eax
+c010aaca:	8b 55 08             	mov    0x8(%ebp),%edx
+c010aacd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010aad0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010aad3:	8b 75 10             	mov    0x10(%ebp),%esi
+c010aad6:	89 f7                	mov    %esi,%edi
+c010aad8:	cd 80                	int    $0x80
+c010aada:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+c010aadd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010aae0:	83 c4 2c             	add    $0x2c,%esp
+c010aae3:	5b                   	pop    %ebx
+c010aae4:	5e                   	pop    %esi
+c010aae5:	5f                   	pop    %edi
+c010aae6:	5d                   	pop    %ebp
+c010aae7:	c3                   	ret    
+
+c010aae8 <user_main>:
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+c010aae8:	55                   	push   %ebp
+c010aae9:	89 e5                	mov    %esp,%ebp
+c010aaeb:	83 ec 18             	sub    $0x18,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010aaee:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010aaf3:	8b 40 04             	mov    0x4(%eax),%eax
+c010aaf6:	c7 44 24 08 7a e1 10 	movl   $0xc010e17a,0x8(%esp)
+c010aafd:	c0 
+c010aafe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ab02:	c7 04 24 84 e1 10 c0 	movl   $0xc010e184,(%esp)
+c010ab09:	e8 51 58 ff ff       	call   c010035f <cprintf>
+c010ab0e:	b8 e2 78 00 00       	mov    $0x78e2,%eax
+c010ab13:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010ab17:	c7 44 24 04 79 f8 15 	movl   $0xc015f879,0x4(%esp)
+c010ab1e:	c0 
+c010ab1f:	c7 04 24 7a e1 10 c0 	movl   $0xc010e17a,(%esp)
+c010ab26:	e8 83 ff ff ff       	call   c010aaae <kernel_execve>
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010ab2b:	c7 44 24 08 ab e1 10 	movl   $0xc010e1ab,0x8(%esp)
+c010ab32:	c0 
+c010ab33:	c7 44 24 04 3a 03 00 	movl   $0x33a,0x4(%esp)
+c010ab3a:	00 
+c010ab3b:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ab42:	e8 9a 62 ff ff       	call   c0100de1 <__panic>
+
+c010ab47 <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+c010ab47:	55                   	push   %ebp
+c010ab48:	89 e5                	mov    %esp,%ebp
+c010ab4a:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010ab4d:	e8 af a6 ff ff       	call   c0105201 <nr_free_pages>
+c010ab52:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010ab55:	e8 78 a0 ff ff       	call   c0104bd2 <kallocated>
+c010ab5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010ab5d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010ab64:	00 
+c010ab65:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010ab6c:	00 
+c010ab6d:	c7 04 24 e8 aa 10 c0 	movl   $0xc010aae8,(%esp)
+c010ab74:	e8 3b ef ff ff       	call   c0109ab4 <kernel_thread>
+c010ab79:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010ab7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010ab80:	7f 1c                	jg     c010ab9e <init_main+0x57>
+        panic("create user_main failed.\n");
+c010ab82:	c7 44 24 08 c5 e1 10 	movl   $0xc010e1c5,0x8(%esp)
+c010ab89:	c0 
+c010ab8a:	c7 44 24 04 45 03 00 	movl   $0x345,0x4(%esp)
+c010ab91:	00 
+c010ab92:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ab99:	e8 43 62 ff ff       	call   c0100de1 <__panic>
+    }
+
+    while (do_wait(0, NULL) == 0) {
+c010ab9e:	eb 05                	jmp    c010aba5 <init_main+0x5e>
+        schedule();
+c010aba0:	e8 fa 03 00 00       	call   c010af9f <schedule>
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+c010aba5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010abac:	00 
+c010abad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010abb4:	e8 ff fc ff ff       	call   c010a8b8 <do_wait>
+c010abb9:	85 c0                	test   %eax,%eax
+c010abbb:	74 e3                	je     c010aba0 <init_main+0x59>
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010abbd:	c7 04 24 e0 e1 10 c0 	movl   $0xc010e1e0,(%esp)
+c010abc4:	e8 96 57 ff ff       	call   c010035f <cprintf>
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010abc9:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010abce:	8b 40 70             	mov    0x70(%eax),%eax
+c010abd1:	85 c0                	test   %eax,%eax
+c010abd3:	75 18                	jne    c010abed <init_main+0xa6>
+c010abd5:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010abda:	8b 40 74             	mov    0x74(%eax),%eax
+c010abdd:	85 c0                	test   %eax,%eax
+c010abdf:	75 0c                	jne    c010abed <init_main+0xa6>
+c010abe1:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010abe6:	8b 40 78             	mov    0x78(%eax),%eax
+c010abe9:	85 c0                	test   %eax,%eax
+c010abeb:	74 24                	je     c010ac11 <init_main+0xca>
+c010abed:	c7 44 24 0c 04 e2 10 	movl   $0xc010e204,0xc(%esp)
+c010abf4:	c0 
+c010abf5:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010abfc:	c0 
+c010abfd:	c7 44 24 04 4d 03 00 	movl   $0x34d,0x4(%esp)
+c010ac04:	00 
+c010ac05:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ac0c:	e8 d0 61 ff ff       	call   c0100de1 <__panic>
+    assert(nr_process == 2);
+c010ac11:	a1 60 10 1a c0       	mov    0xc01a1060,%eax
+c010ac16:	83 f8 02             	cmp    $0x2,%eax
+c010ac19:	74 24                	je     c010ac3f <init_main+0xf8>
+c010ac1b:	c7 44 24 0c 4f e2 10 	movl   $0xc010e24f,0xc(%esp)
+c010ac22:	c0 
+c010ac23:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010ac2a:	c0 
+c010ac2b:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
+c010ac32:	00 
+c010ac33:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ac3a:	e8 a2 61 ff ff       	call   c0100de1 <__panic>
+c010ac3f:	c7 45 e8 70 11 1a c0 	movl   $0xc01a1170,-0x18(%ebp)
+c010ac46:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ac49:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010ac4c:	8b 15 44 f0 19 c0    	mov    0xc019f044,%edx
+c010ac52:	83 c2 58             	add    $0x58,%edx
+c010ac55:	39 d0                	cmp    %edx,%eax
+c010ac57:	74 24                	je     c010ac7d <init_main+0x136>
+c010ac59:	c7 44 24 0c 60 e2 10 	movl   $0xc010e260,0xc(%esp)
+c010ac60:	c0 
+c010ac61:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010ac68:	c0 
+c010ac69:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
+c010ac70:	00 
+c010ac71:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ac78:	e8 64 61 ff ff       	call   c0100de1 <__panic>
+c010ac7d:	c7 45 e4 70 11 1a c0 	movl   $0xc01a1170,-0x1c(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010ac84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010ac87:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010ac89:	8b 15 44 f0 19 c0    	mov    0xc019f044,%edx
+c010ac8f:	83 c2 58             	add    $0x58,%edx
+c010ac92:	39 d0                	cmp    %edx,%eax
+c010ac94:	74 24                	je     c010acba <init_main+0x173>
+c010ac96:	c7 44 24 0c 90 e2 10 	movl   $0xc010e290,0xc(%esp)
+c010ac9d:	c0 
+c010ac9e:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010aca5:	c0 
+c010aca6:	c7 44 24 04 50 03 00 	movl   $0x350,0x4(%esp)
+c010acad:	00 
+c010acae:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010acb5:	e8 27 61 ff ff       	call   c0100de1 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010acba:	c7 04 24 c0 e2 10 c0 	movl   $0xc010e2c0,(%esp)
+c010acc1:	e8 99 56 ff ff       	call   c010035f <cprintf>
+    return 0;
+c010acc6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010accb:	c9                   	leave  
+c010accc:	c3                   	ret    
+
+c010accd <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+c010accd:	55                   	push   %ebp
+c010acce:	89 e5                	mov    %esp,%ebp
+c010acd0:	83 ec 28             	sub    $0x28,%esp
+c010acd3:	c7 45 ec 70 11 1a c0 	movl   $0xc01a1170,-0x14(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010acda:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010acdd:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010ace0:	89 50 04             	mov    %edx,0x4(%eax)
+c010ace3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ace6:	8b 50 04             	mov    0x4(%eax),%edx
+c010ace9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010acec:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010acee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010acf5:	eb 26                	jmp    c010ad1d <proc_init+0x50>
+        list_init(hash_list + i);
+c010acf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acfa:	c1 e0 03             	shl    $0x3,%eax
+c010acfd:	05 60 f0 19 c0       	add    $0xc019f060,%eax
+c010ad02:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ad05:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad08:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010ad0b:	89 50 04             	mov    %edx,0x4(%eax)
+c010ad0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad11:	8b 50 04             	mov    0x4(%eax),%edx
+c010ad14:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad17:	89 10                	mov    %edx,(%eax)
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010ad19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010ad1d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010ad24:	7e d1                	jle    c010acf7 <proc_init+0x2a>
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+c010ad26:	e8 45 e8 ff ff       	call   c0109570 <alloc_proc>
+c010ad2b:	a3 40 f0 19 c0       	mov    %eax,0xc019f040
+c010ad30:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad35:	85 c0                	test   %eax,%eax
+c010ad37:	75 1c                	jne    c010ad55 <proc_init+0x88>
+        panic("cannot alloc idleproc.\n");
+c010ad39:	c7 44 24 08 d9 e2 10 	movl   $0xc010e2d9,0x8(%esp)
+c010ad40:	c0 
+c010ad41:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
+c010ad48:	00 
+c010ad49:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ad50:	e8 8c 60 ff ff       	call   c0100de1 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010ad55:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad5a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010ad61:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad66:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010ad6c:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad71:	ba 00 80 12 c0       	mov    $0xc0128000,%edx
+c010ad76:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010ad79:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad7e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010ad85:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ad8a:	c7 44 24 04 f1 e2 10 	movl   $0xc010e2f1,0x4(%esp)
+c010ad91:	c0 
+c010ad92:	89 04 24             	mov    %eax,(%esp)
+c010ad95:	e8 c7 e8 ff ff       	call   c0109661 <set_proc_name>
+    nr_process ++;
+c010ad9a:	a1 60 10 1a c0       	mov    0xc01a1060,%eax
+c010ad9f:	83 c0 01             	add    $0x1,%eax
+c010ada2:	a3 60 10 1a c0       	mov    %eax,0xc01a1060
+
+    current = idleproc;
+c010ada7:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010adac:	a3 48 f0 19 c0       	mov    %eax,0xc019f048
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010adb1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010adb8:	00 
+c010adb9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010adc0:	00 
+c010adc1:	c7 04 24 47 ab 10 c0 	movl   $0xc010ab47,(%esp)
+c010adc8:	e8 e7 ec ff ff       	call   c0109ab4 <kernel_thread>
+c010adcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (pid <= 0) {
+c010add0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010add4:	7f 1c                	jg     c010adf2 <proc_init+0x125>
+        panic("create init_main failed.\n");
+c010add6:	c7 44 24 08 f6 e2 10 	movl   $0xc010e2f6,0x8(%esp)
+c010addd:	c0 
+c010adde:	c7 44 24 04 70 03 00 	movl   $0x370,0x4(%esp)
+c010ade5:	00 
+c010ade6:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010aded:	e8 ef 5f ff ff       	call   c0100de1 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010adf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010adf5:	89 04 24             	mov    %eax,(%esp)
+c010adf8:	e8 45 ec ff ff       	call   c0109a42 <find_proc>
+c010adfd:	a3 44 f0 19 c0       	mov    %eax,0xc019f044
+    set_proc_name(initproc, "init");
+c010ae02:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010ae07:	c7 44 24 04 10 e3 10 	movl   $0xc010e310,0x4(%esp)
+c010ae0e:	c0 
+c010ae0f:	89 04 24             	mov    %eax,(%esp)
+c010ae12:	e8 4a e8 ff ff       	call   c0109661 <set_proc_name>
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010ae17:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ae1c:	85 c0                	test   %eax,%eax
+c010ae1e:	74 0c                	je     c010ae2c <proc_init+0x15f>
+c010ae20:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010ae25:	8b 40 04             	mov    0x4(%eax),%eax
+c010ae28:	85 c0                	test   %eax,%eax
+c010ae2a:	74 24                	je     c010ae50 <proc_init+0x183>
+c010ae2c:	c7 44 24 0c 18 e3 10 	movl   $0xc010e318,0xc(%esp)
+c010ae33:	c0 
+c010ae34:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010ae3b:	c0 
+c010ae3c:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
+c010ae43:	00 
+c010ae44:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ae4b:	e8 91 5f ff ff       	call   c0100de1 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010ae50:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010ae55:	85 c0                	test   %eax,%eax
+c010ae57:	74 0d                	je     c010ae66 <proc_init+0x199>
+c010ae59:	a1 44 f0 19 c0       	mov    0xc019f044,%eax
+c010ae5e:	8b 40 04             	mov    0x4(%eax),%eax
+c010ae61:	83 f8 01             	cmp    $0x1,%eax
+c010ae64:	74 24                	je     c010ae8a <proc_init+0x1bd>
+c010ae66:	c7 44 24 0c 40 e3 10 	movl   $0xc010e340,0xc(%esp)
+c010ae6d:	c0 
+c010ae6e:	c7 44 24 08 25 e0 10 	movl   $0xc010e025,0x8(%esp)
+c010ae75:	c0 
+c010ae76:	c7 44 24 04 77 03 00 	movl   $0x377,0x4(%esp)
+c010ae7d:	00 
+c010ae7e:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
+c010ae85:	e8 57 5f ff ff       	call   c0100de1 <__panic>
+}
+c010ae8a:	c9                   	leave  
+c010ae8b:	c3                   	ret    
+
+c010ae8c <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+c010ae8c:	55                   	push   %ebp
+c010ae8d:	89 e5                	mov    %esp,%ebp
+c010ae8f:	83 ec 08             	sub    $0x8,%esp
+    while (1) {
+        if (current->need_resched) {
+c010ae92:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010ae97:	8b 40 10             	mov    0x10(%eax),%eax
+c010ae9a:	85 c0                	test   %eax,%eax
+c010ae9c:	74 07                	je     c010aea5 <cpu_idle+0x19>
+            schedule();
+c010ae9e:	e8 fc 00 00 00       	call   c010af9f <schedule>
+        }
+    }
+c010aea3:	eb ed                	jmp    c010ae92 <cpu_idle+0x6>
+c010aea5:	eb eb                	jmp    c010ae92 <cpu_idle+0x6>
+
+c010aea7 <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c010aea7:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c010aeab:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c010aead:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c010aeb0:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c010aeb3:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c010aeb6:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c010aeb9:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c010aebc:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c010aebf:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c010aec2:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c010aec6:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c010aec9:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c010aecc:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c010aecf:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c010aed2:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c010aed5:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c010aed8:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c010aedb:	ff 30                	pushl  (%eax)
+
+    ret
+c010aedd:	c3                   	ret    
+
+c010aede <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010aede:	55                   	push   %ebp
+c010aedf:	89 e5                	mov    %esp,%ebp
+c010aee1:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010aee4:	9c                   	pushf  
+c010aee5:	58                   	pop    %eax
+c010aee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010aee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010aeec:	25 00 02 00 00       	and    $0x200,%eax
+c010aef1:	85 c0                	test   %eax,%eax
+c010aef3:	74 0c                	je     c010af01 <__intr_save+0x23>
+        intr_disable();
+c010aef5:	e8 50 71 ff ff       	call   c010204a <intr_disable>
+        return 1;
+c010aefa:	b8 01 00 00 00       	mov    $0x1,%eax
+c010aeff:	eb 05                	jmp    c010af06 <__intr_save+0x28>
+    }
+    return 0;
+c010af01:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010af06:	c9                   	leave  
+c010af07:	c3                   	ret    
+
+c010af08 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010af08:	55                   	push   %ebp
+c010af09:	89 e5                	mov    %esp,%ebp
+c010af0b:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010af0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010af12:	74 05                	je     c010af19 <__intr_restore+0x11>
+        intr_enable();
+c010af14:	e8 2b 71 ff ff       	call   c0102044 <intr_enable>
+    }
+}
+c010af19:	c9                   	leave  
+c010af1a:	c3                   	ret    
+
+c010af1b <wakeup_proc>:
+#include <proc.h>
+#include <sched.h>
+#include <assert.h>
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010af1b:	55                   	push   %ebp
+c010af1c:	89 e5                	mov    %esp,%ebp
+c010af1e:	83 ec 28             	sub    $0x28,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010af21:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af24:	8b 00                	mov    (%eax),%eax
+c010af26:	83 f8 03             	cmp    $0x3,%eax
+c010af29:	75 24                	jne    c010af4f <wakeup_proc+0x34>
+c010af2b:	c7 44 24 0c 67 e3 10 	movl   $0xc010e367,0xc(%esp)
+c010af32:	c0 
+c010af33:	c7 44 24 08 82 e3 10 	movl   $0xc010e382,0x8(%esp)
+c010af3a:	c0 
+c010af3b:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+c010af42:	00 
+c010af43:	c7 04 24 97 e3 10 c0 	movl   $0xc010e397,(%esp)
+c010af4a:	e8 92 5e ff ff       	call   c0100de1 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010af4f:	e8 8a ff ff ff       	call   c010aede <__intr_save>
+c010af54:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010af57:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af5a:	8b 00                	mov    (%eax),%eax
+c010af5c:	83 f8 02             	cmp    $0x2,%eax
+c010af5f:	74 15                	je     c010af76 <wakeup_proc+0x5b>
+            proc->state = PROC_RUNNABLE;
+c010af61:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af64:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010af6a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af6d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+c010af74:	eb 1c                	jmp    c010af92 <wakeup_proc+0x77>
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010af76:	c7 44 24 08 ad e3 10 	movl   $0xc010e3ad,0x8(%esp)
+c010af7d:	c0 
+c010af7e:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+c010af85:	00 
+c010af86:	c7 04 24 97 e3 10 c0 	movl   $0xc010e397,(%esp)
+c010af8d:	e8 cc 5e ff ff       	call   c0100e5e <__warn>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010af92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010af95:	89 04 24             	mov    %eax,(%esp)
+c010af98:	e8 6b ff ff ff       	call   c010af08 <__intr_restore>
+}
+c010af9d:	c9                   	leave  
+c010af9e:	c3                   	ret    
+
+c010af9f <schedule>:
+
+void
+schedule(void) {
+c010af9f:	55                   	push   %ebp
+c010afa0:	89 e5                	mov    %esp,%ebp
+c010afa2:	83 ec 38             	sub    $0x38,%esp
+    bool intr_flag;
+    list_entry_t *le, *last;
+    struct proc_struct *next = NULL;
+c010afa5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    local_intr_save(intr_flag);
+c010afac:	e8 2d ff ff ff       	call   c010aede <__intr_save>
+c010afb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        current->need_resched = 0;
+c010afb4:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010afb9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        last = (current == idleproc) ? &proc_list : &(current->list_link);
+c010afc0:	8b 15 48 f0 19 c0    	mov    0xc019f048,%edx
+c010afc6:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010afcb:	39 c2                	cmp    %eax,%edx
+c010afcd:	74 0a                	je     c010afd9 <schedule+0x3a>
+c010afcf:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010afd4:	83 c0 58             	add    $0x58,%eax
+c010afd7:	eb 05                	jmp    c010afde <schedule+0x3f>
+c010afd9:	b8 70 11 1a c0       	mov    $0xc01a1170,%eax
+c010afde:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        le = last;
+c010afe1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010afe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010afe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010afea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010afed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010aff0:	8b 40 04             	mov    0x4(%eax),%eax
+        do {
+            if ((le = list_next(le)) != &proc_list) {
+c010aff3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010aff6:	81 7d f4 70 11 1a c0 	cmpl   $0xc01a1170,-0xc(%ebp)
+c010affd:	74 15                	je     c010b014 <schedule+0x75>
+                next = le2proc(le, list_link);
+c010afff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b002:	83 e8 58             	sub    $0x58,%eax
+c010b005:	89 45 f0             	mov    %eax,-0x10(%ebp)
+                if (next->state == PROC_RUNNABLE) {
+c010b008:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b00b:	8b 00                	mov    (%eax),%eax
+c010b00d:	83 f8 02             	cmp    $0x2,%eax
+c010b010:	75 02                	jne    c010b014 <schedule+0x75>
+                    break;
+c010b012:	eb 08                	jmp    c010b01c <schedule+0x7d>
+                }
+            }
+        } while (le != last);
+c010b014:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b017:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+c010b01a:	75 cb                	jne    c010afe7 <schedule+0x48>
+        if (next == NULL || next->state != PROC_RUNNABLE) {
+c010b01c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b020:	74 0a                	je     c010b02c <schedule+0x8d>
+c010b022:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b025:	8b 00                	mov    (%eax),%eax
+c010b027:	83 f8 02             	cmp    $0x2,%eax
+c010b02a:	74 08                	je     c010b034 <schedule+0x95>
+            next = idleproc;
+c010b02c:	a1 40 f0 19 c0       	mov    0xc019f040,%eax
+c010b031:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        next->runs ++;
+c010b034:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b037:	8b 40 08             	mov    0x8(%eax),%eax
+c010b03a:	8d 50 01             	lea    0x1(%eax),%edx
+c010b03d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b040:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010b043:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b048:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010b04b:	74 0b                	je     c010b058 <schedule+0xb9>
+            proc_run(next);
+c010b04d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b050:	89 04 24             	mov    %eax,(%esp)
+c010b053:	e8 ae e8 ff ff       	call   c0109906 <proc_run>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b058:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b05b:	89 04 24             	mov    %eax,(%esp)
+c010b05e:	e8 a5 fe ff ff       	call   c010af08 <__intr_restore>
+}
+c010b063:	c9                   	leave  
+c010b064:	c3                   	ret    
+
+c010b065 <sys_exit>:
+#include <stdio.h>
+#include <pmm.h>
+#include <assert.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010b065:	55                   	push   %ebp
+c010b066:	89 e5                	mov    %esp,%ebp
+c010b068:	83 ec 28             	sub    $0x28,%esp
+    int error_code = (int)arg[0];
+c010b06b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b06e:	8b 00                	mov    (%eax),%eax
+c010b070:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010b073:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b076:	89 04 24             	mov    %eax,(%esp)
+c010b079:	e8 bc ee ff ff       	call   c0109f3a <do_exit>
+}
+c010b07e:	c9                   	leave  
+c010b07f:	c3                   	ret    
+
+c010b080 <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010b080:	55                   	push   %ebp
+c010b081:	89 e5                	mov    %esp,%ebp
+c010b083:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010b086:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b08b:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b08e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010b091:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b094:	8b 40 44             	mov    0x44(%eax),%eax
+c010b097:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010b09a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b09d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b0a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0a4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b0a8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010b0af:	e8 95 ed ff ff       	call   c0109e49 <do_fork>
+}
+c010b0b4:	c9                   	leave  
+c010b0b5:	c3                   	ret    
+
+c010b0b6 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010b0b6:	55                   	push   %ebp
+c010b0b7:	89 e5                	mov    %esp,%ebp
+c010b0b9:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b0bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0bf:	8b 00                	mov    (%eax),%eax
+c010b0c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010b0c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0c7:	83 c0 04             	add    $0x4,%eax
+c010b0ca:	8b 00                	mov    (%eax),%eax
+c010b0cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010b0cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0d2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b0d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b0d9:	89 04 24             	mov    %eax,(%esp)
+c010b0dc:	e8 d7 f7 ff ff       	call   c010a8b8 <do_wait>
+}
+c010b0e1:	c9                   	leave  
+c010b0e2:	c3                   	ret    
+
+c010b0e3 <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010b0e3:	55                   	push   %ebp
+c010b0e4:	89 e5                	mov    %esp,%ebp
+c010b0e6:	83 ec 28             	sub    $0x28,%esp
+    const char *name = (const char *)arg[0];
+c010b0e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0ec:	8b 00                	mov    (%eax),%eax
+c010b0ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010b0f1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0f4:	8b 40 04             	mov    0x4(%eax),%eax
+c010b0f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010b0fa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0fd:	83 c0 08             	add    $0x8,%eax
+c010b100:	8b 00                	mov    (%eax),%eax
+c010b102:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010b105:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b108:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b10b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010b10e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b111:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b115:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b118:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b11c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b11f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b123:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b126:	89 04 24             	mov    %eax,(%esp)
+c010b129:	e8 3e f6 ff ff       	call   c010a76c <do_execve>
+}
+c010b12e:	c9                   	leave  
+c010b12f:	c3                   	ret    
+
+c010b130 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010b130:	55                   	push   %ebp
+c010b131:	89 e5                	mov    %esp,%ebp
+c010b133:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010b136:	e8 67 f7 ff ff       	call   c010a8a2 <do_yield>
+}
+c010b13b:	c9                   	leave  
+c010b13c:	c3                   	ret    
+
+c010b13d <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010b13d:	55                   	push   %ebp
+c010b13e:	89 e5                	mov    %esp,%ebp
+c010b140:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b143:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b146:	8b 00                	mov    (%eax),%eax
+c010b148:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010b14b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b14e:	89 04 24             	mov    %eax,(%esp)
+c010b151:	e8 f6 f8 ff ff       	call   c010aa4c <do_kill>
+}
+c010b156:	c9                   	leave  
+c010b157:	c3                   	ret    
+
+c010b158 <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010b158:	55                   	push   %ebp
+c010b159:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010b15b:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b160:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010b163:	5d                   	pop    %ebp
+c010b164:	c3                   	ret    
+
+c010b165 <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010b165:	55                   	push   %ebp
+c010b166:	89 e5                	mov    %esp,%ebp
+c010b168:	83 ec 28             	sub    $0x28,%esp
+    int c = (int)arg[0];
+c010b16b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b16e:	8b 00                	mov    (%eax),%eax
+c010b170:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010b173:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b176:	89 04 24             	mov    %eax,(%esp)
+c010b179:	e8 07 52 ff ff       	call   c0100385 <cputchar>
+    return 0;
+c010b17e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b183:	c9                   	leave  
+c010b184:	c3                   	ret    
+
+c010b185 <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010b185:	55                   	push   %ebp
+c010b186:	89 e5                	mov    %esp,%ebp
+c010b188:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010b18b:	e8 3c ba ff ff       	call   c0106bcc <print_pgdir>
+    return 0;
+c010b190:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b195:	c9                   	leave  
+c010b196:	c3                   	ret    
+
+c010b197 <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010b197:	55                   	push   %ebp
+c010b198:	89 e5                	mov    %esp,%ebp
+c010b19a:	83 ec 48             	sub    $0x48,%esp
+    struct trapframe *tf = current->tf;
+c010b19d:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b1a2:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b1a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010b1a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1ab:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010b1ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010b1b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b1b5:	78 5e                	js     c010b215 <syscall+0x7e>
+c010b1b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b1ba:	83 f8 1f             	cmp    $0x1f,%eax
+c010b1bd:	77 56                	ja     c010b215 <syscall+0x7e>
+        if (syscalls[num] != NULL) {
+c010b1bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b1c2:	8b 04 85 a0 aa 12 c0 	mov    -0x3fed5560(,%eax,4),%eax
+c010b1c9:	85 c0                	test   %eax,%eax
+c010b1cb:	74 48                	je     c010b215 <syscall+0x7e>
+            arg[0] = tf->tf_regs.reg_edx;
+c010b1cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1d0:	8b 40 14             	mov    0x14(%eax),%eax
+c010b1d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010b1d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1d9:	8b 40 18             	mov    0x18(%eax),%eax
+c010b1dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010b1df:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1e2:	8b 40 10             	mov    0x10(%eax),%eax
+c010b1e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010b1e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1eb:	8b 00                	mov    (%eax),%eax
+c010b1ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010b1f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1f3:	8b 40 04             	mov    0x4(%eax),%eax
+c010b1f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010b1f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b1fc:	8b 04 85 a0 aa 12 c0 	mov    -0x3fed5560(,%eax,4),%eax
+c010b203:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010b206:	89 14 24             	mov    %edx,(%esp)
+c010b209:	ff d0                	call   *%eax
+c010b20b:	89 c2                	mov    %eax,%edx
+c010b20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b210:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010b213:	eb 46                	jmp    c010b25b <syscall+0xc4>
+        }
+    }
+    print_trapframe(tf);
+c010b215:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b218:	89 04 24             	mov    %eax,(%esp)
+c010b21b:	e8 e8 71 ff ff       	call   c0102408 <print_trapframe>
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010b220:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b225:	8d 50 48             	lea    0x48(%eax),%edx
+c010b228:	a1 48 f0 19 c0       	mov    0xc019f048,%eax
+c010b22d:	8b 40 04             	mov    0x4(%eax),%eax
+c010b230:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010b234:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010b238:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b23b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b23f:	c7 44 24 08 c8 e3 10 	movl   $0xc010e3c8,0x8(%esp)
+c010b246:	c0 
+c010b247:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
+c010b24e:	00 
+c010b24f:	c7 04 24 f4 e3 10 c0 	movl   $0xc010e3f4,(%esp)
+c010b256:	e8 86 5b ff ff       	call   c0100de1 <__panic>
+            num, current->pid, current->name);
+}
+c010b25b:	c9                   	leave  
+c010b25c:	c3                   	ret    
+
+c010b25d <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010b25d:	55                   	push   %ebp
+c010b25e:	89 e5                	mov    %esp,%ebp
+c010b260:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010b263:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b266:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010b26c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010b26f:	b8 20 00 00 00       	mov    $0x20,%eax
+c010b274:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010b277:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b27a:	89 c1                	mov    %eax,%ecx
+c010b27c:	d3 ea                	shr    %cl,%edx
+c010b27e:	89 d0                	mov    %edx,%eax
+}
+c010b280:	c9                   	leave  
+c010b281:	c3                   	ret    
+
+c010b282 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010b282:	55                   	push   %ebp
+c010b283:	89 e5                	mov    %esp,%ebp
+c010b285:	83 ec 58             	sub    $0x58,%esp
+c010b288:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b28b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010b28e:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b291:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010b294:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b297:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b29a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b29d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010b2a0:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b2a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b2a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b2a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b2ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b2af:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010b2b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b2b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b2b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b2bc:	74 1c                	je     c010b2da <printnum+0x58>
+c010b2be:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b2c1:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b2c6:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b2c9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010b2cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b2cf:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b2d4:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b2d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b2da:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b2dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b2e0:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b2e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b2e6:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010b2e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b2ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b2ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b2f2:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010b2f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b2f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010b2fb:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b2fe:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b303:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b306:	77 56                	ja     c010b35e <printnum+0xdc>
+c010b308:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b30b:	72 05                	jb     c010b312 <printnum+0x90>
+c010b30d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010b310:	77 4c                	ja     c010b35e <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010b312:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010b315:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b318:	8b 45 20             	mov    0x20(%ebp),%eax
+c010b31b:	89 44 24 18          	mov    %eax,0x18(%esp)
+c010b31f:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010b323:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b326:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010b32a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b32d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b330:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b334:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010b338:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b33b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b33f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b342:	89 04 24             	mov    %eax,(%esp)
+c010b345:	e8 38 ff ff ff       	call   c010b282 <printnum>
+c010b34a:	eb 1c                	jmp    c010b368 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010b34c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b34f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b353:	8b 45 20             	mov    0x20(%ebp),%eax
+c010b356:	89 04 24             	mov    %eax,(%esp)
+c010b359:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b35c:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010b35e:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c010b362:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010b366:	7f e4                	jg     c010b34c <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010b368:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b36b:	05 24 e5 10 c0       	add    $0xc010e524,%eax
+c010b370:	0f b6 00             	movzbl (%eax),%eax
+c010b373:	0f be c0             	movsbl %al,%eax
+c010b376:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b379:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b37d:	89 04 24             	mov    %eax,(%esp)
+c010b380:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b383:	ff d0                	call   *%eax
+}
+c010b385:	c9                   	leave  
+c010b386:	c3                   	ret    
+
+c010b387 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010b387:	55                   	push   %ebp
+c010b388:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b38a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b38e:	7e 14                	jle    c010b3a4 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010b390:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b393:	8b 00                	mov    (%eax),%eax
+c010b395:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b398:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b39b:	89 0a                	mov    %ecx,(%edx)
+c010b39d:	8b 50 04             	mov    0x4(%eax),%edx
+c010b3a0:	8b 00                	mov    (%eax),%eax
+c010b3a2:	eb 30                	jmp    c010b3d4 <getuint+0x4d>
+    }
+    else if (lflag) {
+c010b3a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b3a8:	74 16                	je     c010b3c0 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010b3aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3ad:	8b 00                	mov    (%eax),%eax
+c010b3af:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b3b2:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b3b5:	89 0a                	mov    %ecx,(%edx)
+c010b3b7:	8b 00                	mov    (%eax),%eax
+c010b3b9:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b3be:	eb 14                	jmp    c010b3d4 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010b3c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3c3:	8b 00                	mov    (%eax),%eax
+c010b3c5:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b3c8:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b3cb:	89 0a                	mov    %ecx,(%edx)
+c010b3cd:	8b 00                	mov    (%eax),%eax
+c010b3cf:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010b3d4:	5d                   	pop    %ebp
+c010b3d5:	c3                   	ret    
+
+c010b3d6 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010b3d6:	55                   	push   %ebp
+c010b3d7:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b3d9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b3dd:	7e 14                	jle    c010b3f3 <getint+0x1d>
+        return va_arg(*ap, long long);
+c010b3df:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3e2:	8b 00                	mov    (%eax),%eax
+c010b3e4:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b3e7:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b3ea:	89 0a                	mov    %ecx,(%edx)
+c010b3ec:	8b 50 04             	mov    0x4(%eax),%edx
+c010b3ef:	8b 00                	mov    (%eax),%eax
+c010b3f1:	eb 28                	jmp    c010b41b <getint+0x45>
+    }
+    else if (lflag) {
+c010b3f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b3f7:	74 12                	je     c010b40b <getint+0x35>
+        return va_arg(*ap, long);
+c010b3f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3fc:	8b 00                	mov    (%eax),%eax
+c010b3fe:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b401:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b404:	89 0a                	mov    %ecx,(%edx)
+c010b406:	8b 00                	mov    (%eax),%eax
+c010b408:	99                   	cltd   
+c010b409:	eb 10                	jmp    c010b41b <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010b40b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b40e:	8b 00                	mov    (%eax),%eax
+c010b410:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b413:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b416:	89 0a                	mov    %ecx,(%edx)
+c010b418:	8b 00                	mov    (%eax),%eax
+c010b41a:	99                   	cltd   
+    }
+}
+c010b41b:	5d                   	pop    %ebp
+c010b41c:	c3                   	ret    
+
+c010b41d <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010b41d:	55                   	push   %ebp
+c010b41e:	89 e5                	mov    %esp,%ebp
+c010b420:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010b423:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b426:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010b429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b42c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b430:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b433:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b437:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b43a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b43e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b441:	89 04 24             	mov    %eax,(%esp)
+c010b444:	e8 02 00 00 00       	call   c010b44b <vprintfmt>
+    va_end(ap);
+}
+c010b449:	c9                   	leave  
+c010b44a:	c3                   	ret    
+
+c010b44b <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010b44b:	55                   	push   %ebp
+c010b44c:	89 e5                	mov    %esp,%ebp
+c010b44e:	56                   	push   %esi
+c010b44f:	53                   	push   %ebx
+c010b450:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b453:	eb 18                	jmp    c010b46d <vprintfmt+0x22>
+            if (ch == '\0') {
+c010b455:	85 db                	test   %ebx,%ebx
+c010b457:	75 05                	jne    c010b45e <vprintfmt+0x13>
+                return;
+c010b459:	e9 d1 03 00 00       	jmp    c010b82f <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+c010b45e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b461:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b465:	89 1c 24             	mov    %ebx,(%esp)
+c010b468:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b46b:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b46d:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b470:	8d 50 01             	lea    0x1(%eax),%edx
+c010b473:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b476:	0f b6 00             	movzbl (%eax),%eax
+c010b479:	0f b6 d8             	movzbl %al,%ebx
+c010b47c:	83 fb 25             	cmp    $0x25,%ebx
+c010b47f:	75 d4                	jne    c010b455 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010b481:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010b485:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010b48c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b48f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010b492:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010b499:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b49c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010b49f:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b4a2:	8d 50 01             	lea    0x1(%eax),%edx
+c010b4a5:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b4a8:	0f b6 00             	movzbl (%eax),%eax
+c010b4ab:	0f b6 d8             	movzbl %al,%ebx
+c010b4ae:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010b4b1:	83 f8 55             	cmp    $0x55,%eax
+c010b4b4:	0f 87 44 03 00 00    	ja     c010b7fe <vprintfmt+0x3b3>
+c010b4ba:	8b 04 85 48 e5 10 c0 	mov    -0x3fef1ab8(,%eax,4),%eax
+c010b4c1:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010b4c3:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010b4c7:	eb d6                	jmp    c010b49f <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010b4c9:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010b4cd:	eb d0                	jmp    c010b49f <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b4cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010b4d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b4d9:	89 d0                	mov    %edx,%eax
+c010b4db:	c1 e0 02             	shl    $0x2,%eax
+c010b4de:	01 d0                	add    %edx,%eax
+c010b4e0:	01 c0                	add    %eax,%eax
+c010b4e2:	01 d8                	add    %ebx,%eax
+c010b4e4:	83 e8 30             	sub    $0x30,%eax
+c010b4e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010b4ea:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b4ed:	0f b6 00             	movzbl (%eax),%eax
+c010b4f0:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010b4f3:	83 fb 2f             	cmp    $0x2f,%ebx
+c010b4f6:	7e 0b                	jle    c010b503 <vprintfmt+0xb8>
+c010b4f8:	83 fb 39             	cmp    $0x39,%ebx
+c010b4fb:	7f 06                	jg     c010b503 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b4fd:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c010b501:	eb d3                	jmp    c010b4d6 <vprintfmt+0x8b>
+            goto process_precision;
+c010b503:	eb 33                	jmp    c010b538 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+c010b505:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b508:	8d 50 04             	lea    0x4(%eax),%edx
+c010b50b:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b50e:	8b 00                	mov    (%eax),%eax
+c010b510:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010b513:	eb 23                	jmp    c010b538 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+c010b515:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b519:	79 0c                	jns    c010b527 <vprintfmt+0xdc>
+                width = 0;
+c010b51b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010b522:	e9 78 ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+c010b527:	e9 73 ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+c010b52c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010b533:	e9 67 ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+c010b538:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b53c:	79 12                	jns    c010b550 <vprintfmt+0x105>
+                width = precision, precision = -1;
+c010b53e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b541:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b544:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010b54b:	e9 4f ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+c010b550:	e9 4a ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010b555:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c010b559:	e9 41 ff ff ff       	jmp    c010b49f <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010b55e:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b561:	8d 50 04             	lea    0x4(%eax),%edx
+c010b564:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b567:	8b 00                	mov    (%eax),%eax
+c010b569:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b56c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b570:	89 04 24             	mov    %eax,(%esp)
+c010b573:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b576:	ff d0                	call   *%eax
+            break;
+c010b578:	e9 ac 02 00 00       	jmp    c010b829 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010b57d:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b580:	8d 50 04             	lea    0x4(%eax),%edx
+c010b583:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b586:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010b588:	85 db                	test   %ebx,%ebx
+c010b58a:	79 02                	jns    c010b58e <vprintfmt+0x143>
+                err = -err;
+c010b58c:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010b58e:	83 fb 18             	cmp    $0x18,%ebx
+c010b591:	7f 0b                	jg     c010b59e <vprintfmt+0x153>
+c010b593:	8b 34 9d c0 e4 10 c0 	mov    -0x3fef1b40(,%ebx,4),%esi
+c010b59a:	85 f6                	test   %esi,%esi
+c010b59c:	75 23                	jne    c010b5c1 <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+c010b59e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c010b5a2:	c7 44 24 08 35 e5 10 	movl   $0xc010e535,0x8(%esp)
+c010b5a9:	c0 
+c010b5aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b5ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b5b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5b4:	89 04 24             	mov    %eax,(%esp)
+c010b5b7:	e8 61 fe ff ff       	call   c010b41d <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010b5bc:	e9 68 02 00 00       	jmp    c010b829 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c010b5c1:	89 74 24 0c          	mov    %esi,0xc(%esp)
+c010b5c5:	c7 44 24 08 3e e5 10 	movl   $0xc010e53e,0x8(%esp)
+c010b5cc:	c0 
+c010b5cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b5d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b5d4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5d7:	89 04 24             	mov    %eax,(%esp)
+c010b5da:	e8 3e fe ff ff       	call   c010b41d <printfmt>
+            }
+            break;
+c010b5df:	e9 45 02 00 00       	jmp    c010b829 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010b5e4:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b5e7:	8d 50 04             	lea    0x4(%eax),%edx
+c010b5ea:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b5ed:	8b 30                	mov    (%eax),%esi
+c010b5ef:	85 f6                	test   %esi,%esi
+c010b5f1:	75 05                	jne    c010b5f8 <vprintfmt+0x1ad>
+                p = "(null)";
+c010b5f3:	be 41 e5 10 c0       	mov    $0xc010e541,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010b5f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b5fc:	7e 3e                	jle    c010b63c <vprintfmt+0x1f1>
+c010b5fe:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010b602:	74 38                	je     c010b63c <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010b604:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+c010b607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b60a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b60e:	89 34 24             	mov    %esi,(%esp)
+c010b611:	e8 ed 03 00 00       	call   c010ba03 <strnlen>
+c010b616:	29 c3                	sub    %eax,%ebx
+c010b618:	89 d8                	mov    %ebx,%eax
+c010b61a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b61d:	eb 17                	jmp    c010b636 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+c010b61f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010b623:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b626:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b62a:	89 04 24             	mov    %eax,(%esp)
+c010b62d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b630:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010b632:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b63a:	7f e3                	jg     c010b61f <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010b63c:	eb 38                	jmp    c010b676 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010b63e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010b642:	74 1f                	je     c010b663 <vprintfmt+0x218>
+c010b644:	83 fb 1f             	cmp    $0x1f,%ebx
+c010b647:	7e 05                	jle    c010b64e <vprintfmt+0x203>
+c010b649:	83 fb 7e             	cmp    $0x7e,%ebx
+c010b64c:	7e 15                	jle    c010b663 <vprintfmt+0x218>
+                    putch('?', putdat);
+c010b64e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b651:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b655:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+c010b65c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b65f:	ff d0                	call   *%eax
+c010b661:	eb 0f                	jmp    c010b672 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+c010b663:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b666:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b66a:	89 1c 24             	mov    %ebx,(%esp)
+c010b66d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b670:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010b672:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b676:	89 f0                	mov    %esi,%eax
+c010b678:	8d 70 01             	lea    0x1(%eax),%esi
+c010b67b:	0f b6 00             	movzbl (%eax),%eax
+c010b67e:	0f be d8             	movsbl %al,%ebx
+c010b681:	85 db                	test   %ebx,%ebx
+c010b683:	74 10                	je     c010b695 <vprintfmt+0x24a>
+c010b685:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010b689:	78 b3                	js     c010b63e <vprintfmt+0x1f3>
+c010b68b:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c010b68f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010b693:	79 a9                	jns    c010b63e <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010b695:	eb 17                	jmp    c010b6ae <vprintfmt+0x263>
+                putch(' ', putdat);
+c010b697:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b69a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b69e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010b6a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6a8:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010b6aa:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b6ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b6b2:	7f e3                	jg     c010b697 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+c010b6b4:	e9 70 01 00 00       	jmp    c010b829 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010b6b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b6bc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b6c0:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b6c3:	89 04 24             	mov    %eax,(%esp)
+c010b6c6:	e8 0b fd ff ff       	call   c010b3d6 <getint>
+c010b6cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b6ce:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010b6d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b6d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b6d7:	85 d2                	test   %edx,%edx
+c010b6d9:	79 26                	jns    c010b701 <vprintfmt+0x2b6>
+                putch('-', putdat);
+c010b6db:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b6de:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b6e2:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+c010b6e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6ec:	ff d0                	call   *%eax
+                num = -(long long)num;
+c010b6ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b6f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b6f4:	f7 d8                	neg    %eax
+c010b6f6:	83 d2 00             	adc    $0x0,%edx
+c010b6f9:	f7 da                	neg    %edx
+c010b6fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b6fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010b701:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010b708:	e9 a8 00 00 00       	jmp    c010b7b5 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010b70d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b710:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b714:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b717:	89 04 24             	mov    %eax,(%esp)
+c010b71a:	e8 68 fc ff ff       	call   c010b387 <getuint>
+c010b71f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b722:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010b725:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010b72c:	e9 84 00 00 00       	jmp    c010b7b5 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010b731:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b734:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b738:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b73b:	89 04 24             	mov    %eax,(%esp)
+c010b73e:	e8 44 fc ff ff       	call   c010b387 <getuint>
+c010b743:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b746:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010b749:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010b750:	eb 63                	jmp    c010b7b5 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010b752:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b755:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b759:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+c010b760:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b763:	ff d0                	call   *%eax
+            putch('x', putdat);
+c010b765:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b768:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b76c:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+c010b773:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b776:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010b778:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b77b:	8d 50 04             	lea    0x4(%eax),%edx
+c010b77e:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b781:	8b 00                	mov    (%eax),%eax
+c010b783:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b786:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010b78d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010b794:	eb 1f                	jmp    c010b7b5 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010b796:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b799:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b79d:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b7a0:	89 04 24             	mov    %eax,(%esp)
+c010b7a3:	e8 df fb ff ff       	call   c010b387 <getuint>
+c010b7a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b7ab:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010b7ae:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010b7b5:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010b7b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b7bc:	89 54 24 18          	mov    %edx,0x18(%esp)
+c010b7c0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b7c3:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010b7c7:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010b7cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b7ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b7d1:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b7d5:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010b7d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b7e0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7e3:	89 04 24             	mov    %eax,(%esp)
+c010b7e6:	e8 97 fa ff ff       	call   c010b282 <printnum>
+            break;
+c010b7eb:	eb 3c                	jmp    c010b829 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010b7ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7f0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b7f4:	89 1c 24             	mov    %ebx,(%esp)
+c010b7f7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7fa:	ff d0                	call   *%eax
+            break;
+c010b7fc:	eb 2b                	jmp    c010b829 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010b7fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b801:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b805:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+c010b80c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b80f:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010b811:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010b815:	eb 04                	jmp    c010b81b <vprintfmt+0x3d0>
+c010b817:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010b81b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b81e:	83 e8 01             	sub    $0x1,%eax
+c010b821:	0f b6 00             	movzbl (%eax),%eax
+c010b824:	3c 25                	cmp    $0x25,%al
+c010b826:	75 ef                	jne    c010b817 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+c010b828:	90                   	nop
+        }
+    }
+c010b829:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b82a:	e9 3e fc ff ff       	jmp    c010b46d <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c010b82f:	83 c4 40             	add    $0x40,%esp
+c010b832:	5b                   	pop    %ebx
+c010b833:	5e                   	pop    %esi
+c010b834:	5d                   	pop    %ebp
+c010b835:	c3                   	ret    
+
+c010b836 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010b836:	55                   	push   %ebp
+c010b837:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010b839:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b83c:	8b 40 08             	mov    0x8(%eax),%eax
+c010b83f:	8d 50 01             	lea    0x1(%eax),%edx
+c010b842:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b845:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010b848:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b84b:	8b 10                	mov    (%eax),%edx
+c010b84d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b850:	8b 40 04             	mov    0x4(%eax),%eax
+c010b853:	39 c2                	cmp    %eax,%edx
+c010b855:	73 12                	jae    c010b869 <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010b857:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b85a:	8b 00                	mov    (%eax),%eax
+c010b85c:	8d 48 01             	lea    0x1(%eax),%ecx
+c010b85f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b862:	89 0a                	mov    %ecx,(%edx)
+c010b864:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b867:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010b869:	5d                   	pop    %ebp
+c010b86a:	c3                   	ret    
+
+c010b86b <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010b86b:	55                   	push   %ebp
+c010b86c:	89 e5                	mov    %esp,%ebp
+c010b86e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010b871:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b874:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010b877:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b87a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b87e:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b881:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b885:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b888:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b88c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b88f:	89 04 24             	mov    %eax,(%esp)
+c010b892:	e8 08 00 00 00       	call   c010b89f <vsnprintf>
+c010b897:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010b89a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010b89d:	c9                   	leave  
+c010b89e:	c3                   	ret    
+
+c010b89f <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010b89f:	55                   	push   %ebp
+c010b8a0:	89 e5                	mov    %esp,%ebp
+c010b8a2:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010b8a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b8ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8ae:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b8b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8b4:	01 d0                	add    %edx,%eax
+c010b8b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b8b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010b8c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b8c4:	74 0a                	je     c010b8d0 <vsnprintf+0x31>
+c010b8c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b8c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b8cc:	39 c2                	cmp    %eax,%edx
+c010b8ce:	76 07                	jbe    c010b8d7 <vsnprintf+0x38>
+        return -E_INVAL;
+c010b8d0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010b8d5:	eb 2a                	jmp    c010b901 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010b8d7:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b8da:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b8de:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b8e1:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b8e5:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010b8e8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b8ec:	c7 04 24 36 b8 10 c0 	movl   $0xc010b836,(%esp)
+c010b8f3:	e8 53 fb ff ff       	call   c010b44b <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+c010b8f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b8fb:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010b8fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010b901:	c9                   	leave  
+c010b902:	c3                   	ret    
+
+c010b903 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010b903:	55                   	push   %ebp
+c010b904:	89 e5                	mov    %esp,%ebp
+c010b906:	57                   	push   %edi
+c010b907:	56                   	push   %esi
+c010b908:	53                   	push   %ebx
+c010b909:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010b90c:	a1 20 ab 12 c0       	mov    0xc012ab20,%eax
+c010b911:	8b 15 24 ab 12 c0    	mov    0xc012ab24,%edx
+c010b917:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010b91d:	6b f0 05             	imul   $0x5,%eax,%esi
+c010b920:	01 f7                	add    %esi,%edi
+c010b922:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+c010b927:	f7 e6                	mul    %esi
+c010b929:	8d 34 17             	lea    (%edi,%edx,1),%esi
+c010b92c:	89 f2                	mov    %esi,%edx
+c010b92e:	83 c0 0b             	add    $0xb,%eax
+c010b931:	83 d2 00             	adc    $0x0,%edx
+c010b934:	89 c7                	mov    %eax,%edi
+c010b936:	83 e7 ff             	and    $0xffffffff,%edi
+c010b939:	89 f9                	mov    %edi,%ecx
+c010b93b:	0f b7 da             	movzwl %dx,%ebx
+c010b93e:	89 0d 20 ab 12 c0    	mov    %ecx,0xc012ab20
+c010b944:	89 1d 24 ab 12 c0    	mov    %ebx,0xc012ab24
+    unsigned long long result = (next >> 12);
+c010b94a:	a1 20 ab 12 c0       	mov    0xc012ab20,%eax
+c010b94f:	8b 15 24 ab 12 c0    	mov    0xc012ab24,%edx
+c010b955:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010b959:	c1 ea 0c             	shr    $0xc,%edx
+c010b95c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b95f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010b962:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010b969:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b96c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b96f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010b972:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b975:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b978:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b97b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b97f:	74 1c                	je     c010b99d <rand+0x9a>
+c010b981:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b984:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b989:	f7 75 dc             	divl   -0x24(%ebp)
+c010b98c:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010b98f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b992:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b997:	f7 75 dc             	divl   -0x24(%ebp)
+c010b99a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b99d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b9a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b9a3:	f7 75 dc             	divl   -0x24(%ebp)
+c010b9a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010b9a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010b9ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b9af:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b9b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b9b5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010b9b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010b9bb:	83 c4 24             	add    $0x24,%esp
+c010b9be:	5b                   	pop    %ebx
+c010b9bf:	5e                   	pop    %esi
+c010b9c0:	5f                   	pop    %edi
+c010b9c1:	5d                   	pop    %ebp
+c010b9c2:	c3                   	ret    
+
+c010b9c3 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010b9c3:	55                   	push   %ebp
+c010b9c4:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010b9c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b9c9:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b9ce:	a3 20 ab 12 c0       	mov    %eax,0xc012ab20
+c010b9d3:	89 15 24 ab 12 c0    	mov    %edx,0xc012ab24
+}
+c010b9d9:	5d                   	pop    %ebp
+c010b9da:	c3                   	ret    
+
+c010b9db <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010b9db:	55                   	push   %ebp
+c010b9dc:	89 e5                	mov    %esp,%ebp
+c010b9de:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010b9e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010b9e8:	eb 04                	jmp    c010b9ee <strlen+0x13>
+        cnt ++;
+c010b9ea:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c010b9ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b9f1:	8d 50 01             	lea    0x1(%eax),%edx
+c010b9f4:	89 55 08             	mov    %edx,0x8(%ebp)
+c010b9f7:	0f b6 00             	movzbl (%eax),%eax
+c010b9fa:	84 c0                	test   %al,%al
+c010b9fc:	75 ec                	jne    c010b9ea <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010b9fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010ba01:	c9                   	leave  
+c010ba02:	c3                   	ret    
+
+c010ba03 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010ba03:	55                   	push   %ebp
+c010ba04:	89 e5                	mov    %esp,%ebp
+c010ba06:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010ba09:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010ba10:	eb 04                	jmp    c010ba16 <strnlen+0x13>
+        cnt ++;
+c010ba12:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c010ba16:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010ba19:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010ba1c:	73 10                	jae    c010ba2e <strnlen+0x2b>
+c010ba1e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba21:	8d 50 01             	lea    0x1(%eax),%edx
+c010ba24:	89 55 08             	mov    %edx,0x8(%ebp)
+c010ba27:	0f b6 00             	movzbl (%eax),%eax
+c010ba2a:	84 c0                	test   %al,%al
+c010ba2c:	75 e4                	jne    c010ba12 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010ba2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010ba31:	c9                   	leave  
+c010ba32:	c3                   	ret    
+
+c010ba33 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010ba33:	55                   	push   %ebp
+c010ba34:	89 e5                	mov    %esp,%ebp
+c010ba36:	57                   	push   %edi
+c010ba37:	56                   	push   %esi
+c010ba38:	83 ec 20             	sub    $0x20,%esp
+c010ba3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ba41:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ba44:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010ba47:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010ba4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba4d:	89 d1                	mov    %edx,%ecx
+c010ba4f:	89 c2                	mov    %eax,%edx
+c010ba51:	89 ce                	mov    %ecx,%esi
+c010ba53:	89 d7                	mov    %edx,%edi
+c010ba55:	ac                   	lods   %ds:(%esi),%al
+c010ba56:	aa                   	stos   %al,%es:(%edi)
+c010ba57:	84 c0                	test   %al,%al
+c010ba59:	75 fa                	jne    c010ba55 <strcpy+0x22>
+c010ba5b:	89 fa                	mov    %edi,%edx
+c010ba5d:	89 f1                	mov    %esi,%ecx
+c010ba5f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010ba62:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010ba65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010ba68:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010ba6b:	83 c4 20             	add    $0x20,%esp
+c010ba6e:	5e                   	pop    %esi
+c010ba6f:	5f                   	pop    %edi
+c010ba70:	5d                   	pop    %ebp
+c010ba71:	c3                   	ret    
+
+c010ba72 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010ba72:	55                   	push   %ebp
+c010ba73:	89 e5                	mov    %esp,%ebp
+c010ba75:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010ba78:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba7b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010ba7e:	eb 21                	jmp    c010baa1 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c010ba80:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ba83:	0f b6 10             	movzbl (%eax),%edx
+c010ba86:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010ba89:	88 10                	mov    %dl,(%eax)
+c010ba8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010ba8e:	0f b6 00             	movzbl (%eax),%eax
+c010ba91:	84 c0                	test   %al,%al
+c010ba93:	74 04                	je     c010ba99 <strncpy+0x27>
+            src ++;
+c010ba95:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c010ba99:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010ba9d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c010baa1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010baa5:	75 d9                	jne    c010ba80 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c010baa7:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010baaa:	c9                   	leave  
+c010baab:	c3                   	ret    
+
+c010baac <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010baac:	55                   	push   %ebp
+c010baad:	89 e5                	mov    %esp,%ebp
+c010baaf:	57                   	push   %edi
+c010bab0:	56                   	push   %esi
+c010bab1:	83 ec 20             	sub    $0x20,%esp
+c010bab4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bab7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010baba:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010babd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c010bac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bac6:	89 d1                	mov    %edx,%ecx
+c010bac8:	89 c2                	mov    %eax,%edx
+c010baca:	89 ce                	mov    %ecx,%esi
+c010bacc:	89 d7                	mov    %edx,%edi
+c010bace:	ac                   	lods   %ds:(%esi),%al
+c010bacf:	ae                   	scas   %es:(%edi),%al
+c010bad0:	75 08                	jne    c010bada <strcmp+0x2e>
+c010bad2:	84 c0                	test   %al,%al
+c010bad4:	75 f8                	jne    c010bace <strcmp+0x22>
+c010bad6:	31 c0                	xor    %eax,%eax
+c010bad8:	eb 04                	jmp    c010bade <strcmp+0x32>
+c010bada:	19 c0                	sbb    %eax,%eax
+c010badc:	0c 01                	or     $0x1,%al
+c010bade:	89 fa                	mov    %edi,%edx
+c010bae0:	89 f1                	mov    %esi,%ecx
+c010bae2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010bae5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010bae8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c010baeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010baee:	83 c4 20             	add    $0x20,%esp
+c010baf1:	5e                   	pop    %esi
+c010baf2:	5f                   	pop    %edi
+c010baf3:	5d                   	pop    %ebp
+c010baf4:	c3                   	ret    
+
+c010baf5 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010baf5:	55                   	push   %ebp
+c010baf6:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010baf8:	eb 0c                	jmp    c010bb06 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c010bafa:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010bafe:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bb02:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010bb06:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bb0a:	74 1a                	je     c010bb26 <strncmp+0x31>
+c010bb0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb0f:	0f b6 00             	movzbl (%eax),%eax
+c010bb12:	84 c0                	test   %al,%al
+c010bb14:	74 10                	je     c010bb26 <strncmp+0x31>
+c010bb16:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb19:	0f b6 10             	movzbl (%eax),%edx
+c010bb1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb1f:	0f b6 00             	movzbl (%eax),%eax
+c010bb22:	38 c2                	cmp    %al,%dl
+c010bb24:	74 d4                	je     c010bafa <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010bb26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bb2a:	74 18                	je     c010bb44 <strncmp+0x4f>
+c010bb2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb2f:	0f b6 00             	movzbl (%eax),%eax
+c010bb32:	0f b6 d0             	movzbl %al,%edx
+c010bb35:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb38:	0f b6 00             	movzbl (%eax),%eax
+c010bb3b:	0f b6 c0             	movzbl %al,%eax
+c010bb3e:	29 c2                	sub    %eax,%edx
+c010bb40:	89 d0                	mov    %edx,%eax
+c010bb42:	eb 05                	jmp    c010bb49 <strncmp+0x54>
+c010bb44:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bb49:	5d                   	pop    %ebp
+c010bb4a:	c3                   	ret    
+
+c010bb4b <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010bb4b:	55                   	push   %ebp
+c010bb4c:	89 e5                	mov    %esp,%ebp
+c010bb4e:	83 ec 04             	sub    $0x4,%esp
+c010bb51:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb54:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010bb57:	eb 14                	jmp    c010bb6d <strchr+0x22>
+        if (*s == c) {
+c010bb59:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb5c:	0f b6 00             	movzbl (%eax),%eax
+c010bb5f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010bb62:	75 05                	jne    c010bb69 <strchr+0x1e>
+            return (char *)s;
+c010bb64:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb67:	eb 13                	jmp    c010bb7c <strchr+0x31>
+        }
+        s ++;
+c010bb69:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c010bb6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb70:	0f b6 00             	movzbl (%eax),%eax
+c010bb73:	84 c0                	test   %al,%al
+c010bb75:	75 e2                	jne    c010bb59 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c010bb77:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bb7c:	c9                   	leave  
+c010bb7d:	c3                   	ret    
+
+c010bb7e <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010bb7e:	55                   	push   %ebp
+c010bb7f:	89 e5                	mov    %esp,%ebp
+c010bb81:	83 ec 04             	sub    $0x4,%esp
+c010bb84:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb87:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010bb8a:	eb 11                	jmp    c010bb9d <strfind+0x1f>
+        if (*s == c) {
+c010bb8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb8f:	0f b6 00             	movzbl (%eax),%eax
+c010bb92:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010bb95:	75 02                	jne    c010bb99 <strfind+0x1b>
+            break;
+c010bb97:	eb 0e                	jmp    c010bba7 <strfind+0x29>
+        }
+        s ++;
+c010bb99:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c010bb9d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bba0:	0f b6 00             	movzbl (%eax),%eax
+c010bba3:	84 c0                	test   %al,%al
+c010bba5:	75 e5                	jne    c010bb8c <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+c010bba7:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010bbaa:	c9                   	leave  
+c010bbab:	c3                   	ret    
+
+c010bbac <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010bbac:	55                   	push   %ebp
+c010bbad:	89 e5                	mov    %esp,%ebp
+c010bbaf:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010bbb2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010bbb9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010bbc0:	eb 04                	jmp    c010bbc6 <strtol+0x1a>
+        s ++;
+c010bbc2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010bbc6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbc9:	0f b6 00             	movzbl (%eax),%eax
+c010bbcc:	3c 20                	cmp    $0x20,%al
+c010bbce:	74 f2                	je     c010bbc2 <strtol+0x16>
+c010bbd0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbd3:	0f b6 00             	movzbl (%eax),%eax
+c010bbd6:	3c 09                	cmp    $0x9,%al
+c010bbd8:	74 e8                	je     c010bbc2 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010bbda:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbdd:	0f b6 00             	movzbl (%eax),%eax
+c010bbe0:	3c 2b                	cmp    $0x2b,%al
+c010bbe2:	75 06                	jne    c010bbea <strtol+0x3e>
+        s ++;
+c010bbe4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bbe8:	eb 15                	jmp    c010bbff <strtol+0x53>
+    }
+    else if (*s == '-') {
+c010bbea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbed:	0f b6 00             	movzbl (%eax),%eax
+c010bbf0:	3c 2d                	cmp    $0x2d,%al
+c010bbf2:	75 0b                	jne    c010bbff <strtol+0x53>
+        s ++, neg = 1;
+c010bbf4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bbf8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010bbff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bc03:	74 06                	je     c010bc0b <strtol+0x5f>
+c010bc05:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010bc09:	75 24                	jne    c010bc2f <strtol+0x83>
+c010bc0b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc0e:	0f b6 00             	movzbl (%eax),%eax
+c010bc11:	3c 30                	cmp    $0x30,%al
+c010bc13:	75 1a                	jne    c010bc2f <strtol+0x83>
+c010bc15:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc18:	83 c0 01             	add    $0x1,%eax
+c010bc1b:	0f b6 00             	movzbl (%eax),%eax
+c010bc1e:	3c 78                	cmp    $0x78,%al
+c010bc20:	75 0d                	jne    c010bc2f <strtol+0x83>
+        s += 2, base = 16;
+c010bc22:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010bc26:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010bc2d:	eb 2a                	jmp    c010bc59 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010bc2f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bc33:	75 17                	jne    c010bc4c <strtol+0xa0>
+c010bc35:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc38:	0f b6 00             	movzbl (%eax),%eax
+c010bc3b:	3c 30                	cmp    $0x30,%al
+c010bc3d:	75 0d                	jne    c010bc4c <strtol+0xa0>
+        s ++, base = 8;
+c010bc3f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bc43:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010bc4a:	eb 0d                	jmp    c010bc59 <strtol+0xad>
+    }
+    else if (base == 0) {
+c010bc4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bc50:	75 07                	jne    c010bc59 <strtol+0xad>
+        base = 10;
+c010bc52:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010bc59:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc5c:	0f b6 00             	movzbl (%eax),%eax
+c010bc5f:	3c 2f                	cmp    $0x2f,%al
+c010bc61:	7e 1b                	jle    c010bc7e <strtol+0xd2>
+c010bc63:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc66:	0f b6 00             	movzbl (%eax),%eax
+c010bc69:	3c 39                	cmp    $0x39,%al
+c010bc6b:	7f 11                	jg     c010bc7e <strtol+0xd2>
+            dig = *s - '0';
+c010bc6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc70:	0f b6 00             	movzbl (%eax),%eax
+c010bc73:	0f be c0             	movsbl %al,%eax
+c010bc76:	83 e8 30             	sub    $0x30,%eax
+c010bc79:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bc7c:	eb 48                	jmp    c010bcc6 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010bc7e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc81:	0f b6 00             	movzbl (%eax),%eax
+c010bc84:	3c 60                	cmp    $0x60,%al
+c010bc86:	7e 1b                	jle    c010bca3 <strtol+0xf7>
+c010bc88:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc8b:	0f b6 00             	movzbl (%eax),%eax
+c010bc8e:	3c 7a                	cmp    $0x7a,%al
+c010bc90:	7f 11                	jg     c010bca3 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c010bc92:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc95:	0f b6 00             	movzbl (%eax),%eax
+c010bc98:	0f be c0             	movsbl %al,%eax
+c010bc9b:	83 e8 57             	sub    $0x57,%eax
+c010bc9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bca1:	eb 23                	jmp    c010bcc6 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010bca3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bca6:	0f b6 00             	movzbl (%eax),%eax
+c010bca9:	3c 40                	cmp    $0x40,%al
+c010bcab:	7e 3d                	jle    c010bcea <strtol+0x13e>
+c010bcad:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcb0:	0f b6 00             	movzbl (%eax),%eax
+c010bcb3:	3c 5a                	cmp    $0x5a,%al
+c010bcb5:	7f 33                	jg     c010bcea <strtol+0x13e>
+            dig = *s - 'A' + 10;
+c010bcb7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcba:	0f b6 00             	movzbl (%eax),%eax
+c010bcbd:	0f be c0             	movsbl %al,%eax
+c010bcc0:	83 e8 37             	sub    $0x37,%eax
+c010bcc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010bcc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bcc9:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010bccc:	7c 02                	jl     c010bcd0 <strtol+0x124>
+            break;
+c010bcce:	eb 1a                	jmp    c010bcea <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+c010bcd0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bcd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bcd7:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010bcdb:	89 c2                	mov    %eax,%edx
+c010bcdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bce0:	01 d0                	add    %edx,%eax
+c010bce2:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c010bce5:	e9 6f ff ff ff       	jmp    c010bc59 <strtol+0xad>
+
+    if (endptr) {
+c010bcea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010bcee:	74 08                	je     c010bcf8 <strtol+0x14c>
+        *endptr = (char *) s;
+c010bcf0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcf3:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bcf6:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010bcf8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010bcfc:	74 07                	je     c010bd05 <strtol+0x159>
+c010bcfe:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bd01:	f7 d8                	neg    %eax
+c010bd03:	eb 03                	jmp    c010bd08 <strtol+0x15c>
+c010bd05:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010bd08:	c9                   	leave  
+c010bd09:	c3                   	ret    
+
+c010bd0a <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010bd0a:	55                   	push   %ebp
+c010bd0b:	89 e5                	mov    %esp,%ebp
+c010bd0d:	57                   	push   %edi
+c010bd0e:	83 ec 24             	sub    $0x24,%esp
+c010bd11:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd14:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010bd17:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010bd1b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bd1e:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010bd21:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010bd24:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bd27:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010bd2a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010bd2d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010bd31:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010bd34:	89 d7                	mov    %edx,%edi
+c010bd36:	f3 aa                	rep stos %al,%es:(%edi)
+c010bd38:	89 fa                	mov    %edi,%edx
+c010bd3a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010bd3d:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010bd40:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010bd43:	83 c4 24             	add    $0x24,%esp
+c010bd46:	5f                   	pop    %edi
+c010bd47:	5d                   	pop    %ebp
+c010bd48:	c3                   	ret    
+
+c010bd49 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010bd49:	55                   	push   %ebp
+c010bd4a:	89 e5                	mov    %esp,%ebp
+c010bd4c:	57                   	push   %edi
+c010bd4d:	56                   	push   %esi
+c010bd4e:	53                   	push   %ebx
+c010bd4f:	83 ec 30             	sub    $0x30,%esp
+c010bd52:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd55:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bd58:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010bd5e:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bd61:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010bd64:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd67:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010bd6a:	73 42                	jae    c010bdae <memmove+0x65>
+c010bd6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010bd72:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bd75:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010bd78:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd7b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010bd7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010bd81:	c1 e8 02             	shr    $0x2,%eax
+c010bd84:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010bd86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010bd89:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bd8c:	89 d7                	mov    %edx,%edi
+c010bd8e:	89 c6                	mov    %eax,%esi
+c010bd90:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010bd92:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010bd95:	83 e1 03             	and    $0x3,%ecx
+c010bd98:	74 02                	je     c010bd9c <memmove+0x53>
+c010bd9a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010bd9c:	89 f0                	mov    %esi,%eax
+c010bd9e:	89 fa                	mov    %edi,%edx
+c010bda0:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010bda3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010bda6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010bda9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010bdac:	eb 36                	jmp    c010bde4 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010bdae:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bdb1:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010bdb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bdb7:	01 c2                	add    %eax,%edx
+c010bdb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bdbc:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010bdbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bdc2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c010bdc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bdc8:	89 c1                	mov    %eax,%ecx
+c010bdca:	89 d8                	mov    %ebx,%eax
+c010bdcc:	89 d6                	mov    %edx,%esi
+c010bdce:	89 c7                	mov    %eax,%edi
+c010bdd0:	fd                   	std    
+c010bdd1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010bdd3:	fc                   	cld    
+c010bdd4:	89 f8                	mov    %edi,%eax
+c010bdd6:	89 f2                	mov    %esi,%edx
+c010bdd8:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010bddb:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010bdde:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c010bde1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010bde4:	83 c4 30             	add    $0x30,%esp
+c010bde7:	5b                   	pop    %ebx
+c010bde8:	5e                   	pop    %esi
+c010bde9:	5f                   	pop    %edi
+c010bdea:	5d                   	pop    %ebp
+c010bdeb:	c3                   	ret    
+
+c010bdec <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010bdec:	55                   	push   %ebp
+c010bded:	89 e5                	mov    %esp,%ebp
+c010bdef:	57                   	push   %edi
+c010bdf0:	56                   	push   %esi
+c010bdf1:	83 ec 20             	sub    $0x20,%esp
+c010bdf4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bdfa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bdfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010be00:	8b 45 10             	mov    0x10(%ebp),%eax
+c010be03:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010be06:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010be09:	c1 e8 02             	shr    $0x2,%eax
+c010be0c:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010be0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010be11:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010be14:	89 d7                	mov    %edx,%edi
+c010be16:	89 c6                	mov    %eax,%esi
+c010be18:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010be1a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010be1d:	83 e1 03             	and    $0x3,%ecx
+c010be20:	74 02                	je     c010be24 <memcpy+0x38>
+c010be22:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010be24:	89 f0                	mov    %esi,%eax
+c010be26:	89 fa                	mov    %edi,%edx
+c010be28:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010be2b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010be2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010be31:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010be34:	83 c4 20             	add    $0x20,%esp
+c010be37:	5e                   	pop    %esi
+c010be38:	5f                   	pop    %edi
+c010be39:	5d                   	pop    %ebp
+c010be3a:	c3                   	ret    
+
+c010be3b <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010be3b:	55                   	push   %ebp
+c010be3c:	89 e5                	mov    %esp,%ebp
+c010be3e:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010be41:	8b 45 08             	mov    0x8(%ebp),%eax
+c010be44:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010be47:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be4a:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010be4d:	eb 30                	jmp    c010be7f <memcmp+0x44>
+        if (*s1 != *s2) {
+c010be4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010be52:	0f b6 10             	movzbl (%eax),%edx
+c010be55:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be58:	0f b6 00             	movzbl (%eax),%eax
+c010be5b:	38 c2                	cmp    %al,%dl
+c010be5d:	74 18                	je     c010be77 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010be5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010be62:	0f b6 00             	movzbl (%eax),%eax
+c010be65:	0f b6 d0             	movzbl %al,%edx
+c010be68:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be6b:	0f b6 00             	movzbl (%eax),%eax
+c010be6e:	0f b6 c0             	movzbl %al,%eax
+c010be71:	29 c2                	sub    %eax,%edx
+c010be73:	89 d0                	mov    %edx,%eax
+c010be75:	eb 1a                	jmp    c010be91 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c010be77:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010be7b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c010be7f:	8b 45 10             	mov    0x10(%ebp),%eax
+c010be82:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010be85:	89 55 10             	mov    %edx,0x10(%ebp)
+c010be88:	85 c0                	test   %eax,%eax
+c010be8a:	75 c3                	jne    c010be4f <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c010be8c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010be91:	c9                   	leave  
+c010be92:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/kernel.sym lab5/obj/kernel.sym
--- ../../origin/labcodes/lab5/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/kernel.sym	2020-05-28 11:30:56.797041032 +0800
@@ -0,0 +1,701 @@
+c0100000 .text
+c010bea0 .rodata
+c010e6a0 .stab
+c01229f9 .stabstr
+c0128000 .data
+c019c000 .data.pgdir
+c019e000 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c010001e next
+c0100034 spin
+c019d000 __boot_pt1
+00000400 i
+00000000 init.c
+c010014d lab1_print_cur_status
+c019e000 round.1927
+c0100213 lab1_switch_to_user
+c0100218 lab1_switch_to_kernel
+c010021d lab1_switch_test
+00000000 readline.c
+c019e020 buf
+00000000 stdio.c
+c010030c cputch
+00000000 kdebug.c
+c0100400 stab_binsearch
+c0100ac4 read_eip
+00000000 kmonitor.c
+c012a000 commands
+c0100b94 parse
+c0100c4e runcmd
+00000000 panic.c
+c019e420 is_panic
+00000000 clock.c
+00000000 console.c
+c0100f11 __intr_save
+c0100f3b __intr_restore
+c0100f4e delay
+c019e440 crt_buf
+c019e444 crt_pos
+c019e446 addr_6845
+c0100f96 cga_init
+c019e448 serial_exists
+c010107c serial_init
+c010115f lpt_putc_sub
+c01011d8 lpt_putc
+c0101217 cga_putc
+c01013eb serial_putc_sub
+c0101444 serial_putc
+c019e460 cons
+c0101483 cons_intr
+c01014ce serial_proc_data
+c012a040 shiftcode
+c012a140 togglecode
+c012a240 normalmap
+c012a340 shiftmap
+c012a440 ctlmap
+c012a540 charcode
+c0101542 kbd_proc_data
+c019e668 shift.1648
+c01016cb kbd_intr
+c01016df kbd_init
+00000000 ide.c
+c010c1fc channels
+c019e680 ide_devices
+c01017cf ide_wait_ready
+00000000 intr.c
+00000000 picirq.c
+c012a550 irq_mask
+c019e760 did_init
+c0102050 pic_setmask
+00000000 trap.c
+c0102211 print_ticks
+c019e780 idt
+c012a560 idt_pd
+c01023c1 trapname
+c010c7a0 excnames.1807
+c012a580 IA32flags
+c0102684 print_pgfault
+c0102701 pgfault_handler
+c019ef80 in_swap_tick_event
+c01027cd trap_dispatch
+00000000 default_pmm.c
+c010351d page2ppn
+c0103531 page2pa
+c0103547 page_ref
+c0103551 set_page_ref
+c010355e default_init
+c010358b default_init_memmap
+c01036d2 default_alloc_pages
+c010384e default_free_pages
+c0103b59 default_nr_free_pages
+c0103b63 basic_check
+c010409f default_check
+00000000 kmalloc.c
+c01046f7 __intr_save
+c0104721 __intr_restore
+c0104734 page2ppn
+c0104748 page2pa
+c010475e pa2page
+c01047a3 page2kva
+c01047f7 kva2page
+c012a9e0 arena
+c012a9e8 slobfree
+c019ef84 bigblocks
+c0104841 __slob_get_free_pages
+c010487a __slob_free_pages
+c01048ae slob_alloc
+c0104a83 slob_free
+c0104bdc find_order
+c0104c00 __kmalloc
+00000000 pmm.c
+c0104e46 page2ppn
+c0104e5a page2pa
+c0104e70 pa2page
+c0104eb5 page2kva
+c0104f09 pte2page
+c0104f47 pde2page
+c0104f5f page_ref
+c0104f69 set_page_ref
+c0104f76 page_ref_inc
+c0104f8d page_ref_dec
+c0104fa4 __intr_save
+c0104fce __intr_restore
+c019efc0 ts
+c012aa20 gdt
+c012aa50 gdt_pd
+c0104fe1 lgdt
+c0105023 gdt_init
+c0105112 init_pmm_manager
+c0105145 init_memmap
+c010522c page_init
+c010560d boot_map_segment
+c010571a boot_alloc_page
+c0106086 check_alloc_page
+c01060a4 check_pgdir
+c010673f check_boot_pgdir
+c01059d9 page_remove_pte
+c0106ac8 perm2str
+c019f028 str.2073
+c0106b16 get_pgtable_items
+00000000 swap.c
+c0106d3a pa2page
+c0106d7f pte2page
+c0106dbd pde2page
+c019f034 sm
+c0107304 check_swap
+c0107134 check_content_set
+c01072ec check_content_access
+00000000 swap_fifo.c
+c01079a2 _fifo_init_mm
+c01079d4 _fifo_map_swappable
+c0107a74 _fifo_swap_out_victim
+c0107b75 _fifo_check_swap
+c0107eca _fifo_init
+c0107ed4 _fifo_set_unswappable
+c0107ede _fifo_tick_event
+00000000 vmm.c
+c0107ee8 lock_init
+c0107ef6 mm_count
+c0107f01 set_mm_count
+c0107f0f pa2page
+c0107f54 pde2page
+c01080f1 check_vma_overlap
+c010870c check_vmm
+c0108732 check_vma_struct
+c0108bcb check_pgfault
+00000000 swapfs.c
+c010914b page2ppn
+c010915f page2pa
+c0109175 page2kva
+00000000 proc.c
+c01092fe test_and_set_bit
+c010931e test_and_clear_bit
+c010933e __intr_save
+c0109368 __intr_restore
+c010937b try_lock
+c010939e lock
+c01093bc unlock
+c01093f7 page2ppn
+c010940b page2pa
+c0109421 pa2page
+c0109466 page2kva
+c01094ba kva2page
+c0109504 mm_count_inc
+c010951e mm_count_dec
+c0109538 lock_mm
+c0109554 unlock_mm
+c019f060 hash_list
+c01a1060 nr_process
+c0109570 alloc_proc
+c01a1064 name.1833
+c01096e6 set_links
+c010978b remove_links
+c010980e get_pid
+c012aa80 last_pid.1849
+c012aa84 next_safe.1848
+c010997b forkret
+c0109993 hash_proc
+c0109a0f unhash_proc
+c0109b26 setup_kstack
+c0109b62 put_kstack
+c0109b88 setup_pgdir
+c0109c2f put_pgdir
+c0109c55 copy_mm
+c0109d71 copy_thread
+c010a10a load_icode
+c010aaae kernel_execve
+c010aae8 user_main
+c010ab47 init_main
+00000000 sched.c
+c010aede __intr_save
+c010af08 __intr_restore
+00000000 syscall.c
+c010b065 sys_exit
+c010b080 sys_fork
+c010b0b6 sys_wait
+c010b0e3 sys_exec
+c010b130 sys_yield
+c010b13d sys_kill
+c010b158 sys_getpid
+c010b165 sys_putc
+c010b185 sys_pgdir
+c012aaa0 syscalls
+00000000 hash.c
+00000000 printfmt.c
+c010e4c0 error_string
+c010b282 printnum
+c010b387 getuint
+c010b3d6 getint
+c010b836 sprintputch
+00000000 rand.c
+c012ab20 next
+00000000 string.c
+00000000 
+c0103475 vector242
+c0102ecc vector119
+c010098b print_kerninfo
+c0102dac vector87
+c0102da3 vector86
+c01034e1 vector251
+c010ba33 strcpy
+c0101b42 ide_device_valid
+c0102dd0 vector91
+c0102bc6 vector33
+c01030b5 vector162
+c0103319 vector213
+c0102e69 vector108
+c0102c20 vector43
+000078ac _binary_obj___user_yield_out_size
+c0104bc8 slob_allocated
+c0100000 kern_entry
+c0100dcf mon_backtrace
+c01030d9 vector165
+c01323d5 _binary_obj___user_badsegment_out_start
+c01031c9 vector185
+c0102ea8 vector115
+c0102ee7 vector122
+000078ac _binary_obj___user_hello_out_size
+c010865c copy_from_user
+c015f879 _binary_obj___user_forktest_out_end
+c0105e9c page_insert
+c010306d vector156
+c0103499 vector245
+c01031f9 vector189
+c0102aea vector7
+c0102cc2 vector61
+c0102b75 vector24
+c0102e84 vector111
+c010327d vector200
+00007903 _binary_obj___user_testbss_out_size
+c0102cf8 vector67
+c010af1b wakeup_proc
+c0104bd2 kallocated
+c0105fb2 pgdir_alloc_page
+c0102f95 vector138
+c0102d37 vector74
+c010bd49 memmove
+c0102c9e vector57
+c0148e4a _binary_obj___user_exit_out_end
+c0107f6c mm_create
+c010b86b snprintf
+c010b197 syscall
+c0102408 print_trapframe
+c0103325 vector214
+c010b44b vprintfmt
+c0102e18 vector99
+c0105980 get_page
+c0102a80 __alltraps
+c0101760 cons_getc
+c0102fb9 vector141
+c0100ea4 is_kernel_panic
+c010312d vector172
+c0100ad5 print_stackframe
+c0103469 vector241
+c01a1164 pra_list_head
+c01034f9 vector253
+c0102ac6 vector3
+c0102aa2 forkrets
+c0102abd vector2
+c0109e49 do_fork
+c01033c1 vector227
+c0109ab4 kernel_thread
+c01032f5 vector210
+c019f040 idleproc
+c010339d vector224
+c0102c0e vector41
+c012aa60 swap_manager_fifo
+c010035f cprintf
+c018cd0f _binary_obj___user_testbss_out_end
+c01a1170 proc_list
+c0102b5a vector21
+c0103169 vector177
+c0102ec3 vector118
+c0102d13 vector70
+c0108367 mm_map
+c0102d0a vector69
+c0103439 vector237
+c0102cdd vector64
+c0102b90 vector27
+c0108483 dup_mmap
+c01086ff vmm_init
+c0102f4d vector132
+c012ab28 _binary_obj___user_badarg_out_start
+c0108584 exit_mmap
+c01031d5 vector186
+000078ad _binary_obj___user_badarg_out_size
+c0103349 vector217
+c01082c5 mm_destroy
+c01092f5 kernel_thread_entry
+c010a8b8 do_wait
+c010bdec memcpy
+c0102ab4 vector1
+c0103175 vector178
+c0102bf3 vector38
+c0104d0a kfree
+c01762b3 _binary_obj___user_pgdir_out_end
+c0103445 vector238
+c019467e _binary_obj___user_yield_out_start
+c0100256 readline
+c016715b _binary_obj___user_hello_out_start
+c0102f59 vector133
+c0102d2e vector73
+c0102fdd vector144
+c010cd08 vpd
+c0100036 kern_init
+c0141585 _binary_obj___user_exit_out_start
+c0103505 vector254
+c0102e2a vector101
+c0103301 vector211
+c0103145 vector174
+c0103481 vector243
+c0105c35 copy_range
+c0102f1d vector128
+c0102d76 vector81
+c01051cf free_pages
+c0102b18 vector13
+c010b89f vsnprintf
+c0102c68 vector51
+c0102b2f vector16
+c019e000 edata
+c01016f8 cons_init
+c010705e swap_in
+c0101e02 ide_write_secs
+c01a1084 pmm_manager
+c010345d vector240
+c0102c83 vector54
+c0102b48 vector19
+c01229f8 __STAB_END__
+c0102dd9 vector92
+c010348d vector244
+c019f02c swap_init_ok
+c0105016 load_esp0
+c0102fad vector140
+c0102c32 vector45
+c0102d64 vector79
+c01033d9 vector229
+c0106dd5 swap_init
+c0103085 vector158
+c01020a8 pic_enable
+c01091c9 swapfs_init
+c01a10a0 check_rp
+000078ae _binary_obj___user_softint_out_size
+c0105b2e exit_range
+c0102bfc vector39
+c01030fd vector168
+c019467e _binary_obj___user_waitkill_out_end
+c0102bd8 vector35
+c0102e96 vector113
+c01229f9 __STABSTR_BEGIN__
+c010aa4c do_kill
+c0102f02 vector125
+c0100de1 __panic
+c016ea07 _binary_obj___user_hello_out_end
+c019f044 initproc
+c010333d vector216
+c0102cd4 vector63
+c0102b87 vector26
+c0101525 serial_intr
+c0103229 vector193
+c010324d vector196
+c010010e grade_backtrace0
+c01032e9 vector209
+c0102acf vector4
+c0103115 vector170
+c010af9f schedule
+c0102f7d vector136
+c0102b03 vector10
+c017db61 _binary_obj___user_softint_out_end
+c01032c5 vector206
+c0103511 vector255
+c0103199 vector181
+c0102cb0 vector59
+c0100128 grade_backtrace
+c0102d9a vector85
+c0102d91 vector84
+c010aea7 switch_to
+c01031b1 vector183
+c0103091 vector159
+c010330d vector212
+c0102c44 vector47
+c010bbac strtol
+c01033cd vector228
+c0102c17 vector42
+c0102e9f vector114
+c010ba03 strnlen
+c01762b3 _binary_obj___user_softint_out_start
+c0148e4a _binary_obj___user_faultread_out_start
+c0103151 vector175
+c0102fd1 vector143
+c0102f35 vector130
+c010cb80 default_pmm_manager
+c01034a5 vector246
+c0102afa vector9
+c0102fc5 vector142
+c0102e21 vector100
+000078e2 _binary_obj___user_forktree_out_size
+c0103289 vector201
+c0102253 idt_init
+c0100a21 print_debuginfo
+c0108040 find_vma
+c01a10c0 swap_in_seq_no
+c015f879 _binary_obj___user_forktree_out_start
+c0102cb9 vector60
+c0102b6c vector23
+c010342d vector236
+c019efa0 npage
+c0108e10 do_pgfault
+c01033f1 vector231
+000078ff _binary_obj___user_divzero_out_size
+c0109661 set_proc_name
+c0102cef vector66
+c0102ba2 vector29
+c0106bcc print_pgdir
+c0102f71 vector135
+c0100d00 kmonitor
+000078b1 _binary_obj___user_badsegment_out_size
+c0102d52 vector77
+c010318d vector180
+c0100eae clock_init
+c01032dd vector208
+c0102e0f vector98
+c0102e06 vector97
+c0105201 nr_free_pages
+c0104dc6 ksize
+000078ac _binary_obj___user_pgdir_out_size
+c010315d vector176
+c018540c _binary_obj___user_testbss_out_start
+c0103235 vector194
+c0102bbd vector32
+c01a1088 boot_cr3
+c01a1178 end
+c0103271 vector199
+c0109f3a do_exit
+c0102f41 vector131
+c01034ed vector252
+c0102aab vector0
+c01506fa _binary_obj___user_faultreadkernel_out_start
+c0139c86 _binary_obj___user_badsegment_out_end
+c010bb7e strfind
+0000796f _binary_obj___user_waitkill_out_size
+c0101724 cons_putc
+c01a1100 swap_out_seq_no
+c010be93 etext
+c0102fe9 vector145
+c0102e60 vector107
+c012aa00 boot_pgdir
+c0102c05 vector40
+c0102044 intr_enable
+c0102e33 vector102
+c018540c _binary_obj___user_spin_out_end
+c0102c95 vector56
+c0102d01 vector68
+c0102ae1 vector6
+c010b903 rand
+c0102f29 vector129
+c0103259 vector197
+c010303d vector152
+c012a5e0 __vectors
+c01033e5 vector230
+c010baf5 strncmp
+c0104b9b slob_init
+c0105848 get_pte
+c0101b81 ide_device_size
+c0102bea vector37
+c01a1128 check_swap_addr
+c01032b9 vector205
+c01030a9 vector161
+c019f048 current
+c010ba72 strncpy
+c01086ad copy_to_user
+c0102d1c vector71
+c010309d vector160
+c0157fb0 _binary_obj___user_forktest_out_start
+c0104baf kmalloc_init
+c0103331 vector215
+000078ab _binary_obj___user_spin_out_size
+c0103079 vector157
+c010204a intr_disable
+c01025cd print_regs
+c0102e8d vector112
+c01000bd grade_backtrace2
+c01031a5 vector182
+c0102b11 vector12
+c010be3b memcmp
+c0102e72 vector109
+c0102b51 vector20
+c0102c7a vector53
+c0102b3f vector18
+c010ae8c cpu_idle
+c0102df4 vector95
+c010a76c do_execve
+c01033b5 vector226
+c0102c56 vector49
+c0102c29 vector44
+c0102d5b vector78
+c0103139 vector173
+c0109211 swapfs_read
+c0102eba vector117
+c01023f2 trap_in_kernel
+c0106ec2 swap_set_unswappable
+c0102d7f vector82
+c0103385 vector222
+c0102af3 vector8
+c0103019 vector149
+c0100385 cputchar
+c010bd0a memset
+c01033fd vector232
+c0101bc0 ide_read_secs
+c0102e57 vector106
+c010336d vector220
+c0102dc7 vector90
+c01030c1 vector163
+c010b9c3 srand
+c0103415 vector234
+c0106e95 swap_map_swappable
+c0102ccb vector62
+c0102b7e vector25
+c0103265 vector198
+c0102ed5 vector120
+c01323d5 _binary_obj___user_badarg_out_end
+c01003e7 getchar
+c0105e58 page_remove
+c010b25d hash32
+c0102c5f vector50
+c0102b26 vector15
+c019f030 swap_out_num
+c010b41d printfmt
+c0157fb0 _binary_obj___user_faultreadkernel_out_end
+c010a8a2 do_yield
+c0103031 vector151
+c0102d88 vector83
+c0102dbe vector89
+c0102db5 vector88
+c01029f6 trap
+c0103181 vector179
+c0102bcf vector34
+c01276d6 __STABSTR_END__
+c0102c3b vector46
+c010baac strcmp
+c0102f65 vector134
+c0103391 vector223
+c0103355 vector218
+c0100556 debuginfo_eip
+c01a113c max_swap_offset
+000078b6 _binary_obj___user_faultreadkernel_out_size
+c0108195 insert_vma_struct
+c01020d6 pic_init
+c01033a9 vector225
+c01031e1 vector187
+c010575e pmm_init
+c0102bab vector30
+c0102f14 vector127
+c01a1074 ticks
+c010321d vector192
+c01030e5 vector166
+c0102d49 vector76
+c0102d40 vector75
+c0103241 vector195
+c0103025 vector150
+c0102ca7 vector58
+c01034bd vector248
+c016715b _binary_obj___user_forktree_out_end
+c0102ef0 vector123
+c0102dfd vector96
+000078c5 _binary_obj___user_exit_out_size
+c0102bb4 vector31
+c01032a1 vector203
+c0105164 alloc_pages
+c018cd0f _binary_obj___user_waitkill_out_start
+c0102fa1 vector139
+c0103049 vector153
+c01030cd vector164
+c0102ede vector121
+c0102ad8 vector5
+c017db61 _binary_obj___user_spin_out_start
+c01030f1 vector167
+c0103061 vector155
+c01034c9 vector249
+c010cd04 vpt
+c01034d5 vector250
+c0102ef9 vector124
+c0102e7b vector110
+c01032ad vector204
+c01506fa _binary_obj___user_faultread_out_end
+c01a1140 swap_page
+c016ea07 _binary_obj___user_pgdir_out_start
+c0102a97 __trapret
+c010032c vcprintf
+c0102f89 vector137
+000078b0 _binary_obj___user_faultread_out_size
+c0100e5e __warn
+c01034b1 vector247
+c0102b63 vector22
+c0103295 vector202
+c0102d25 vector72
+c0102c8c vector55
+c0100398 cputs
+c012a000 bootstacktop
+c0109a42 find_proc
+c0102f0b vector126
+c0102ce6 vector65
+c0102b99 vector28
+c0103109 vector169
+c0106e7d swap_tick_event
+c0103409 vector233
+c0106ee1 swap_out
+c0104cef kmalloc
+c0141585 _binary_obj___user_divzero_out_end
+c0108005 vma_create
+c0103001 vector147
+c0109906 proc_run
+c0128000 bootstack
+c019c000 __boot_pgdir
+c0102e45 vector104
+c01a1078 free_area
+c0102eb1 vector116
+c0139c86 _binary_obj___user_divzero_out_start
+c0109283 swapfs_write
+c010e6a0 __STAB_BEGIN__
+c0109028 user_mem_check
+c01a1154 check_ptep
+c0102c71 vector52
+c0102b38 vector17
+c01031bd vector184
+c010b9db strlen
+c01096a4 get_proc_name
+c019f038 pgfault_num
+c01032d1 vector207
+c019bf2a _binary_obj___user_yield_out_end
+c0103205 vector190
+c0101829 ide_init
+c0103451 vector239
+c0102deb vector94
+c0102de2 vector93
+c01031ed vector188
+c010bb4b strchr
+c0102c4d vector48
+c01a116c check_mm_struct
+c0106e65 swap_init_mm
+c01000e1 grade_backtrace1
+c0103361 vector219
+c010300d vector148
+c0103379 vector221
+c0102d6d vector80
+c0103121 vector171
+c0103055 vector154
+c0102be1 vector36
+c0103421 vector235
+c0102e4e vector105
+c0100dbd mon_kerninfo
+c01a108c pages
+c0102ff5 vector146
+c0105a3a unmap_range
+c0103211 vector191
+c010accd proc_init
+c0102e3c vector103
+c0100d60 mon_help
+c0102b0a vector11
+000078c9 _binary_obj___user_forktest_out_size
+c0105f55 tlb_invalidate
+c0102b1f vector14
diff -r -u -P ../../origin/labcodes/lab5/obj/libs/hash.d lab5/obj/libs/hash.d
--- ../../origin/labcodes/lab5/obj/libs/hash.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/libs/hash.d	2020-05-28 11:30:14.681041032 +0800
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
Binary files ../../origin/labcodes/lab5/obj/libs/hash.o and lab5/obj/libs/hash.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/libs/printfmt.d lab5/obj/libs/printfmt.d
--- ../../origin/labcodes/lab5/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/libs/printfmt.d	2020-05-28 11:30:14.681041032 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files ../../origin/labcodes/lab5/obj/libs/printfmt.o and lab5/obj/libs/printfmt.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/libs/rand.d lab5/obj/libs/rand.d
--- ../../origin/labcodes/lab5/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/libs/rand.d	2020-05-28 11:30:14.673041032 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files ../../origin/labcodes/lab5/obj/libs/rand.o and lab5/obj/libs/rand.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/libs/string.d lab5/obj/libs/string.d
--- ../../origin/labcodes/lab5/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/libs/string.d	2020-05-28 11:30:14.669041032 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files ../../origin/labcodes/lab5/obj/libs/string.o and lab5/obj/libs/string.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/sign/tools/sign.d lab5/obj/sign/tools/sign.d
--- ../../origin/labcodes/lab5/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/sign/tools/sign.d	2020-05-28 11:30:14.429041032 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files ../../origin/labcodes/lab5/obj/sign/tools/sign.o and lab5/obj/sign/tools/sign.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badarg.asm lab5/obj/user/badarg.asm
--- ../../origin/labcodes/lab5/obj/user/badarg.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badarg.asm	2020-05-28 11:30:16.013041032 +0800
@@ -0,0 +1,2554 @@
+
+obj/__user_badarg.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 10 80 00 	movl   $0x8010e0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 10 80 00 	movl   $0x8010fc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 11 80 00 	movl   $0x801118,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 12 80 00       	add    $0x801244,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 12 80 00 	mov    0x801268(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 11 80 00 	mov    0x8011e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 12 80 	movl   $0x801255,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 12 80 	movl   $0x80125e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 12 80 00       	mov    $0x801261,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  800f9a:	e8 26 f3 ff ff       	call   8002c5 <fork>
+  800f9f:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800fa3:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fa8:	75 33                	jne    800fdd <main+0x4c>
+        cprintf("fork ok.\n");
+  800faa:	c7 04 24 c0 13 80 00 	movl   $0x8013c0,(%esp)
+  800fb1:	e8 62 f1 ff ff       	call   800118 <cprintf>
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800fb6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fbd:	00 
+  800fbe:	eb 0a                	jmp    800fca <main+0x39>
+            yield();
+  800fc0:	e8 43 f3 ff ff       	call   800308 <yield>
+main(void) {
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+        cprintf("fork ok.\n");
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800fc5:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  800fca:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
+  800fcf:	7e ef                	jle    800fc0 <main+0x2f>
+            yield();
+        }
+        exit(0xbeaf);
+  800fd1:	c7 04 24 af be 00 00 	movl   $0xbeaf,(%esp)
+  800fd8:	e8 c9 f2 ff ff       	call   8002a6 <exit>
+    }
+    assert(pid > 0);
+  800fdd:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fe2:	7f 24                	jg     801008 <main+0x77>
+  800fe4:	c7 44 24 0c ca 13 80 	movl   $0x8013ca,0xc(%esp)
+  800feb:	00 
+  800fec:	c7 44 24 08 d2 13 80 	movl   $0x8013d2,0x8(%esp)
+  800ff3:	00 
+  800ff4:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+  800ffb:	00 
+  800ffc:	c7 04 24 e7 13 80 00 	movl   $0x8013e7,(%esp)
+  801003:	e8 27 f0 ff ff       	call   80002f <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  801008:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80100f:	00 
+  801010:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801017:	e8 d2 f2 ff ff       	call   8002ee <waitpid>
+  80101c:	85 c0                	test   %eax,%eax
+  80101e:	75 24                	jne    801044 <main+0xb3>
+  801020:	c7 44 24 0c f5 13 80 	movl   $0x8013f5,0xc(%esp)
+  801027:	00 
+  801028:	c7 44 24 08 d2 13 80 	movl   $0x8013d2,0x8(%esp)
+  80102f:	00 
+  801030:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+  801037:	00 
+  801038:	c7 04 24 e7 13 80 00 	movl   $0x8013e7,(%esp)
+  80103f:	e8 eb ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  801044:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+  80104b:	c0 
+  80104c:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801050:	89 04 24             	mov    %eax,(%esp)
+  801053:	e8 96 f2 ff ff       	call   8002ee <waitpid>
+  801058:	85 c0                	test   %eax,%eax
+  80105a:	75 24                	jne    801080 <main+0xef>
+  80105c:	c7 44 24 0c 0c 14 80 	movl   $0x80140c,0xc(%esp)
+  801063:	00 
+  801064:	c7 44 24 08 d2 13 80 	movl   $0x8013d2,0x8(%esp)
+  80106b:	00 
+  80106c:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
+  801073:	00 
+  801074:	c7 04 24 e7 13 80 00 	movl   $0x8013e7,(%esp)
+  80107b:	e8 af ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  801080:	8d 44 24 14          	lea    0x14(%esp),%eax
+  801084:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801088:	8b 44 24 18          	mov    0x18(%esp),%eax
+  80108c:	89 04 24             	mov    %eax,(%esp)
+  80108f:	e8 5a f2 ff ff       	call   8002ee <waitpid>
+  801094:	85 c0                	test   %eax,%eax
+  801096:	75 0b                	jne    8010a3 <main+0x112>
+  801098:	8b 44 24 14          	mov    0x14(%esp),%eax
+  80109c:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  8010a1:	74 24                	je     8010c7 <main+0x136>
+  8010a3:	c7 44 24 0c 34 14 80 	movl   $0x801434,0xc(%esp)
+  8010aa:	00 
+  8010ab:	c7 44 24 08 d2 13 80 	movl   $0x8013d2,0x8(%esp)
+  8010b2:	00 
+  8010b3:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  8010ba:	00 
+  8010bb:	c7 04 24 e7 13 80 00 	movl   $0x8013e7,(%esp)
+  8010c2:	e8 68 ef ff ff       	call   80002f <__panic>
+    cprintf("badarg pass.\n");
+  8010c7:	c7 04 24 69 14 80 00 	movl   $0x801469,(%esp)
+  8010ce:	e8 45 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010d3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010d8:	c9                   	leave  
+  8010d9:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badarg.d lab5/obj/user/badarg.d
--- ../../origin/labcodes/lab5/obj/user/badarg.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badarg.d	2020-05-28 11:30:14.633041032 +0800
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/badarg.o and lab5/obj/user/badarg.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badarg.sym lab5/obj/user/badarg.sym
--- ../../origin/labcodes/lab5/obj/user/badarg.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badarg.sym	2020-05-28 11:30:16.065041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+008010e0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b61 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badarg.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b60 __STAB_END__
+00800248 sys_kill
+00202b61 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+0020389a __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badsegment.asm lab5/obj/user/badsegment.asm
--- ../../origin/labcodes/lab5/obj/user/badsegment.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badsegment.asm	2020-05-28 11:30:16.021041032 +0800
@@ -0,0 +1,2465 @@
+
+obj/__user_badsegment.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 0f 80 00 	movl   $0x800fc0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 0f 80 00 	movl   $0x800fda,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 0f 80 00 	movl   $0x800fdc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 0f 80 00 	movl   $0x800fda,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 f8 0f 80 00 	movl   $0x800ff8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 24 11 80 00       	add    $0x801124,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 48 11 80 00 	mov    0x801148(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d c0 10 80 00 	mov    0x8010c0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 35 11 80 	movl   $0x801135,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 3e 11 80 	movl   $0x80113e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 41 11 80 00       	mov    $0x801141,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  800f9a:	66 b8 28 00          	mov    $0x28,%ax
+  800f9e:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  800fa0:	c7 44 24 08 a0 12 80 	movl   $0x8012a0,0x8(%esp)
+  800fa7:	00 
+  800fa8:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  800faf:	00 
+  800fb0:	c7 04 24 ab 12 80 00 	movl   $0x8012ab,(%esp)
+  800fb7:	e8 73 f0 ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badsegment.d lab5/obj/user/badsegment.d
--- ../../origin/labcodes/lab5/obj/user/badsegment.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badsegment.d	2020-05-28 11:30:14.625041032 +0800
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/badsegment.o and lab5/obj/user/badsegment.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/badsegment.sym lab5/obj/user/badsegment.sym
--- ../../origin/labcodes/lab5/obj/user/badsegment.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/badsegment.sym	2020-05-28 11:30:16.073041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fc0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a41 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010c0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badsegment.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a40 __STAB_END__
+00800248 sys_kill
+00202a41 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203764 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/divzero.asm lab5/obj/user/divzero.asm
--- ../../origin/labcodes/lab5/obj/user/divzero.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/divzero.asm	2020-05-28 11:30:16.061041032 +0800
@@ -0,0 +1,2470 @@
+
+obj/__user_divzero.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 0f 80 00 	movl   $0x800fe0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 0f 80 00 	movl   $0x800ffc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 10 80 00 	movl   $0x801018,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 11 80 00       	add    $0x801144,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 11 80 	movl   $0x801155,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 11 80 	movl   $0x80115e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  800f9a:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  800fa0:	b8 01 00 00 00       	mov    $0x1,%eax
+  800fa5:	99                   	cltd   
+  800fa6:	f7 f9                	idiv   %ecx
+  800fa8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fac:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800fb3:	e8 60 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  800fb8:	c7 44 24 08 ce 12 80 	movl   $0x8012ce,0x8(%esp)
+  800fbf:	00 
+  800fc0:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  800fc7:	00 
+  800fc8:	c7 04 24 d9 12 80 00 	movl   $0x8012d9,(%esp)
+  800fcf:	e8 5b f0 ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/divzero.d lab5/obj/user/divzero.d
--- ../../origin/labcodes/lab5/obj/user/divzero.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/divzero.d	2020-05-28 11:30:14.621041032 +0800
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/divzero.o and lab5/obj/user/divzero.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/divzero.sym lab5/obj/user/divzero.sym
--- ../../origin/labcodes/lab5/obj/user/divzero.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/divzero.sym	2020-05-28 11:30:16.109041032 +0800
@@ -0,0 +1,75 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202a4d .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 divzero.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a4c __STAB_END__
+00800248 sys_kill
+00202a4d __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203779 __STABSTR_END__
+00800baa strcmp
+00802008 zero
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/exit.asm lab5/obj/user/exit.asm
--- ../../origin/labcodes/lab5/obj/user/exit.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/exit.asm	2020-05-28 11:30:16.197041032 +0800
@@ -0,0 +1,2561 @@
+
+obj/__user_exit.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 64 12 80 00       	add    $0x801264,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  800f9a:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  800fa1:	e8 72 f1 ff ff       	call   800118 <cprintf>
+    if ((pid = fork()) == 0) {
+  800fa6:	e8 1a f3 ff ff       	call   8002c5 <fork>
+  800fab:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800faf:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  800fb4:	75 3c                	jne    800ff2 <main+0x61>
+        cprintf("I am the child.\n");
+  800fb6:	c7 04 24 07 14 80 00 	movl   $0x801407,(%esp)
+  800fbd:	e8 56 f1 ff ff       	call   800118 <cprintf>
+        yield();
+  800fc2:	e8 41 f3 ff ff       	call   800308 <yield>
+        yield();
+  800fc7:	e8 3c f3 ff ff       	call   800308 <yield>
+        yield();
+  800fcc:	e8 37 f3 ff ff       	call   800308 <yield>
+        yield();
+  800fd1:	e8 32 f3 ff ff       	call   800308 <yield>
+        yield();
+  800fd6:	e8 2d f3 ff ff       	call   800308 <yield>
+        yield();
+  800fdb:	e8 28 f3 ff ff       	call   800308 <yield>
+        yield();
+  800fe0:	e8 23 f3 ff ff       	call   800308 <yield>
+        exit(magic);
+  800fe5:	a1 08 20 80 00       	mov    0x802008,%eax
+  800fea:	89 04 24             	mov    %eax,(%esp)
+  800fed:	e8 b4 f2 ff ff       	call   8002a6 <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  800ff2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800ff6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ffa:	c7 04 24 18 14 80 00 	movl   $0x801418,(%esp)
+  801001:	e8 12 f1 ff ff       	call   800118 <cprintf>
+    }
+    assert(pid > 0);
+  801006:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  80100b:	7f 24                	jg     801031 <main+0xa0>
+  80100d:	c7 44 24 0c 3a 14 80 	movl   $0x80143a,0xc(%esp)
+  801014:	00 
+  801015:	c7 44 24 08 42 14 80 	movl   $0x801442,0x8(%esp)
+  80101c:	00 
+  80101d:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%esp)
+  801024:	00 
+  801025:	c7 04 24 57 14 80 00 	movl   $0x801457,(%esp)
+  80102c:	e8 fe ef ff ff       	call   80002f <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  801031:	c7 04 24 64 14 80 00 	movl   $0x801464,(%esp)
+  801038:	e8 db f0 ff ff       	call   800118 <cprintf>
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  80103d:	8d 44 24 18          	lea    0x18(%esp),%eax
+  801041:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801045:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801049:	89 04 24             	mov    %eax,(%esp)
+  80104c:	e8 9d f2 ff ff       	call   8002ee <waitpid>
+  801051:	85 c0                	test   %eax,%eax
+  801053:	75 0d                	jne    801062 <main+0xd1>
+  801055:	8b 54 24 18          	mov    0x18(%esp),%edx
+  801059:	a1 08 20 80 00       	mov    0x802008,%eax
+  80105e:	39 c2                	cmp    %eax,%edx
+  801060:	74 24                	je     801086 <main+0xf5>
+  801062:	c7 44 24 0c 84 14 80 	movl   $0x801484,0xc(%esp)
+  801069:	00 
+  80106a:	c7 44 24 08 42 14 80 	movl   $0x801442,0x8(%esp)
+  801071:	00 
+  801072:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
+  801079:	00 
+  80107a:	c7 04 24 57 14 80 00 	movl   $0x801457,(%esp)
+  801081:	e8 a9 ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  801086:	8d 44 24 18          	lea    0x18(%esp),%eax
+  80108a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80108e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801092:	89 04 24             	mov    %eax,(%esp)
+  801095:	e8 54 f2 ff ff       	call   8002ee <waitpid>
+  80109a:	85 c0                	test   %eax,%eax
+  80109c:	74 09                	je     8010a7 <main+0x116>
+  80109e:	e8 2f f2 ff ff       	call   8002d2 <wait>
+  8010a3:	85 c0                	test   %eax,%eax
+  8010a5:	75 24                	jne    8010cb <main+0x13a>
+  8010a7:	c7 44 24 0c b0 14 80 	movl   $0x8014b0,0xc(%esp)
+  8010ae:	00 
+  8010af:	c7 44 24 08 42 14 80 	movl   $0x801442,0x8(%esp)
+  8010b6:	00 
+  8010b7:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  8010be:	00 
+  8010bf:	c7 04 24 57 14 80 00 	movl   $0x801457,(%esp)
+  8010c6:	e8 64 ef ff ff       	call   80002f <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  8010cb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010cf:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010d3:	c7 04 24 d8 14 80 00 	movl   $0x8014d8,(%esp)
+  8010da:	e8 39 f0 ff ff       	call   800118 <cprintf>
+
+    cprintf("exit pass.\n");
+  8010df:	c7 04 24 e8 14 80 00 	movl   $0x8014e8,(%esp)
+  8010e6:	e8 2d f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010eb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010f0:	c9                   	leave  
+  8010f1:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/exit.d lab5/obj/user/exit.d
--- ../../origin/labcodes/lab5/obj/user/exit.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/exit.d	2020-05-28 11:30:14.609041032 +0800
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/exit.o and lab5/obj/user/exit.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/exit.sym lab5/obj/user/exit.sym
--- ../../origin/labcodes/lab5/obj/user/exit.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/exit.sym	2020-05-28 11:30:16.241041032 +0800
@@ -0,0 +1,74 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b91 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 exit.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b90 __STAB_END__
+00800248 sys_kill
+00202b91 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+002038d0 __STABSTR_END__
+00800baa strcmp
+00802008 magic
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultread.asm lab5/obj/user/faultread.asm
--- ../../origin/labcodes/lab5/obj/user/faultread.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultread.asm	2020-05-28 11:30:16.089041032 +0800
@@ -0,0 +1,2467 @@
+
+obj/__user_faultread.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 0f 80 00 	movl   $0x800fe0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 0f 80 00 	movl   $0x800ffc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 10 80 00 	movl   $0x801018,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 11 80 00       	add    $0x801144,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 11 80 	movl   $0x801155,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 11 80 	movl   $0x80115e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  800f9a:	b8 00 00 00 00       	mov    $0x0,%eax
+  800f9f:	8b 00                	mov    (%eax),%eax
+  800fa1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fa5:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800fac:	e8 67 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  800fb1:	c7 44 24 08 d4 12 80 	movl   $0x8012d4,0x8(%esp)
+  800fb8:	00 
+  800fb9:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800fc0:	00 
+  800fc1:	c7 04 24 df 12 80 00 	movl   $0x8012df,(%esp)
+  800fc8:	e8 62 f0 ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultread.d lab5/obj/user/faultread.d
--- ../../origin/labcodes/lab5/obj/user/faultread.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultread.d	2020-05-28 11:30:14.597041032 +0800
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultreadkernel.asm lab5/obj/user/faultreadkernel.asm
--- ../../origin/labcodes/lab5/obj/user/faultreadkernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultreadkernel.asm	2020-05-28 11:30:16.149041032 +0800
@@ -0,0 +1,2467 @@
+
+obj/__user_faultreadkernel.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 0f 80 00 	movl   $0x800fe0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 0f 80 00 	movl   $0x800ffc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 10 80 00 	movl   $0x801018,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 11 80 00       	add    $0x801144,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 11 80 	movl   $0x801155,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 11 80 	movl   $0x80115e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  800f9a:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  800f9f:	8b 00                	mov    (%eax),%eax
+  800fa1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fa5:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800fac:	e8 67 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  800fb1:	c7 44 24 08 de 12 80 	movl   $0x8012de,0x8(%esp)
+  800fb8:	00 
+  800fb9:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800fc0:	00 
+  800fc1:	c7 04 24 e9 12 80 00 	movl   $0x8012e9,(%esp)
+  800fc8:	e8 62 f0 ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultreadkernel.d lab5/obj/user/faultreadkernel.d
--- ../../origin/labcodes/lab5/obj/user/faultreadkernel.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultreadkernel.d	2020-05-28 11:30:14.601041032 +0800
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/faultreadkernel.o and lab5/obj/user/faultreadkernel.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultreadkernel.sym lab5/obj/user/faultreadkernel.sym
--- ../../origin/labcodes/lab5/obj/user/faultreadkernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultreadkernel.sym	2020-05-28 11:30:16.245041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a41 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultreadkernel.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a40 __STAB_END__
+00800248 sys_kill
+00202a41 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203769 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
Binary files ../../origin/labcodes/lab5/obj/user/faultread.o and lab5/obj/user/faultread.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/faultread.sym lab5/obj/user/faultread.sym
--- ../../origin/labcodes/lab5/obj/user/faultread.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/faultread.sym	2020-05-28 11:30:16.121041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a41 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultread.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a40 __STAB_END__
+00800248 sys_kill
+00202a41 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203763 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktest.asm lab5/obj/user/forktest.asm
--- ../../origin/labcodes/lab5/obj/user/forktest.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktest.asm	2020-05-28 11:30:16.161041032 +0800
@@ -0,0 +1,2563 @@
+
+obj/__user_forktest.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 10 80 00 	movl   $0x8010c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 10 80 00 	movl   $0x8010dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 f8 10 80 00 	movl   $0x8010f8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 24 12 80 00       	add    $0x801224,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 35 12 80 	movl   $0x801235,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 3e 12 80 	movl   $0x80123e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800f9a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fa1:	00 
+  800fa2:	eb 60                	jmp    801004 <main+0x73>
+        if ((pid = fork()) == 0) {
+  800fa4:	e8 1c f3 ff ff       	call   8002c5 <fork>
+  800fa9:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800fad:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fb2:	75 20                	jne    800fd4 <main+0x43>
+            cprintf("I am child %d\n", n);
+  800fb4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800fb8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fbc:	c7 04 24 a4 13 80 00 	movl   $0x8013a4,(%esp)
+  800fc3:	e8 50 f1 ff ff       	call   800118 <cprintf>
+            exit(0);
+  800fc8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800fcf:	e8 d2 f2 ff ff       	call   8002a6 <exit>
+        }
+        assert(pid > 0);
+  800fd4:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fd9:	7f 24                	jg     800fff <main+0x6e>
+  800fdb:	c7 44 24 0c b3 13 80 	movl   $0x8013b3,0xc(%esp)
+  800fe2:	00 
+  800fe3:	c7 44 24 08 bb 13 80 	movl   $0x8013bb,0x8(%esp)
+  800fea:	00 
+  800feb:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  800ff2:	00 
+  800ff3:	c7 04 24 d0 13 80 00 	movl   $0x8013d0,(%esp)
+  800ffa:	e8 30 f0 ff ff       	call   80002f <__panic>
+const int max_child = 32;
+
+int
+main(void) {
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800fff:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801004:	b8 20 00 00 00       	mov    $0x20,%eax
+  801009:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  80100d:	7c 95                	jl     800fa4 <main+0x13>
+            exit(0);
+        }
+        assert(pid > 0);
+    }
+
+    if (n > max_child) {
+  80100f:	b8 20 00 00 00       	mov    $0x20,%eax
+  801014:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  801018:	7e 24                	jle    80103e <main+0xad>
+        panic("fork claimed to work %d times!\n", n);
+  80101a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80101e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801022:	c7 44 24 08 e0 13 80 	movl   $0x8013e0,0x8(%esp)
+  801029:	00 
+  80102a:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  801031:	00 
+  801032:	c7 04 24 d0 13 80 00 	movl   $0x8013d0,(%esp)
+  801039:	e8 f1 ef ff ff       	call   80002f <__panic>
+    }
+
+    for (; n > 0; n --) {
+  80103e:	eb 2a                	jmp    80106a <main+0xd9>
+        if (wait() != 0) {
+  801040:	e8 8d f2 ff ff       	call   8002d2 <wait>
+  801045:	85 c0                	test   %eax,%eax
+  801047:	74 1c                	je     801065 <main+0xd4>
+            panic("wait stopped early\n");
+  801049:	c7 44 24 08 00 14 80 	movl   $0x801400,0x8(%esp)
+  801050:	00 
+  801051:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  801058:	00 
+  801059:	c7 04 24 d0 13 80 00 	movl   $0x8013d0,(%esp)
+  801060:	e8 ca ef ff ff       	call   80002f <__panic>
+
+    if (n > max_child) {
+        panic("fork claimed to work %d times!\n", n);
+    }
+
+    for (; n > 0; n --) {
+  801065:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
+  80106a:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  80106f:	7f cf                	jg     801040 <main+0xaf>
+        if (wait() != 0) {
+            panic("wait stopped early\n");
+        }
+    }
+
+    if (wait() == 0) {
+  801071:	e8 5c f2 ff ff       	call   8002d2 <wait>
+  801076:	85 c0                	test   %eax,%eax
+  801078:	75 1c                	jne    801096 <main+0x105>
+        panic("wait got too many\n");
+  80107a:	c7 44 24 08 14 14 80 	movl   $0x801414,0x8(%esp)
+  801081:	00 
+  801082:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  801089:	00 
+  80108a:	c7 04 24 d0 13 80 00 	movl   $0x8013d0,(%esp)
+  801091:	e8 99 ef ff ff       	call   80002f <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  801096:	c7 04 24 27 14 80 00 	movl   $0x801427,(%esp)
+  80109d:	e8 76 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010a2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010a7:	c9                   	leave  
+  8010a8:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktest.d lab5/obj/user/forktest.d
--- ../../origin/labcodes/lab5/obj/user/forktest.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktest.d	2020-05-28 11:30:14.605041032 +0800
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files ../../origin/labcodes/lab5/obj/user/forktest.o and lab5/obj/user/forktest.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktest.sym lab5/obj/user/forktest.sym
--- ../../origin/labcodes/lab5/obj/user/forktest.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktest.sym	2020-05-28 11:30:16.201041032 +0800
@@ -0,0 +1,74 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b61 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011c0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktest.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b60 __STAB_END__
+00800248 sys_kill
+00202b61 __STABSTR_BEGIN__
+0080002f __panic
+008013a0 max_child
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+002038a5 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktree.asm lab5/obj/user/forktree.asm
--- ../../origin/labcodes/lab5/obj/user/forktree.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktree.asm	2020-05-28 11:30:16.229041032 +0800
@@ -0,0 +1,2543 @@
+
+obj/__user_forktree.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 80 10 80 00 	movl   $0x801080,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 9a 10 80 00 	movl   $0x80109a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 9c 10 80 00 	movl   $0x80109c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 9a 10 80 00 	movl   $0x80109a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 b8 10 80 00 	movl   $0x8010b8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 fb 0c 00 00       	call   801048 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 e4 11 80 00       	add    $0x8011e4,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 08 12 80 00 	mov    0x801208(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d 80 11 80 00 	mov    0x801180(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 f5 11 80 	movl   $0x8011f5,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 fe 11 80 	movl   $0x8011fe,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 01 12 80 00       	mov    $0x801201,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 ec 38             	sub    $0x38,%esp
+  800f97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f9a:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  800f9d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fa0:	89 04 24             	mov    %eax,(%esp)
+  800fa3:	e8 31 fb ff ff       	call   800ad9 <strlen>
+  800fa8:	83 f8 03             	cmp    $0x3,%eax
+  800fab:	77 4f                	ja     800ffc <forkchild+0x6b>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  800fad:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  800fb1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800fbc:	c7 44 24 08 60 13 80 	movl   $0x801360,0x8(%esp)
+  800fc3:	00 
+  800fc4:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+  800fcb:	00 
+  800fcc:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800fcf:	89 04 24             	mov    %eax,(%esp)
+  800fd2:	e8 92 f9 ff ff       	call   800969 <snprintf>
+    if (fork() == 0) {
+  800fd7:	e8 e9 f2 ff ff       	call   8002c5 <fork>
+  800fdc:	85 c0                	test   %eax,%eax
+  800fde:	75 1c                	jne    800ffc <forkchild+0x6b>
+        forktree(nxt);
+  800fe0:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800fe3:	89 04 24             	mov    %eax,(%esp)
+  800fe6:	e8 13 00 00 00       	call   800ffe <forktree>
+        yield();
+  800feb:	e8 18 f3 ff ff       	call   800308 <yield>
+        exit(0);
+  800ff0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800ff7:	e8 aa f2 ff ff       	call   8002a6 <exit>
+    }
+}
+  800ffc:	c9                   	leave  
+  800ffd:	c3                   	ret    
+
+00800ffe <forktree>:
+
+void
+forktree(const char *cur) {
+  800ffe:	55                   	push   %ebp
+  800fff:	89 e5                	mov    %esp,%ebp
+  801001:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  801004:	e8 1f f3 ff ff       	call   800328 <getpid>
+  801009:	8b 55 08             	mov    0x8(%ebp),%edx
+  80100c:	89 54 24 08          	mov    %edx,0x8(%esp)
+  801010:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801014:	c7 04 24 65 13 80 00 	movl   $0x801365,(%esp)
+  80101b:	e8 f8 f0 ff ff       	call   800118 <cprintf>
+
+    forkchild(cur, '0');
+  801020:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
+  801027:	00 
+  801028:	8b 45 08             	mov    0x8(%ebp),%eax
+  80102b:	89 04 24             	mov    %eax,(%esp)
+  80102e:	e8 5e ff ff ff       	call   800f91 <forkchild>
+    forkchild(cur, '1');
+  801033:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
+  80103a:	00 
+  80103b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80103e:	89 04 24             	mov    %eax,(%esp)
+  801041:	e8 4b ff ff ff       	call   800f91 <forkchild>
+}
+  801046:	c9                   	leave  
+  801047:	c3                   	ret    
+
+00801048 <main>:
+
+int
+main(void) {
+  801048:	55                   	push   %ebp
+  801049:	89 e5                	mov    %esp,%ebp
+  80104b:	83 e4 f0             	and    $0xfffffff0,%esp
+  80104e:	83 ec 10             	sub    $0x10,%esp
+    forktree("");
+  801051:	c7 04 24 76 13 80 00 	movl   $0x801376,(%esp)
+  801058:	e8 a1 ff ff ff       	call   800ffe <forktree>
+    return 0;
+  80105d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801062:	c9                   	leave  
+  801063:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktree.d lab5/obj/user/forktree.d
--- ../../origin/labcodes/lab5/obj/user/forktree.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktree.d	2020-05-28 11:30:14.589041032 +0800
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files ../../origin/labcodes/lab5/obj/user/forktree.o and lab5/obj/user/forktree.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/forktree.sym lab5/obj/user/forktree.sym
--- ../../origin/labcodes/lab5/obj/user/forktree.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/forktree.sym	2020-05-28 11:30:16.253041032 +0800
@@ -0,0 +1,75 @@
+00800020 .text
+00801080 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b61 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801180 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktree.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b60 __STAB_END__
+00800248 sys_kill
+00202b61 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800ffe forktree
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00801048 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203913 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
+00800f91 forkchild
diff -r -u -P ../../origin/labcodes/lab5/obj/user/hello.asm lab5/obj/user/hello.asm
--- ../../origin/labcodes/lab5/obj/user/hello.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/hello.asm	2020-05-28 11:30:16.281041032 +0800
@@ -0,0 +1,2470 @@
+
+obj/__user_hello.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 0f 80 00 	movl   $0x800fe0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 0f 80 00 	movl   $0x800ffc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 10 80 00 	movl   $0x801018,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 11 80 00       	add    $0x801144,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 11 80 	movl   $0x801155,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 11 80 	movl   $0x80115e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    cprintf("Hello world!!.\n");
+  800f9a:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800fa1:	e8 72 f1 ff ff       	call   800118 <cprintf>
+    cprintf("I am process %d.\n", getpid());
+  800fa6:	e8 7d f3 ff ff       	call   800328 <getpid>
+  800fab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800faf:	c7 04 24 d0 12 80 00 	movl   $0x8012d0,(%esp)
+  800fb6:	e8 5d f1 ff ff       	call   800118 <cprintf>
+    cprintf("hello pass.\n");
+  800fbb:	c7 04 24 e2 12 80 00 	movl   $0x8012e2,(%esp)
+  800fc2:	e8 51 f1 ff ff       	call   800118 <cprintf>
+    return 0;
+  800fc7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fcc:	c9                   	leave  
+  800fcd:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/hello.d lab5/obj/user/hello.d
--- ../../origin/labcodes/lab5/obj/user/hello.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/hello.d	2020-05-28 11:30:14.585041032 +0800
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/hello.o and lab5/obj/user/hello.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/hello.sym lab5/obj/user/hello.sym
--- ../../origin/labcodes/lab5/obj/user/hello.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/hello.sym	2020-05-28 11:30:16.305041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a65 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 hello.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a64 __STAB_END__
+00800248 sys_kill
+00202a65 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203783 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/initcode.d lab5/obj/user/libs/initcode.d
--- ../../origin/labcodes/lab5/obj/user/libs/initcode.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/initcode.d	2020-05-28 11:30:14.673041032 +0800
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
Binary files ../../origin/labcodes/lab5/obj/user/libs/initcode.o and lab5/obj/user/libs/initcode.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/panic.d lab5/obj/user/libs/panic.d
--- ../../origin/labcodes/lab5/obj/user/libs/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/panic.d	2020-05-28 11:30:14.657041032 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
Binary files ../../origin/labcodes/lab5/obj/user/libs/panic.o and lab5/obj/user/libs/panic.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/stdio.d lab5/obj/user/libs/stdio.d
--- ../../origin/labcodes/lab5/obj/user/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/stdio.d	2020-05-28 11:30:14.669041032 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
Binary files ../../origin/labcodes/lab5/obj/user/libs/stdio.o and lab5/obj/user/libs/stdio.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/syscall.d lab5/obj/user/libs/syscall.d
--- ../../origin/labcodes/lab5/obj/user/libs/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/syscall.d	2020-05-28 11:30:14.661041032 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
Binary files ../../origin/labcodes/lab5/obj/user/libs/syscall.o and lab5/obj/user/libs/syscall.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/ulib.d lab5/obj/user/libs/ulib.d
--- ../../origin/labcodes/lab5/obj/user/libs/ulib.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/ulib.d	2020-05-28 11:30:14.649041032 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/libs/ulib.o and lab5/obj/user/libs/ulib.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/libs/umain.d lab5/obj/user/libs/umain.d
--- ../../origin/labcodes/lab5/obj/user/libs/umain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/libs/umain.d	2020-05-28 11:30:14.641041032 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
Binary files ../../origin/labcodes/lab5/obj/user/libs/umain.o and lab5/obj/user/libs/umain.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/pgdir.asm lab5/obj/user/pgdir.asm
--- ../../origin/labcodes/lab5/obj/user/pgdir.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/pgdir.asm	2020-05-28 11:30:16.261041032 +0800
@@ -0,0 +1,2469 @@
+
+obj/__user_pgdir.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 0f 80 00 	movl   $0x800fe0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 0f 80 00 	movl   $0x800ffc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 0f 80 00 	movl   $0x800ffa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 18 10 80 00 	movl   $0x801018,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 44 11 80 00       	add    $0x801144,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 55 11 80 	movl   $0x801155,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 5e 11 80 	movl   $0x80115e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  800f9a:	e8 89 f3 ff ff       	call   800328 <getpid>
+  800f9f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fa3:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800faa:	e8 69 f1 ff ff       	call   800118 <cprintf>
+    print_pgdir();
+  800faf:	e8 81 f3 ff ff       	call   800335 <print_pgdir>
+    cprintf("pgdir pass.\n");
+  800fb4:	c7 04 24 d7 12 80 00 	movl   $0x8012d7,(%esp)
+  800fbb:	e8 58 f1 ff ff       	call   800118 <cprintf>
+    return 0;
+  800fc0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fc5:	c9                   	leave  
+  800fc6:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/pgdir.d lab5/obj/user/pgdir.d
--- ../../origin/labcodes/lab5/obj/user/pgdir.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/pgdir.d	2020-05-28 11:30:14.569041032 +0800
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/pgdir.o and lab5/obj/user/pgdir.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/pgdir.sym lab5/obj/user/pgdir.sym
--- ../../origin/labcodes/lab5/obj/user/pgdir.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/pgdir.sym	2020-05-28 11:30:16.317041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a65 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010e0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 pgdir.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a64 __STAB_END__
+00800248 sys_kill
+00202a65 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203783 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/softint.asm lab5/obj/user/softint.asm
--- ../../origin/labcodes/lab5/obj/user/softint.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/softint.asm	2020-05-28 11:30:16.357041032 +0800
@@ -0,0 +1,2463 @@
+
+obj/__user_softint.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 0f 80 00 	movl   $0x800fc0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 0f 80 00 	movl   $0x800fda,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 0f 80 00 	movl   $0x800fdc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 0f 80 00 	movl   $0x800fda,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 f8 0f 80 00 	movl   $0x800ff8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 24 11 80 00       	add    $0x801124,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 48 11 80 00 	mov    0x801148(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d c0 10 80 00 	mov    0x8010c0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 35 11 80 	movl   $0x801135,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 3e 11 80 	movl   $0x80113e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 41 11 80 00       	mov    $0x801141,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("int $14");
+  800f9a:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  800f9c:	c7 44 24 08 a0 12 80 	movl   $0x8012a0,0x8(%esp)
+  800fa3:	00 
+  800fa4:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800fab:	00 
+  800fac:	c7 04 24 ab 12 80 00 	movl   $0x8012ab,(%esp)
+  800fb3:	e8 77 f0 ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/softint.d lab5/obj/user/softint.d
--- ../../origin/labcodes/lab5/obj/user/softint.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/softint.d	2020-05-28 11:30:14.573041032 +0800
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/softint.o and lab5/obj/user/softint.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/softint.sym lab5/obj/user/softint.sym
--- ../../origin/labcodes/lab5/obj/user/softint.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/softint.sym	2020-05-28 11:30:16.417041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00800fc0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202a41 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008010c0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 softint.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202a40 __STAB_END__
+00800248 sys_kill
+00202a41 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203761 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/spin.asm lab5/obj/user/spin.asm
--- ../../origin/labcodes/lab5/obj/user/spin.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/spin.asm	2020-05-28 11:30:16.341041032 +0800
@@ -0,0 +1,2536 @@
+
+obj/__user_spin.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 10 80 00 	movl   $0x8010c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 10 80 00 	movl   $0x8010dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 f8 10 80 00 	movl   $0x8010f8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 24 12 80 00       	add    $0x801224,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 35 12 80 	movl   $0x801235,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 3e 12 80 	movl   $0x80123e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  800f9a:	c7 04 24 a0 13 80 00 	movl   $0x8013a0,(%esp)
+  800fa1:	e8 72 f1 ff ff       	call   800118 <cprintf>
+    if ((pid = fork()) == 0) {
+  800fa6:	e8 1a f3 ff ff       	call   8002c5 <fork>
+  800fab:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800faf:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  800fb4:	75 0e                	jne    800fc4 <main+0x33>
+        cprintf("I am the child. spinning ...\n");
+  800fb6:	c7 04 24 c7 13 80 00 	movl   $0x8013c7,(%esp)
+  800fbd:	e8 56 f1 ff ff       	call   800118 <cprintf>
+        while (1);
+  800fc2:	eb fe                	jmp    800fc2 <main+0x31>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  800fc4:	c7 04 24 e8 13 80 00 	movl   $0x8013e8,(%esp)
+  800fcb:	e8 48 f1 ff ff       	call   800118 <cprintf>
+
+    yield();
+  800fd0:	e8 33 f3 ff ff       	call   800308 <yield>
+    yield();
+  800fd5:	e8 2e f3 ff ff       	call   800308 <yield>
+    yield();
+  800fda:	e8 29 f3 ff ff       	call   800308 <yield>
+
+    cprintf("I am the parent.  Killing the child...\n");
+  800fdf:	c7 04 24 10 14 80 00 	movl   $0x801410,(%esp)
+  800fe6:	e8 2d f1 ff ff       	call   800118 <cprintf>
+
+    assert((ret = kill(pid)) == 0);
+  800feb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800fef:	89 04 24             	mov    %eax,(%esp)
+  800ff2:	e8 1e f3 ff ff       	call   800315 <kill>
+  800ff7:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800ffb:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801000:	74 24                	je     801026 <main+0x95>
+  801002:	c7 44 24 0c 38 14 80 	movl   $0x801438,0xc(%esp)
+  801009:	00 
+  80100a:	c7 44 24 08 4f 14 80 	movl   $0x80144f,0x8(%esp)
+  801011:	00 
+  801012:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+  801019:	00 
+  80101a:	c7 04 24 64 14 80 00 	movl   $0x801464,(%esp)
+  801021:	e8 09 f0 ff ff       	call   80002f <__panic>
+    cprintf("kill returns %d\n", ret);
+  801026:	8b 44 24 18          	mov    0x18(%esp),%eax
+  80102a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80102e:	c7 04 24 70 14 80 00 	movl   $0x801470,(%esp)
+  801035:	e8 de f0 ff ff       	call   800118 <cprintf>
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  80103a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801041:	00 
+  801042:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801046:	89 04 24             	mov    %eax,(%esp)
+  801049:	e8 a0 f2 ff ff       	call   8002ee <waitpid>
+  80104e:	89 44 24 18          	mov    %eax,0x18(%esp)
+  801052:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801057:	74 24                	je     80107d <main+0xec>
+  801059:	c7 44 24 0c 84 14 80 	movl   $0x801484,0xc(%esp)
+  801060:	00 
+  801061:	c7 44 24 08 4f 14 80 	movl   $0x80144f,0x8(%esp)
+  801068:	00 
+  801069:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  801070:	00 
+  801071:	c7 04 24 64 14 80 00 	movl   $0x801464,(%esp)
+  801078:	e8 b2 ef ff ff       	call   80002f <__panic>
+    cprintf("wait returns %d\n", ret);
+  80107d:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801081:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801085:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  80108c:	e8 87 f0 ff ff       	call   800118 <cprintf>
+
+    cprintf("spin may pass.\n");
+  801091:	c7 04 24 b5 14 80 00 	movl   $0x8014b5,(%esp)
+  801098:	e8 7b f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  80109d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010a2:	c9                   	leave  
+  8010a3:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/spin.d lab5/obj/user/spin.d
--- ../../origin/labcodes/lab5/obj/user/spin.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/spin.d	2020-05-28 11:30:14.569041032 +0800
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/spin.o and lab5/obj/user/spin.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/spin.sym lab5/obj/user/spin.sym
--- ../../origin/labcodes/lab5/obj/user/spin.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/spin.sym	2020-05-28 11:30:16.393041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b31 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011c0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 spin.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b30 __STAB_END__
+00800248 sys_kill
+00202b31 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00203858 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/testbss.asm lab5/obj/user/testbss.asm
--- ../../origin/labcodes/lab5/obj/user/testbss.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/testbss.asm	2020-05-28 11:30:16.369041032 +0800
@@ -0,0 +1,2564 @@
+
+obj/__user_testbss.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 10 80 00 	movl   $0x8010c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 10 80 00 	movl   $0x8010dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 f8 10 80 00 	movl   $0x8010f8,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 24 12 80 00       	add    $0x801224,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 35 12 80 	movl   $0x801235,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 3e 12 80 	movl   $0x80123e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    cprintf("Making sure bss works right...\n");
+  800f9a:	c7 04 24 a0 13 80 00 	movl   $0x8013a0,(%esp)
+  800fa1:	e8 72 f1 ff ff       	call   800118 <cprintf>
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fa6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fad:	00 
+  800fae:	eb 38                	jmp    800fe8 <main+0x57>
+        if (bigarray[i] != 0) {
+  800fb0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800fb4:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  800fbb:	85 c0                	test   %eax,%eax
+  800fbd:	74 24                	je     800fe3 <main+0x52>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  800fbf:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800fc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800fc7:	c7 44 24 08 c0 13 80 	movl   $0x8013c0,0x8(%esp)
+  800fce:	00 
+  800fcf:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  800fd6:	00 
+  800fd7:	c7 04 24 dd 13 80 00 	movl   $0x8013dd,(%esp)
+  800fde:	e8 4c f0 ff ff       	call   80002f <__panic>
+
+int
+main(void) {
+    cprintf("Making sure bss works right...\n");
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fe3:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  800fe8:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  800fef:	00 
+  800ff0:	7e be                	jle    800fb0 <main+0x1f>
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800ff2:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800ff9:	00 
+  800ffa:	eb 14                	jmp    801010 <main+0x7f>
+        bigarray[i] = i;
+  800ffc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801000:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801004:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80100b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801010:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  801017:	00 
+  801018:	7e e2                	jle    800ffc <main+0x6b>
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80101a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801021:	00 
+  801022:	eb 3c                	jmp    801060 <main+0xcf>
+        if (bigarray[i] != i) {
+  801024:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801028:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  80102f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801033:	39 c2                	cmp    %eax,%edx
+  801035:	74 24                	je     80105b <main+0xca>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  801037:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80103b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80103f:	c7 44 24 08 ec 13 80 	movl   $0x8013ec,0x8(%esp)
+  801046:	00 
+  801047:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
+  80104e:	00 
+  80104f:	c7 04 24 dd 13 80 00 	movl   $0x8013dd,(%esp)
+  801056:	e8 d4 ef ff ff       	call   80002f <__panic>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80105b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801060:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  801067:	00 
+  801068:	7e ba                	jle    801024 <main+0x93>
+        if (bigarray[i] != i) {
+            panic("bigarray[%d] didn't hold its value!\n", i);
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  80106a:	c7 04 24 14 14 80 00 	movl   $0x801414,(%esp)
+  801071:	e8 a2 f0 ff ff       	call   800118 <cprintf>
+    cprintf("testbss may pass.\n");
+  801076:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  80107d:	e8 96 f0 ff ff       	call   800118 <cprintf>
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  801082:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  801089:	00 00 00 
+    asm volatile ("int $0x14");
+  80108c:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  80108e:	c7 44 24 08 5a 14 80 	movl   $0x80145a,0x8(%esp)
+  801095:	00 
+  801096:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
+  80109d:	00 
+  80109e:	c7 04 24 dd 13 80 00 	movl   $0x8013dd,(%esp)
+  8010a5:	e8 85 ef ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/testbss.d lab5/obj/user/testbss.d
--- ../../origin/labcodes/lab5/obj/user/testbss.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/testbss.d	2020-05-28 11:30:14.553041032 +0800
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files ../../origin/labcodes/lab5/obj/user/testbss.o and lab5/obj/user/testbss.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/testbss.sym lab5/obj/user/testbss.sym
--- ../../origin/labcodes/lab5/obj/user/testbss.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/testbss.sym	2020-05-28 11:30:16.425041032 +0800
@@ -0,0 +1,75 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202b49 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011c0 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 testbss.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202b48 __STAB_END__
+00800248 sys_kill
+00202b49 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00802020 bigarray
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+002038a9 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
diff -r -u -P ../../origin/labcodes/lab5/obj/user/waitkill.asm lab5/obj/user/waitkill.asm
--- ../../origin/labcodes/lab5/obj/user/waitkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/waitkill.asm	2020-05-28 11:30:16.405041032 +0800
@@ -0,0 +1,2606 @@
+
+obj/__user_waitkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 11 80 00 	movl   $0x801140,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 11 80 00 	movl   $0x80115c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 78 11 80 00 	movl   $0x801178,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 ec 0c 00 00       	call   801039 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 a4 12 80 00       	add    $0x8012a4,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 c8 12 80 00 	mov    0x8012c8(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d 40 12 80 00 	mov    0x801240(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 b5 12 80 	movl   $0x8012b5,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 be 12 80 	movl   $0x8012be,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be c1 12 80 00       	mov    $0x8012c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  800f97:	e8 6c f3 ff ff       	call   800308 <yield>
+    yield();
+  800f9c:	e8 67 f3 ff ff       	call   800308 <yield>
+    yield();
+  800fa1:	e8 62 f3 ff ff       	call   800308 <yield>
+    yield();
+  800fa6:	e8 5d f3 ff ff       	call   800308 <yield>
+    yield();
+  800fab:	e8 58 f3 ff ff       	call   800308 <yield>
+    yield();
+  800fb0:	e8 53 f3 ff ff       	call   800308 <yield>
+}
+  800fb5:	c9                   	leave  
+  800fb6:	c3                   	ret    
+
+00800fb7 <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  800fb7:	55                   	push   %ebp
+  800fb8:	89 e5                	mov    %esp,%ebp
+  800fba:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 1.\n");
+  800fbd:	c7 04 24 20 14 80 00 	movl   $0x801420,(%esp)
+  800fc4:	e8 4f f1 ff ff       	call   800118 <cprintf>
+    while (1);
+  800fc9:	eb fe                	jmp    800fc9 <loop+0x12>
+
+00800fcb <work>:
+}
+
+void
+work(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 2.\n");
+  800fd1:	c7 04 24 2a 14 80 00 	movl   $0x80142a,(%esp)
+  800fd8:	e8 3b f1 ff ff       	call   800118 <cprintf>
+    do_yield();
+  800fdd:	e8 af ff ff ff       	call   800f91 <do_yield>
+    if (kill(parent) == 0) {
+  800fe2:	a1 08 20 80 00       	mov    0x802008,%eax
+  800fe7:	89 04 24             	mov    %eax,(%esp)
+  800fea:	e8 26 f3 ff ff       	call   800315 <kill>
+  800fef:	85 c0                	test   %eax,%eax
+  800ff1:	75 3a                	jne    80102d <work+0x62>
+        cprintf("kill parent ok.\n");
+  800ff3:	c7 04 24 34 14 80 00 	movl   $0x801434,(%esp)
+  800ffa:	e8 19 f1 ff ff       	call   800118 <cprintf>
+        do_yield();
+  800fff:	e8 8d ff ff ff       	call   800f91 <do_yield>
+        if (kill(pid1) == 0) {
+  801004:	a1 10 20 80 00       	mov    0x802010,%eax
+  801009:	89 04 24             	mov    %eax,(%esp)
+  80100c:	e8 04 f3 ff ff       	call   800315 <kill>
+  801011:	85 c0                	test   %eax,%eax
+  801013:	75 18                	jne    80102d <work+0x62>
+            cprintf("kill child1 ok.\n");
+  801015:	c7 04 24 45 14 80 00 	movl   $0x801445,(%esp)
+  80101c:	e8 f7 f0 ff ff       	call   800118 <cprintf>
+            exit(0);
+  801021:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801028:	e8 79 f2 ff ff       	call   8002a6 <exit>
+        }
+    }
+    exit(-1);
+  80102d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801034:	e8 6d f2 ff ff       	call   8002a6 <exit>
+
+00801039 <main>:
+}
+
+int
+main(void) {
+  801039:	55                   	push   %ebp
+  80103a:	89 e5                	mov    %esp,%ebp
+  80103c:	83 e4 f0             	and    $0xfffffff0,%esp
+  80103f:	83 ec 10             	sub    $0x10,%esp
+    parent = getpid();
+  801042:	e8 e1 f2 ff ff       	call   800328 <getpid>
+  801047:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  80104c:	e8 74 f2 ff ff       	call   8002c5 <fork>
+  801051:	a3 10 20 80 00       	mov    %eax,0x802010
+  801056:	a1 10 20 80 00       	mov    0x802010,%eax
+  80105b:	85 c0                	test   %eax,%eax
+  80105d:	75 05                	jne    801064 <main+0x2b>
+        loop();
+  80105f:	e8 53 ff ff ff       	call   800fb7 <loop>
+    }
+
+    assert(pid1 > 0);
+  801064:	a1 10 20 80 00       	mov    0x802010,%eax
+  801069:	85 c0                	test   %eax,%eax
+  80106b:	7f 24                	jg     801091 <main+0x58>
+  80106d:	c7 44 24 0c 56 14 80 	movl   $0x801456,0xc(%esp)
+  801074:	00 
+  801075:	c7 44 24 08 5f 14 80 	movl   $0x80145f,0x8(%esp)
+  80107c:	00 
+  80107d:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
+  801084:	00 
+  801085:	c7 04 24 74 14 80 00 	movl   $0x801474,(%esp)
+  80108c:	e8 9e ef ff ff       	call   80002f <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  801091:	e8 2f f2 ff ff       	call   8002c5 <fork>
+  801096:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  80109b:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010a0:	85 c0                	test   %eax,%eax
+  8010a2:	75 05                	jne    8010a9 <main+0x70>
+        work();
+  8010a4:	e8 22 ff ff ff       	call   800fcb <work>
+    }
+    if (pid2 > 0) {
+  8010a9:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010ae:	85 c0                	test   %eax,%eax
+  8010b0:	7e 46                	jle    8010f8 <main+0xbf>
+        cprintf("wait child 1.\n");
+  8010b2:	c7 04 24 84 14 80 00 	movl   $0x801484,(%esp)
+  8010b9:	e8 5a f0 ff ff       	call   800118 <cprintf>
+        waitpid(pid1, NULL);
+  8010be:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010c3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8010ca:	00 
+  8010cb:	89 04 24             	mov    %eax,(%esp)
+  8010ce:	e8 1b f2 ff ff       	call   8002ee <waitpid>
+        panic("waitpid %d returns\n", pid1);
+  8010d3:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8010dc:	c7 44 24 08 93 14 80 	movl   $0x801493,0x8(%esp)
+  8010e3:	00 
+  8010e4:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+  8010eb:	00 
+  8010ec:	c7 04 24 74 14 80 00 	movl   $0x801474,(%esp)
+  8010f3:	e8 37 ef ff ff       	call   80002f <__panic>
+    }
+    else {
+        kill(pid1);
+  8010f8:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010fd:	89 04 24             	mov    %eax,(%esp)
+  801100:	e8 10 f2 ff ff       	call   800315 <kill>
+    }
+    panic("FAIL: T.T\n");
+  801105:	c7 44 24 08 a7 14 80 	movl   $0x8014a7,0x8(%esp)
+  80110c:	00 
+  80110d:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
+  801114:	00 
+  801115:	c7 04 24 74 14 80 00 	movl   $0x801474,(%esp)
+  80111c:	e8 0e ef ff ff       	call   80002f <__panic>
diff -r -u -P ../../origin/labcodes/lab5/obj/user/waitkill.d lab5/obj/user/waitkill.d
--- ../../origin/labcodes/lab5/obj/user/waitkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/waitkill.d	2020-05-28 11:30:14.557041032 +0800
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files ../../origin/labcodes/lab5/obj/user/waitkill.o and lab5/obj/user/waitkill.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/waitkill.sym lab5/obj/user/waitkill.sym
--- ../../origin/labcodes/lab5/obj/user/waitkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/waitkill.sym	2020-05-28 11:30:16.449041032 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801140 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202c15 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801240 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 waitkill.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800fb7 loop
+00800328 getpid
+00800eea memcpy
+00802008 parent
+0080099d vsnprintf
+00800342 umain
+00202c14 __STAB_END__
+00800248 sys_kill
+00202c15 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+0080200c pid2
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00801039 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+00800f91 do_yield
+00203987 __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+00802010 pid1
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
+00800fcb work
diff -r -u -P ../../origin/labcodes/lab5/obj/user/yield.asm lab5/obj/user/yield.asm
--- ../../origin/labcodes/lab5/obj/user/yield.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/yield.asm	2020-05-28 11:30:16.429041032 +0800
@@ -0,0 +1,2498 @@
+
+obj/__user_yield.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 15 03 00 00       	call   800342 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 27 02 00 00       	call   8002a6 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 36 04 00 00       	call   800549 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002ac:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002af:	89 04 24             	mov    %eax,(%esp)
+  8002b2:	e8 2c ff ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002b7:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002be:	e8 55 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002c3:	eb fe                	jmp    8002c3 <exit+0x1d>
+
+008002c5 <fork>:
+}
+
+int
+fork(void) {
+  8002c5:	55                   	push   %ebp
+  8002c6:	89 e5                	mov    %esp,%ebp
+  8002c8:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002cb:	e8 2e ff ff ff       	call   8001fe <sys_fork>
+}
+  8002d0:	c9                   	leave  
+  8002d1:	c3                   	ret    
+
+008002d2 <wait>:
+
+int
+wait(void) {
+  8002d2:	55                   	push   %ebp
+  8002d3:	89 e5                	mov    %esp,%ebp
+  8002d5:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  8002d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8002df:	00 
+  8002e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8002e7:	e8 26 ff ff ff       	call   800212 <sys_wait>
+}
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  8002f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002fe:	89 04 24             	mov    %eax,(%esp)
+  800301:	e8 0c ff ff ff       	call   800212 <sys_wait>
+}
+  800306:	c9                   	leave  
+  800307:	c3                   	ret    
+
+00800308 <yield>:
+
+void
+yield(void) {
+  800308:	55                   	push   %ebp
+  800309:	89 e5                	mov    %esp,%ebp
+  80030b:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80030e:	e8 21 ff ff ff       	call   800234 <sys_yield>
+}
+  800313:	c9                   	leave  
+  800314:	c3                   	ret    
+
+00800315 <kill>:
+
+int
+kill(int pid) {
+  800315:	55                   	push   %ebp
+  800316:	89 e5                	mov    %esp,%ebp
+  800318:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80031b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80031e:	89 04 24             	mov    %eax,(%esp)
+  800321:	e8 22 ff ff ff       	call   800248 <sys_kill>
+}
+  800326:	c9                   	leave  
+  800327:	c3                   	ret    
+
+00800328 <getpid>:
+
+int
+getpid(void) {
+  800328:	55                   	push   %ebp
+  800329:	89 e5                	mov    %esp,%ebp
+  80032b:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80032e:	e8 30 ff ff ff       	call   800263 <sys_getpid>
+}
+  800333:	c9                   	leave  
+  800334:	c3                   	ret    
+
+00800335 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800335:	55                   	push   %ebp
+  800336:	89 e5                	mov    %esp,%ebp
+  800338:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80033b:	e8 52 ff ff ff       	call   800292 <sys_pgdir>
+}
+  800340:	c9                   	leave  
+  800341:	c3                   	ret    
+
+00800342 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800342:	55                   	push   %ebp
+  800343:	89 e5                	mov    %esp,%ebp
+  800345:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800348:	e8 44 0c 00 00       	call   800f91 <main>
+  80034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800353:	89 04 24             	mov    %eax,(%esp)
+  800356:	e8 4b ff ff ff       	call   8002a6 <exit>
+
+0080035b <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  80035b:	55                   	push   %ebp
+  80035c:	89 e5                	mov    %esp,%ebp
+  80035e:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800361:	8b 45 08             	mov    0x8(%ebp),%eax
+  800364:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  80036a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  80036d:	b8 20 00 00 00       	mov    $0x20,%eax
+  800372:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800375:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800378:	89 c1                	mov    %eax,%ecx
+  80037a:	d3 ea                	shr    %cl,%edx
+  80037c:	89 d0                	mov    %edx,%eax
+}
+  80037e:	c9                   	leave  
+  80037f:	c3                   	ret    
+
+00800380 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800380:	55                   	push   %ebp
+  800381:	89 e5                	mov    %esp,%ebp
+  800383:	83 ec 58             	sub    $0x58,%esp
+  800386:	8b 45 10             	mov    0x10(%ebp),%eax
+  800389:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80038c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80038f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800392:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800395:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800398:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80039b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80039e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003ad:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  8003ba:	74 1c                	je     8003d8 <printnum+0x58>
+  8003bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003bf:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003c4:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8003cd:	ba 00 00 00 00       	mov    $0x0,%edx
+  8003d2:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8003d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8003de:	f7 75 e4             	divl   -0x1c(%ebp)
+  8003e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8003e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8003ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8003f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8003f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8003f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003fc:	ba 00 00 00 00       	mov    $0x0,%edx
+  800401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800404:	77 56                	ja     80045c <printnum+0xdc>
+  800406:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800409:	72 05                	jb     800410 <printnum+0x90>
+  80040b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80040e:	77 4c                	ja     80045c <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  800410:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800413:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800416:	8b 45 20             	mov    0x20(%ebp),%eax
+  800419:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80041d:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800421:	8b 45 18             	mov    0x18(%ebp),%eax
+  800424:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800428:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80042b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80042e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800432:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800436:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800439:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80043d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800440:	89 04 24             	mov    %eax,(%esp)
+  800443:	e8 38 ff ff ff       	call   800380 <printnum>
+  800448:	eb 1c                	jmp    800466 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  80044a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80044d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800451:	8b 45 20             	mov    0x20(%ebp),%eax
+  800454:	89 04 24             	mov    %eax,(%esp)
+  800457:	8b 45 08             	mov    0x8(%ebp),%eax
+  80045a:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  80045c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800460:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800464:	7f e4                	jg     80044a <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  800466:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800469:	05 84 11 80 00       	add    $0x801184,%eax
+  80046e:	0f b6 00             	movzbl (%eax),%eax
+  800471:	0f be c0             	movsbl %al,%eax
+  800474:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800477:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80047b:	89 04 24             	mov    %eax,(%esp)
+  80047e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800481:	ff d0                	call   *%eax
+}
+  800483:	c9                   	leave  
+  800484:	c3                   	ret    
+
+00800485 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800485:	55                   	push   %ebp
+  800486:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800488:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80048c:	7e 14                	jle    8004a2 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80048e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800491:	8b 00                	mov    (%eax),%eax
+  800493:	8d 48 08             	lea    0x8(%eax),%ecx
+  800496:	8b 55 08             	mov    0x8(%ebp),%edx
+  800499:	89 0a                	mov    %ecx,(%edx)
+  80049b:	8b 50 04             	mov    0x4(%eax),%edx
+  80049e:	8b 00                	mov    (%eax),%eax
+  8004a0:	eb 30                	jmp    8004d2 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004a6:	74 16                	je     8004be <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ab:	8b 00                	mov    (%eax),%eax
+  8004ad:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004b0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004b3:	89 0a                	mov    %ecx,(%edx)
+  8004b5:	8b 00                	mov    (%eax),%eax
+  8004b7:	ba 00 00 00 00       	mov    $0x0,%edx
+  8004bc:	eb 14                	jmp    8004d2 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  8004be:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c1:	8b 00                	mov    (%eax),%eax
+  8004c3:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004c6:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004c9:	89 0a                	mov    %ecx,(%edx)
+  8004cb:	8b 00                	mov    (%eax),%eax
+  8004cd:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8004d2:	5d                   	pop    %ebp
+  8004d3:	c3                   	ret    
+
+008004d4 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 28                	jmp    800519 <getint+0x45>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 12                	je     800509 <getint+0x35>
+        return va_arg(*ap, long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	99                   	cltd   
+  800507:	eb 10                	jmp    800519 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800509:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050c:	8b 00                	mov    (%eax),%eax
+  80050e:	8d 48 04             	lea    0x4(%eax),%ecx
+  800511:	8b 55 08             	mov    0x8(%ebp),%edx
+  800514:	89 0a                	mov    %ecx,(%edx)
+  800516:	8b 00                	mov    (%eax),%eax
+  800518:	99                   	cltd   
+    }
+}
+  800519:	5d                   	pop    %ebp
+  80051a:	c3                   	ret    
+
+0080051b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80051b:	55                   	push   %ebp
+  80051c:	89 e5                	mov    %esp,%ebp
+  80051e:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800521:	8d 45 14             	lea    0x14(%ebp),%eax
+  800524:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80052a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80052e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800531:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800535:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800538:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80053c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053f:	89 04 24             	mov    %eax,(%esp)
+  800542:	e8 02 00 00 00       	call   800549 <vprintfmt>
+    va_end(ap);
+}
+  800547:	c9                   	leave  
+  800548:	c3                   	ret    
+
+00800549 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800549:	55                   	push   %ebp
+  80054a:	89 e5                	mov    %esp,%ebp
+  80054c:	56                   	push   %esi
+  80054d:	53                   	push   %ebx
+  80054e:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800551:	eb 18                	jmp    80056b <vprintfmt+0x22>
+            if (ch == '\0') {
+  800553:	85 db                	test   %ebx,%ebx
+  800555:	75 05                	jne    80055c <vprintfmt+0x13>
+                return;
+  800557:	e9 d1 03 00 00       	jmp    80092d <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  80055c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80055f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800563:	89 1c 24             	mov    %ebx,(%esp)
+  800566:	8b 45 08             	mov    0x8(%ebp),%eax
+  800569:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  80056b:	8b 45 10             	mov    0x10(%ebp),%eax
+  80056e:	8d 50 01             	lea    0x1(%eax),%edx
+  800571:	89 55 10             	mov    %edx,0x10(%ebp)
+  800574:	0f b6 00             	movzbl (%eax),%eax
+  800577:	0f b6 d8             	movzbl %al,%ebx
+  80057a:	83 fb 25             	cmp    $0x25,%ebx
+  80057d:	75 d4                	jne    800553 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  80057f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800583:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  80058a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80058d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800590:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800597:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80059a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80059d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005a0:	8d 50 01             	lea    0x1(%eax),%edx
+  8005a3:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005a6:	0f b6 00             	movzbl (%eax),%eax
+  8005a9:	0f b6 d8             	movzbl %al,%ebx
+  8005ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005af:	83 f8 55             	cmp    $0x55,%eax
+  8005b2:	0f 87 44 03 00 00    	ja     8008fc <vprintfmt+0x3b3>
+  8005b8:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  8005bf:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  8005c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  8005c5:	eb d6                	jmp    80059d <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  8005c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  8005cb:	eb d0                	jmp    80059d <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  8005d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8005d7:	89 d0                	mov    %edx,%eax
+  8005d9:	c1 e0 02             	shl    $0x2,%eax
+  8005dc:	01 d0                	add    %edx,%eax
+  8005de:	01 c0                	add    %eax,%eax
+  8005e0:	01 d8                	add    %ebx,%eax
+  8005e2:	83 e8 30             	sub    $0x30,%eax
+  8005e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	0f b6 00             	movzbl (%eax),%eax
+  8005ee:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  8005f1:	83 fb 2f             	cmp    $0x2f,%ebx
+  8005f4:	7e 0b                	jle    800601 <vprintfmt+0xb8>
+  8005f6:	83 fb 39             	cmp    $0x39,%ebx
+  8005f9:	7f 06                	jg     800601 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  8005fb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  8005ff:	eb d3                	jmp    8005d4 <vprintfmt+0x8b>
+            goto process_precision;
+  800601:	eb 33                	jmp    800636 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800603:	8b 45 14             	mov    0x14(%ebp),%eax
+  800606:	8d 50 04             	lea    0x4(%eax),%edx
+  800609:	89 55 14             	mov    %edx,0x14(%ebp)
+  80060c:	8b 00                	mov    (%eax),%eax
+  80060e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800611:	eb 23                	jmp    800636 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800613:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800617:	79 0c                	jns    800625 <vprintfmt+0xdc>
+                width = 0;
+  800619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800620:	e9 78 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  800625:	e9 73 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  80062a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800631:	e9 67 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800636:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80063a:	79 12                	jns    80064e <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80063c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80063f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800642:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800649:	e9 4f ff ff ff       	jmp    80059d <vprintfmt+0x54>
+  80064e:	e9 4a ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800653:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800657:	e9 41 ff ff ff       	jmp    80059d <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  80065c:	8b 45 14             	mov    0x14(%ebp),%eax
+  80065f:	8d 50 04             	lea    0x4(%eax),%edx
+  800662:	89 55 14             	mov    %edx,0x14(%ebp)
+  800665:	8b 00                	mov    (%eax),%eax
+  800667:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80066a:	89 54 24 04          	mov    %edx,0x4(%esp)
+  80066e:	89 04 24             	mov    %eax,(%esp)
+  800671:	8b 45 08             	mov    0x8(%ebp),%eax
+  800674:	ff d0                	call   *%eax
+            break;
+  800676:	e9 ac 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  80067b:	8b 45 14             	mov    0x14(%ebp),%eax
+  80067e:	8d 50 04             	lea    0x4(%eax),%edx
+  800681:	89 55 14             	mov    %edx,0x14(%ebp)
+  800684:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800686:	85 db                	test   %ebx,%ebx
+  800688:	79 02                	jns    80068c <vprintfmt+0x143>
+                err = -err;
+  80068a:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  80068c:	83 fb 18             	cmp    $0x18,%ebx
+  80068f:	7f 0b                	jg     80069c <vprintfmt+0x153>
+  800691:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800698:	85 f6                	test   %esi,%esi
+  80069a:	75 23                	jne    8006bf <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  80069c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006a0:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006a7:	00 
+  8006a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006b2:	89 04 24             	mov    %eax,(%esp)
+  8006b5:	e8 61 fe ff ff       	call   80051b <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  8006ba:	e9 68 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  8006bf:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  8006c3:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  8006ca:	00 
+  8006cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006d5:	89 04 24             	mov    %eax,(%esp)
+  8006d8:	e8 3e fe ff ff       	call   80051b <printfmt>
+            }
+            break;
+  8006dd:	e9 45 02 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  8006e2:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006e5:	8d 50 04             	lea    0x4(%eax),%edx
+  8006e8:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006eb:	8b 30                	mov    (%eax),%esi
+  8006ed:	85 f6                	test   %esi,%esi
+  8006ef:	75 05                	jne    8006f6 <vprintfmt+0x1ad>
+                p = "(null)";
+  8006f1:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  8006f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006fa:	7e 3e                	jle    80073a <vprintfmt+0x1f1>
+  8006fc:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800700:	74 38                	je     80073a <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800702:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800708:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80070c:	89 34 24             	mov    %esi,(%esp)
+  80070f:	e8 ed 03 00 00       	call   800b01 <strnlen>
+  800714:	29 c3                	sub    %eax,%ebx
+  800716:	89 d8                	mov    %ebx,%eax
+  800718:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80071b:	eb 17                	jmp    800734 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80071d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800721:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800724:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800728:	89 04 24             	mov    %eax,(%esp)
+  80072b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072e:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800730:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800734:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800738:	7f e3                	jg     80071d <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  80073a:	eb 38                	jmp    800774 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80073c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800740:	74 1f                	je     800761 <vprintfmt+0x218>
+  800742:	83 fb 1f             	cmp    $0x1f,%ebx
+  800745:	7e 05                	jle    80074c <vprintfmt+0x203>
+  800747:	83 fb 7e             	cmp    $0x7e,%ebx
+  80074a:	7e 15                	jle    800761 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80074c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800753:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  80075a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80075d:	ff d0                	call   *%eax
+  80075f:	eb 0f                	jmp    800770 <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  800761:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800764:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800768:	89 1c 24             	mov    %ebx,(%esp)
+  80076b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80076e:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800774:	89 f0                	mov    %esi,%eax
+  800776:	8d 70 01             	lea    0x1(%eax),%esi
+  800779:	0f b6 00             	movzbl (%eax),%eax
+  80077c:	0f be d8             	movsbl %al,%ebx
+  80077f:	85 db                	test   %ebx,%ebx
+  800781:	74 10                	je     800793 <vprintfmt+0x24a>
+  800783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800787:	78 b3                	js     80073c <vprintfmt+0x1f3>
+  800789:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80078d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800791:	79 a9                	jns    80073c <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800793:	eb 17                	jmp    8007ac <vprintfmt+0x263>
+                putch(' ', putdat);
+  800795:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800798:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80079c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007a6:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b0:	7f e3                	jg     800795 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  8007b2:	e9 70 01 00 00       	jmp    800927 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  8007b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8007ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8007c1:	89 04 24             	mov    %eax,(%esp)
+  8007c4:	e8 0b fd ff ff       	call   8004d4 <getint>
+  8007c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  8007cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d5:	85 d2                	test   %edx,%edx
+  8007d7:	79 26                	jns    8007ff <vprintfmt+0x2b6>
+                putch('-', putdat);
+  8007d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  8007e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ea:	ff d0                	call   *%eax
+                num = -(long long)num;
+  8007ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007f2:	f7 d8                	neg    %eax
+  8007f4:	83 d2 00             	adc    $0x0,%edx
+  8007f7:	f7 da                	neg    %edx
+  8007f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  8007ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800806:	e9 a8 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80080b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80080e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800812:	8d 45 14             	lea    0x14(%ebp),%eax
+  800815:	89 04 24             	mov    %eax,(%esp)
+  800818:	e8 68 fc ff ff       	call   800485 <getuint>
+  80081d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800820:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800823:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  80082a:	e9 84 00 00 00       	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80082f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800832:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800836:	8d 45 14             	lea    0x14(%ebp),%eax
+  800839:	89 04 24             	mov    %eax,(%esp)
+  80083c:	e8 44 fc ff ff       	call   800485 <getuint>
+  800841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800844:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800847:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80084e:	eb 63                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800850:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800853:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800857:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  80085e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800861:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800863:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800866:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80086a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800871:	8b 45 08             	mov    0x8(%ebp),%eax
+  800874:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800876:	8b 45 14             	mov    0x14(%ebp),%eax
+  800879:	8d 50 04             	lea    0x4(%eax),%edx
+  80087c:	89 55 14             	mov    %edx,0x14(%ebp)
+  80087f:	8b 00                	mov    (%eax),%eax
+  800881:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  80088b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800892:	eb 1f                	jmp    8008b3 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800894:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800897:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80089b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80089e:	89 04 24             	mov    %eax,(%esp)
+  8008a1:	e8 df fb ff ff       	call   800485 <getuint>
+  8008a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  8008b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  8008b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8008ba:	89 54 24 18          	mov    %edx,0x18(%esp)
+  8008be:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  8008c1:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8008c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008cf:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8008d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008da:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e1:	89 04 24             	mov    %eax,(%esp)
+  8008e4:	e8 97 fa ff ff       	call   800380 <printnum>
+            break;
+  8008e9:	eb 3c                	jmp    800927 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  8008eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008f2:	89 1c 24             	mov    %ebx,(%esp)
+  8008f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f8:	ff d0                	call   *%eax
+            break;
+  8008fa:	eb 2b                	jmp    800927 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  8008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008ff:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800903:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  80090a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090d:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80090f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800913:	eb 04                	jmp    800919 <vprintfmt+0x3d0>
+  800915:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800919:	8b 45 10             	mov    0x10(%ebp),%eax
+  80091c:	83 e8 01             	sub    $0x1,%eax
+  80091f:	0f b6 00             	movzbl (%eax),%eax
+  800922:	3c 25                	cmp    $0x25,%al
+  800924:	75 ef                	jne    800915 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800926:	90                   	nop
+        }
+    }
+  800927:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800928:	e9 3e fc ff ff       	jmp    80056b <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80092d:	83 c4 40             	add    $0x40,%esp
+  800930:	5b                   	pop    %ebx
+  800931:	5e                   	pop    %esi
+  800932:	5d                   	pop    %ebp
+  800933:	c3                   	ret    
+
+00800934 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800934:	55                   	push   %ebp
+  800935:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800937:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093a:	8b 40 08             	mov    0x8(%eax),%eax
+  80093d:	8d 50 01             	lea    0x1(%eax),%edx
+  800940:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800943:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800949:	8b 10                	mov    (%eax),%edx
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	8b 40 04             	mov    0x4(%eax),%eax
+  800951:	39 c2                	cmp    %eax,%edx
+  800953:	73 12                	jae    800967 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800955:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800958:	8b 00                	mov    (%eax),%eax
+  80095a:	8d 48 01             	lea    0x1(%eax),%ecx
+  80095d:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800960:	89 0a                	mov    %ecx,(%edx)
+  800962:	8b 55 08             	mov    0x8(%ebp),%edx
+  800965:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800967:	5d                   	pop    %ebp
+  800968:	c3                   	ret    
+
+00800969 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800969:	55                   	push   %ebp
+  80096a:	89 e5                	mov    %esp,%ebp
+  80096c:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  80096f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800972:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800975:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80097c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80097f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800983:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800986:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80098a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098d:	89 04 24             	mov    %eax,(%esp)
+  800990:	e8 08 00 00 00       	call   80099d <vsnprintf>
+  800995:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80099b:	c9                   	leave  
+  80099c:	c3                   	ret    
+
+0080099d <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  80099d:	55                   	push   %ebp
+  80099e:	89 e5                	mov    %esp,%ebp
+  8009a0:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009af:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b2:	01 d0                	add    %edx,%eax
+  8009b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8009b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  8009be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  8009c2:	74 0a                	je     8009ce <vsnprintf+0x31>
+  8009c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8009c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009ca:	39 c2                	cmp    %eax,%edx
+  8009cc:	76 07                	jbe    8009d5 <vsnprintf+0x38>
+        return -E_INVAL;
+  8009ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  8009d3:	eb 2a                	jmp    8009ff <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  8009d5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8009d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009dc:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009df:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  8009e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009ea:	c7 04 24 34 09 80 00 	movl   $0x800934,(%esp)
+  8009f1:	e8 53 fb ff ff       	call   800549 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  8009f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8009f9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  8009fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ff:	c9                   	leave  
+  800a00:	c3                   	ret    
+
+00800a01 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a01:	55                   	push   %ebp
+  800a02:	89 e5                	mov    %esp,%ebp
+  800a04:	57                   	push   %edi
+  800a05:	56                   	push   %esi
+  800a06:	53                   	push   %ebx
+  800a07:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a0a:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a0f:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a1b:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a1e:	01 f7                	add    %esi,%edi
+  800a20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a25:	f7 e6                	mul    %esi
+  800a27:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a2a:	89 f2                	mov    %esi,%edx
+  800a2c:	83 c0 0b             	add    $0xb,%eax
+  800a2f:	83 d2 00             	adc    $0x0,%edx
+  800a32:	89 c7                	mov    %eax,%edi
+  800a34:	83 e7 ff             	and    $0xffffffff,%edi
+  800a37:	89 f9                	mov    %edi,%ecx
+  800a39:	0f b7 da             	movzwl %dx,%ebx
+  800a3c:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a42:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a48:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a4d:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800a57:	c1 ea 0c             	shr    $0xc,%edx
+  800a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800a5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800a60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800a67:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800a70:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a7d:	74 1c                	je     800a9b <rand+0x9a>
+  800a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a82:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a87:	f7 75 dc             	divl   -0x24(%ebp)
+  800a8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800a90:	ba 00 00 00 00       	mov    $0x0,%edx
+  800a95:	f7 75 dc             	divl   -0x24(%ebp)
+  800a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800a9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800a9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800aa1:	f7 75 dc             	divl   -0x24(%ebp)
+  800aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aa7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800aaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aad:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800ab0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ab3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800ab6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800ab9:	83 c4 24             	add    $0x24,%esp
+  800abc:	5b                   	pop    %ebx
+  800abd:	5e                   	pop    %esi
+  800abe:	5f                   	pop    %edi
+  800abf:	5d                   	pop    %ebp
+  800ac0:	c3                   	ret    
+
+00800ac1 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800ac1:	55                   	push   %ebp
+  800ac2:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ac7:	ba 00 00 00 00       	mov    $0x0,%edx
+  800acc:	a3 00 20 80 00       	mov    %eax,0x802000
+  800ad1:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800ad7:	5d                   	pop    %ebp
+  800ad8:	c3                   	ret    
+
+00800ad9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800ad9:	55                   	push   %ebp
+  800ada:	89 e5                	mov    %esp,%ebp
+  800adc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800ae6:	eb 04                	jmp    800aec <strlen+0x13>
+        cnt ++;
+  800ae8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800aec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aef:	8d 50 01             	lea    0x1(%eax),%edx
+  800af2:	89 55 08             	mov    %edx,0x8(%ebp)
+  800af5:	0f b6 00             	movzbl (%eax),%eax
+  800af8:	84 c0                	test   %al,%al
+  800afa:	75 ec                	jne    800ae8 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800aff:	c9                   	leave  
+  800b00:	c3                   	ret    
+
+00800b01 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b01:	55                   	push   %ebp
+  800b02:	89 e5                	mov    %esp,%ebp
+  800b04:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b0e:	eb 04                	jmp    800b14 <strnlen+0x13>
+        cnt ++;
+  800b10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b17:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b1a:	73 10                	jae    800b2c <strnlen+0x2b>
+  800b1c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b1f:	8d 50 01             	lea    0x1(%eax),%edx
+  800b22:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b25:	0f b6 00             	movzbl (%eax),%eax
+  800b28:	84 c0                	test   %al,%al
+  800b2a:	75 e4                	jne    800b10 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b2f:	c9                   	leave  
+  800b30:	c3                   	ret    
+
+00800b31 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b31:	55                   	push   %ebp
+  800b32:	89 e5                	mov    %esp,%ebp
+  800b34:	57                   	push   %edi
+  800b35:	56                   	push   %esi
+  800b36:	83 ec 20             	sub    $0x20,%esp
+  800b39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b4b:	89 d1                	mov    %edx,%ecx
+  800b4d:	89 c2                	mov    %eax,%edx
+  800b4f:	89 ce                	mov    %ecx,%esi
+  800b51:	89 d7                	mov    %edx,%edi
+  800b53:	ac                   	lods   %ds:(%esi),%al
+  800b54:	aa                   	stos   %al,%es:(%edi)
+  800b55:	84 c0                	test   %al,%al
+  800b57:	75 fa                	jne    800b53 <strcpy+0x22>
+  800b59:	89 fa                	mov    %edi,%edx
+  800b5b:	89 f1                	mov    %esi,%ecx
+  800b5d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800b60:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800b69:	83 c4 20             	add    $0x20,%esp
+  800b6c:	5e                   	pop    %esi
+  800b6d:	5f                   	pop    %edi
+  800b6e:	5d                   	pop    %ebp
+  800b6f:	c3                   	ret    
+
+00800b70 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800b70:	55                   	push   %ebp
+  800b71:	89 e5                	mov    %esp,%ebp
+  800b73:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800b76:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800b7c:	eb 21                	jmp    800b9f <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b81:	0f b6 10             	movzbl (%eax),%edx
+  800b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b87:	88 10                	mov    %dl,(%eax)
+  800b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b8c:	0f b6 00             	movzbl (%eax),%eax
+  800b8f:	84 c0                	test   %al,%al
+  800b91:	74 04                	je     800b97 <strncpy+0x27>
+            src ++;
+  800b93:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800b97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800b9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800b9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ba3:	75 d9                	jne    800b7e <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800ba5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ba8:	c9                   	leave  
+  800ba9:	c3                   	ret    
+
+00800baa <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800baa:	55                   	push   %ebp
+  800bab:	89 e5                	mov    %esp,%ebp
+  800bad:	57                   	push   %edi
+  800bae:	56                   	push   %esi
+  800baf:	83 ec 20             	sub    $0x20,%esp
+  800bb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800bc4:	89 d1                	mov    %edx,%ecx
+  800bc6:	89 c2                	mov    %eax,%edx
+  800bc8:	89 ce                	mov    %ecx,%esi
+  800bca:	89 d7                	mov    %edx,%edi
+  800bcc:	ac                   	lods   %ds:(%esi),%al
+  800bcd:	ae                   	scas   %es:(%edi),%al
+  800bce:	75 08                	jne    800bd8 <strcmp+0x2e>
+  800bd0:	84 c0                	test   %al,%al
+  800bd2:	75 f8                	jne    800bcc <strcmp+0x22>
+  800bd4:	31 c0                	xor    %eax,%eax
+  800bd6:	eb 04                	jmp    800bdc <strcmp+0x32>
+  800bd8:	19 c0                	sbb    %eax,%eax
+  800bda:	0c 01                	or     $0x1,%al
+  800bdc:	89 fa                	mov    %edi,%edx
+  800bde:	89 f1                	mov    %esi,%ecx
+  800be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800be3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800be6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800bec:	83 c4 20             	add    $0x20,%esp
+  800bef:	5e                   	pop    %esi
+  800bf0:	5f                   	pop    %edi
+  800bf1:	5d                   	pop    %ebp
+  800bf2:	c3                   	ret    
+
+00800bf3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800bf3:	55                   	push   %ebp
+  800bf4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800bf6:	eb 0c                	jmp    800c04 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800bf8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800bfc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c08:	74 1a                	je     800c24 <strncmp+0x31>
+  800c0a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c0d:	0f b6 00             	movzbl (%eax),%eax
+  800c10:	84 c0                	test   %al,%al
+  800c12:	74 10                	je     800c24 <strncmp+0x31>
+  800c14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c17:	0f b6 10             	movzbl (%eax),%edx
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	0f b6 00             	movzbl (%eax),%eax
+  800c20:	38 c2                	cmp    %al,%dl
+  800c22:	74 d4                	je     800bf8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c28:	74 18                	je     800c42 <strncmp+0x4f>
+  800c2a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2d:	0f b6 00             	movzbl (%eax),%eax
+  800c30:	0f b6 d0             	movzbl %al,%edx
+  800c33:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c36:	0f b6 00             	movzbl (%eax),%eax
+  800c39:	0f b6 c0             	movzbl %al,%eax
+  800c3c:	29 c2                	sub    %eax,%edx
+  800c3e:	89 d0                	mov    %edx,%eax
+  800c40:	eb 05                	jmp    800c47 <strncmp+0x54>
+  800c42:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c47:	5d                   	pop    %ebp
+  800c48:	c3                   	ret    
+
+00800c49 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c49:	55                   	push   %ebp
+  800c4a:	89 e5                	mov    %esp,%ebp
+  800c4c:	83 ec 04             	sub    $0x4,%esp
+  800c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c52:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c55:	eb 14                	jmp    800c6b <strchr+0x22>
+        if (*s == c) {
+  800c57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5a:	0f b6 00             	movzbl (%eax),%eax
+  800c5d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c60:	75 05                	jne    800c67 <strchr+0x1e>
+            return (char *)s;
+  800c62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c65:	eb 13                	jmp    800c7a <strchr+0x31>
+        }
+        s ++;
+  800c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6e:	0f b6 00             	movzbl (%eax),%eax
+  800c71:	84 c0                	test   %al,%al
+  800c73:	75 e2                	jne    800c57 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800c75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c7a:	c9                   	leave  
+  800c7b:	c3                   	ret    
+
+00800c7c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800c7c:	55                   	push   %ebp
+  800c7d:	89 e5                	mov    %esp,%ebp
+  800c7f:	83 ec 04             	sub    $0x4,%esp
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800c88:	eb 11                	jmp    800c9b <strfind+0x1f>
+        if (*s == c) {
+  800c8a:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8d:	0f b6 00             	movzbl (%eax),%eax
+  800c90:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800c93:	75 02                	jne    800c97 <strfind+0x1b>
+            break;
+  800c95:	eb 0e                	jmp    800ca5 <strfind+0x29>
+        }
+        s ++;
+  800c97:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800c9b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c9e:	0f b6 00             	movzbl (%eax),%eax
+  800ca1:	84 c0                	test   %al,%al
+  800ca3:	75 e5                	jne    800c8a <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800ca8:	c9                   	leave  
+  800ca9:	c3                   	ret    
+
+00800caa <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800caa:	55                   	push   %ebp
+  800cab:	89 e5                	mov    %esp,%ebp
+  800cad:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800cb7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cbe:	eb 04                	jmp    800cc4 <strtol+0x1a>
+        s ++;
+  800cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc7:	0f b6 00             	movzbl (%eax),%eax
+  800cca:	3c 20                	cmp    $0x20,%al
+  800ccc:	74 f2                	je     800cc0 <strtol+0x16>
+  800cce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd1:	0f b6 00             	movzbl (%eax),%eax
+  800cd4:	3c 09                	cmp    $0x9,%al
+  800cd6:	74 e8                	je     800cc0 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdb:	0f b6 00             	movzbl (%eax),%eax
+  800cde:	3c 2b                	cmp    $0x2b,%al
+  800ce0:	75 06                	jne    800ce8 <strtol+0x3e>
+        s ++;
+  800ce2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800ce6:	eb 15                	jmp    800cfd <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	3c 2d                	cmp    $0x2d,%al
+  800cf0:	75 0b                	jne    800cfd <strtol+0x53>
+        s ++, neg = 1;
+  800cf2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800cf6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800cfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d01:	74 06                	je     800d09 <strtol+0x5f>
+  800d03:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d07:	75 24                	jne    800d2d <strtol+0x83>
+  800d09:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0c:	0f b6 00             	movzbl (%eax),%eax
+  800d0f:	3c 30                	cmp    $0x30,%al
+  800d11:	75 1a                	jne    800d2d <strtol+0x83>
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	83 c0 01             	add    $0x1,%eax
+  800d19:	0f b6 00             	movzbl (%eax),%eax
+  800d1c:	3c 78                	cmp    $0x78,%al
+  800d1e:	75 0d                	jne    800d2d <strtol+0x83>
+        s += 2, base = 16;
+  800d20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d2b:	eb 2a                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d31:	75 17                	jne    800d4a <strtol+0xa0>
+  800d33:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d36:	0f b6 00             	movzbl (%eax),%eax
+  800d39:	3c 30                	cmp    $0x30,%al
+  800d3b:	75 0d                	jne    800d4a <strtol+0xa0>
+        s ++, base = 8;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d41:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d48:	eb 0d                	jmp    800d57 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d4e:	75 07                	jne    800d57 <strtol+0xad>
+        base = 10;
+  800d50:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800d57:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5a:	0f b6 00             	movzbl (%eax),%eax
+  800d5d:	3c 2f                	cmp    $0x2f,%al
+  800d5f:	7e 1b                	jle    800d7c <strtol+0xd2>
+  800d61:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d64:	0f b6 00             	movzbl (%eax),%eax
+  800d67:	3c 39                	cmp    $0x39,%al
+  800d69:	7f 11                	jg     800d7c <strtol+0xd2>
+            dig = *s - '0';
+  800d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d6e:	0f b6 00             	movzbl (%eax),%eax
+  800d71:	0f be c0             	movsbl %al,%eax
+  800d74:	83 e8 30             	sub    $0x30,%eax
+  800d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d7a:	eb 48                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800d7c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d7f:	0f b6 00             	movzbl (%eax),%eax
+  800d82:	3c 60                	cmp    $0x60,%al
+  800d84:	7e 1b                	jle    800da1 <strtol+0xf7>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 7a                	cmp    $0x7a,%al
+  800d8e:	7f 11                	jg     800da1 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	0f b6 00             	movzbl (%eax),%eax
+  800d96:	0f be c0             	movsbl %al,%eax
+  800d99:	83 e8 57             	sub    $0x57,%eax
+  800d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800d9f:	eb 23                	jmp    800dc4 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800da1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da4:	0f b6 00             	movzbl (%eax),%eax
+  800da7:	3c 40                	cmp    $0x40,%al
+  800da9:	7e 3d                	jle    800de8 <strtol+0x13e>
+  800dab:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dae:	0f b6 00             	movzbl (%eax),%eax
+  800db1:	3c 5a                	cmp    $0x5a,%al
+  800db3:	7f 33                	jg     800de8 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800db5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db8:	0f b6 00             	movzbl (%eax),%eax
+  800dbb:	0f be c0             	movsbl %al,%eax
+  800dbe:	83 e8 37             	sub    $0x37,%eax
+  800dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dc7:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800dca:	7c 02                	jl     800dce <strtol+0x124>
+            break;
+  800dcc:	eb 1a                	jmp    800de8 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800dce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dd5:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800dd9:	89 c2                	mov    %eax,%edx
+  800ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800dde:	01 d0                	add    %edx,%eax
+  800de0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800de3:	e9 6f ff ff ff       	jmp    800d57 <strtol+0xad>
+
+    if (endptr) {
+  800de8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800dec:	74 08                	je     800df6 <strtol+0x14c>
+        *endptr = (char *) s;
+  800dee:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800df1:	8b 55 08             	mov    0x8(%ebp),%edx
+  800df4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800df6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800dfa:	74 07                	je     800e03 <strtol+0x159>
+  800dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800dff:	f7 d8                	neg    %eax
+  800e01:	eb 03                	jmp    800e06 <strtol+0x15c>
+  800e03:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e06:	c9                   	leave  
+  800e07:	c3                   	ret    
+
+00800e08 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e08:	55                   	push   %ebp
+  800e09:	89 e5                	mov    %esp,%ebp
+  800e0b:	57                   	push   %edi
+  800e0c:	83 ec 24             	sub    $0x24,%esp
+  800e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e12:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e15:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e19:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e1f:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e22:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e2b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e32:	89 d7                	mov    %edx,%edi
+  800e34:	f3 aa                	rep stos %al,%es:(%edi)
+  800e36:	89 fa                	mov    %edi,%edx
+  800e38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e3b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e41:	83 c4 24             	add    $0x24,%esp
+  800e44:	5f                   	pop    %edi
+  800e45:	5d                   	pop    %ebp
+  800e46:	c3                   	ret    
+
+00800e47 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e47:	55                   	push   %ebp
+  800e48:	89 e5                	mov    %esp,%ebp
+  800e4a:	57                   	push   %edi
+  800e4b:	56                   	push   %esi
+  800e4c:	53                   	push   %ebx
+  800e4d:	83 ec 30             	sub    $0x30,%esp
+  800e50:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e5c:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800e68:	73 42                	jae    800eac <memmove+0x65>
+  800e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800e79:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800e7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800e7f:	c1 e8 02             	shr    $0x2,%eax
+  800e82:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800e84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800e8a:	89 d7                	mov    %edx,%edi
+  800e8c:	89 c6                	mov    %eax,%esi
+  800e8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800e90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800e93:	83 e1 03             	and    $0x3,%ecx
+  800e96:	74 02                	je     800e9a <memmove+0x53>
+  800e98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800e9a:	89 f0                	mov    %esi,%eax
+  800e9c:	89 fa                	mov    %edi,%edx
+  800e9e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ea1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800eaa:	eb 36                	jmp    800ee2 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eaf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800eb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800eb5:	01 c2                	add    %eax,%edx
+  800eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eba:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ec0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800ec3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec6:	89 c1                	mov    %eax,%ecx
+  800ec8:	89 d8                	mov    %ebx,%eax
+  800eca:	89 d6                	mov    %edx,%esi
+  800ecc:	89 c7                	mov    %eax,%edi
+  800ece:	fd                   	std    
+  800ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ed1:	fc                   	cld    
+  800ed2:	89 f8                	mov    %edi,%eax
+  800ed4:	89 f2                	mov    %esi,%edx
+  800ed6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800ed9:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800edc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800ee2:	83 c4 30             	add    $0x30,%esp
+  800ee5:	5b                   	pop    %ebx
+  800ee6:	5e                   	pop    %esi
+  800ee7:	5f                   	pop    %edi
+  800ee8:	5d                   	pop    %ebp
+  800ee9:	c3                   	ret    
+
+00800eea <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800eea:	55                   	push   %ebp
+  800eeb:	89 e5                	mov    %esp,%ebp
+  800eed:	57                   	push   %edi
+  800eee:	56                   	push   %esi
+  800eef:	83 ec 20             	sub    $0x20,%esp
+  800ef2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800efe:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f07:	c1 e8 02             	shr    $0x2,%eax
+  800f0a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f12:	89 d7                	mov    %edx,%edi
+  800f14:	89 c6                	mov    %eax,%esi
+  800f16:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f1b:	83 e1 03             	and    $0x3,%ecx
+  800f1e:	74 02                	je     800f22 <memcpy+0x38>
+  800f20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f22:	89 f0                	mov    %esi,%eax
+  800f24:	89 fa                	mov    %edi,%edx
+  800f26:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f29:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f32:	83 c4 20             	add    $0x20,%esp
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f45:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f4b:	eb 30                	jmp    800f7d <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f50:	0f b6 10             	movzbl (%eax),%edx
+  800f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f56:	0f b6 00             	movzbl (%eax),%eax
+  800f59:	38 c2                	cmp    %al,%dl
+  800f5b:	74 18                	je     800f75 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f60:	0f b6 00             	movzbl (%eax),%eax
+  800f63:	0f b6 d0             	movzbl %al,%edx
+  800f66:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f69:	0f b6 00             	movzbl (%eax),%eax
+  800f6c:	0f b6 c0             	movzbl %al,%eax
+  800f6f:	29 c2                	sub    %eax,%edx
+  800f71:	89 d0                	mov    %edx,%eax
+  800f73:	eb 1a                	jmp    800f8f <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800f75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f80:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f83:	89 55 10             	mov    %edx,0x10(%ebp)
+  800f86:	85 c0                	test   %eax,%eax
+  800f88:	75 c3                	jne    800f4d <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f8f:	c9                   	leave  
+  800f90:	c3                   	ret    
+
+00800f91 <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  800f91:	55                   	push   %ebp
+  800f92:	89 e5                	mov    %esp,%ebp
+  800f94:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f97:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  800f9a:	e8 89 f3 ff ff       	call   800328 <getpid>
+  800f9f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fa3:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800faa:	e8 69 f1 ff ff       	call   800118 <cprintf>
+    for (i = 0; i < 5; i ++) {
+  800faf:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fb6:	00 
+  800fb7:	eb 27                	jmp    800fe0 <main+0x4f>
+        yield();
+  800fb9:	e8 4a f3 ff ff       	call   800308 <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  800fbe:	e8 65 f3 ff ff       	call   800328 <getpid>
+  800fc3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  800fc7:	89 54 24 08          	mov    %edx,0x8(%esp)
+  800fcb:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fcf:	c7 04 24 1c 13 80 00 	movl   $0x80131c,(%esp)
+  800fd6:	e8 3d f1 ff ff       	call   800118 <cprintf>
+
+int
+main(void) {
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+    for (i = 0; i < 5; i ++) {
+  800fdb:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  800fe0:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  800fe5:	7e d2                	jle    800fb9 <main+0x28>
+        yield();
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+    }
+    cprintf("All done in process %d.\n", getpid());
+  800fe7:	e8 3c f3 ff ff       	call   800328 <getpid>
+  800fec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff0:	c7 04 24 3f 13 80 00 	movl   $0x80133f,(%esp)
+  800ff7:	e8 1c f1 ff ff       	call   800118 <cprintf>
+    cprintf("yield pass.\n");
+  800ffc:	c7 04 24 58 13 80 00 	movl   $0x801358,(%esp)
+  801003:	e8 10 f1 ff ff       	call   800118 <cprintf>
+    return 0;
+  801008:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100d:	c9                   	leave  
+  80100e:	c3                   	ret    
diff -r -u -P ../../origin/labcodes/lab5/obj/user/yield.d lab5/obj/user/yield.d
--- ../../origin/labcodes/lab5/obj/user/yield.d	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/yield.d	2020-05-28 11:30:14.541041032 +0800
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files ../../origin/labcodes/lab5/obj/user/yield.o and lab5/obj/user/yield.o differ
diff -r -u -P ../../origin/labcodes/lab5/obj/user/yield.sym lab5/obj/user/yield.sym
--- ../../origin/labcodes/lab5/obj/user/yield.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab5/obj/user/yield.sym	2020-05-28 11:30:16.449041032 +0800
@@ -0,0 +1,73 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ad1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+00800380 printnum
+00800485 getuint
+008004d4 getint
+00800934 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 yield.c
+00000000 
+00800b31 strcpy
+00800308 yield
+008002ee waitpid
+00800234 sys_yield
+00800e47 memmove
+00800969 snprintf
+00800549 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800328 getpid
+00800eea memcpy
+0080099d vsnprintf
+00800342 umain
+00202ad0 __STAB_END__
+00800248 sys_kill
+00202ad1 __STABSTR_BEGIN__
+0080002f __panic
+00800caa strtol
+00800b01 strnlen
+00800335 print_pgdir
+00800315 kill
+00800c7c strfind
+008002d2 wait
+00800020 _start
+00800a01 rand
+00800bf3 strncmp
+00800277 sys_putc
+00800b70 strncpy
+00800f39 memcmp
+008002c5 fork
+00800e08 memset
+00800f91 main
+00800ac1 srand
+0080035b hash32
+0080051b printfmt
+002037ef __STABSTR_END__
+00800baa strcmp
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002a6 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800ad9 strlen
+00800292 sys_pgdir
+00800c49 strchr
+00800263 sys_getpid
Binary files ../../origin/labcodes/lab5/obj/__user_badarg.out and lab5/obj/__user_badarg.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_badsegment.out and lab5/obj/__user_badsegment.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_divzero.out and lab5/obj/__user_divzero.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_exit.out and lab5/obj/__user_exit.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_faultreadkernel.out and lab5/obj/__user_faultreadkernel.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_faultread.out and lab5/obj/__user_faultread.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_forktest.out and lab5/obj/__user_forktest.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_forktree.out and lab5/obj/__user_forktree.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_hello.out and lab5/obj/__user_hello.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_pgdir.out and lab5/obj/__user_pgdir.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_softint.out and lab5/obj/__user_softint.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_spin.out and lab5/obj/__user_spin.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_testbss.out and lab5/obj/__user_testbss.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_waitkill.out and lab5/obj/__user_waitkill.out differ
Binary files ../../origin/labcodes/lab5/obj/__user_yield.out and lab5/obj/__user_yield.out differ
diff -r -u -P ../../origin/labcodes/lab5/.pgdir.log lab5/.pgdir.log
--- ../../origin/labcodes/lab5/.pgdir.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.pgdir.log	2020-05-28 11:30:30.853041032 +0800
@@ -0,0 +1,128 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "pgdir".
+I am 2, print pgdir.
+-------------------- BEGIN --------------------
+PDE(001) 00000000-00400000 00400000 urw
+  |-- PTE(00004) 00200000-00204000 00004000 urw
+PDE(001) 00800000-00c00000 00400000 urw
+  |-- PTE(00002) 00800000-00802000 00002000 ur-
+  |-- PTE(00001) 00802000-00803000 00001000 urw
+PDE(001) afc00000-b0000000 00400000 urw
+  |-- PTE(00004) afffc000-b0000000 00004000 urw
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(00001) fac00000-fac01000 00001000 urw
+  |-- PTE(00001) fac02000-fac03000 00001000 urw
+  |-- PTE(00001) faebf000-faec0000 00001000 urw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+pgdir pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.qemu.out lab5/.qemu.out
--- ../../origin/labcodes/lab5/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.qemu.out	2020-05-28 11:30:58.297041032 +0800
@@ -0,0 +1,139 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktree".
+0002: I am ''
+0004: I am '1'
+0003: I am '0'
+0008: I am '01'
+0007: I am '00'
+0006: I am '11'
+0005: I am '10'
+0010: I am '101'
+000f: I am '100'
+000e: I am '111'
+000d: I am '110'
+000c: I am '001'
+000b: I am '000'
+000a: I am '011'
+0009: I am '010'
+0020: I am '0101'
+001f: I am '0100'
+001e: I am '0111'
+001d: I am '0110'
+001c: I am '0001'
+001b: I am '0000'
+001a: I am '0011'
+0019: I am '0010'
+0018: I am '1101'
+0017: I am '1100'
+0016: I am '1111'
+0015: I am '1110'
+0014: I am '1001'
+0013: I am '1000'
+0012: I am '1011'
+0011: I am '1010'
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.softint.log lab5/.softint.log
--- ../../origin/labcodes/lab5/.softint.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.softint.log	2020-05-28 11:30:21.997041032 +0800
@@ -0,0 +1,130 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "softint".
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000072
+  eip  0x00800f9a
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.spin.log lab5/.spin.log
--- ../../origin/labcodes/lab5/.spin.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.spin.log	2020-05-28 11:30:40.913041032 +0800
@@ -0,0 +1,115 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "spin".
+I am the parent. Forking the child...
+I am the parent. Running the child...
+I am the child. spinning ...
+I am the parent.  Killing the child...
+kill returns 0
+wait returns 0
+spin may pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P ../../origin/labcodes/lab5/.testbss.log lab5/.testbss.log
--- ../../origin/labcodes/lab5/.testbss.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.testbss.log	2020-05-28 11:30:29.101041032 +0800
@@ -0,0 +1,138 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "testbss".
+Making sure bss works right...
+Yes, good.  Now doing a wild write off the end...
+testbss may pass.
+not valid addr c03020, and  can not find it in vma
+trapframe at 0xc038afb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc038afd4
+  ebx  0x00000000
+  edx  0x0080145a
+  ecx  0xaffffec8
+  eax  0x00000012
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000006
+  eip  0x00801082
+  cs   0x----001b
+  flag 0x00000282 SF,IF,IOPL=0
+  esp  0xafffff80
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:210:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc038af18 eip:0xc0100aeb args:0xc010c184 0xc038af5c 0x000000d2 0x008000d6 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc038af48 eip:0xc0100e4b args:0xc010c32e 0x000000d2 0xc010c5d0 0xfffffffd 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc038af78 eip:0xc01028ef args:0xc038afb4 0x00000000 0x00800020 0x0000001b 
+    kern/trap/trap.c:210: trap_dispatch+289
+ebp:0xc038afa8 eip:0xc0102a41 args:0xc038afb4 0x00000000 0x00000000 0xafffffa8 
+    kern/trap/trap.c:287: trap+74
+ebp:0xafffffa8 eip:0xc0102a96 args:0x00000000 0x00000000 0x00000000 0x00000000 
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8 eip:0x0080034d args:0x00000000 0x00000000 0x00000000 0x00000000 
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.waitkill.log lab5/.waitkill.log
--- ../../origin/labcodes/lab5/.waitkill.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.waitkill.log	2020-05-28 11:30:54.669041032 +0800
@@ -0,0 +1,114 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "waitkill".
+wait child 1.
+child 2.
+child 1.
+kill parent ok.
+kill child1 ok.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P ../../origin/labcodes/lab5/.yield.log lab5/.yield.log
--- ../../origin/labcodes/lab5/.yield.log	1970-01-01 08:00:00.000000000 +0800
+++ lab5/.yield.log	2020-05-28 11:30:32.665041032 +0800
@@ -0,0 +1,117 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010be93 (phys)
+  edata  0xc019e000 (phys)
+  end    0xc01a1178 (phys)
+Kernel executable memory footprint: 645KB
+ebp:0xc0129f38 eip:0xc0100aeb args:0x00010094 0x00000000 0xc0129f68 0xc01000df 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0129f48 eip:0xc0100dda args:0x00000000 0x00000000 0x00000000 0xc0129fb8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0129f68 eip:0xc01000df args:0x00000000 0xc0129f90 0xffff0000 0xc0129f94 
+    kern/init/init.c:58: grade_backtrace2+33
+ebp:0xc0129f88 eip:0xc0100108 args:0x00000000 0xffff0000 0xc0129fb4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+38
+ebp:0xc0129fa8 eip:0xc0100126 args:0x00000000 0xc0100036 0xffff0000 0x0000001d 
+    kern/init/init.c:68: grade_backtrace0+23
+ebp:0xc0129fc8 eip:0xc010014b args:0xc010bebc 0xc010bea0 0x00003178 0x00000000 
+    kern/init/init.c:73: grade_backtrace+34
+ebp:0xc0129ff8 eip:0xc010008b args:0xc010c050 0xc010c058 0xc0100d60 0xc010c077 
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31866
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "yield".
+Hello, I am process 2.
+Back in process 2, iteration 0.
+Back in process 2, iteration 1.
+Back in process 2, iteration 2.
+Back in process 2, iteration 3.
+Back in process 2, iteration 4.
+All done in process 2.
+yield pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:466:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0383f88 eip:0xc0100aeb args:0xc010c184 0xc0383fcc 0x000001d2 0xc0383fb8 
+    kern/debug/kdebug.c:350: print_stackframe+21
+ebp:0xc0383fb8 eip:0xc0100e4b args:0xc010df70 0x000001d2 0xc010df94 0x00000000 
+    kern/debug/panic.c:27: __panic+105
+ebp:0xc0383fe8 eip:0xc0109f96 args:0x00000000 0x00000000 0x00000000 0x00000010 
+    kern/process/proc.c:466: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
